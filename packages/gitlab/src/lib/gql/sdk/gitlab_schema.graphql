"""
Represents the access level of a relationship between a User and object that it is related to
"""
type AccessLevel {
  """
  Integer representation of access level.
  """
  integerValue: Int

  """
  String representation of access level.
  """
  stringValue: AccessLevelEnum
}

"""
Access level to a resource
"""
enum AccessLevelEnum {
  """
  Developer access.
  """
  DEVELOPER

  """
  Guest access.
  """
  GUEST

  """
  Maintainer access.
  """
  MAINTAINER

  """
  Minimal access.
  """
  MINIMAL_ACCESS

  """
  No access.
  """
  NO_ACCESS

  """
  Owner access.
  """
  OWNER

  """
  Reporter access.
  """
  REPORTER
}

"""
Autogenerated input type of AdminSidekiqQueuesDeleteJobs
"""
input AdminSidekiqQueuesDeleteJobsInput {
  """
  Delete jobs matching artifact_size in the context metadata.
  """
  artifactSize: String

  """
  Delete jobs matching artifacts_dependencies_count in the context metadata.
  """
  artifactsDependenciesCount: String

  """
  Delete jobs matching artifacts_dependencies_size in the context metadata.
  """
  artifactsDependenciesSize: String

  """
  Delete jobs matching caller_id in the context metadata.
  """
  callerId: String

  """
  Delete jobs matching client_id in the context metadata.
  """
  clientId: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Delete jobs matching feature_category in the context metadata.
  """
  featureCategory: String

  """
  Delete jobs matching job_id in the context metadata.
  """
  jobId: String

  """
  Delete jobs matching pipeline_id in the context metadata.
  """
  pipelineId: String

  """
  Delete jobs matching project in the context metadata.
  """
  project: String

  """
  Name of the queue to delete jobs from.
  """
  queueName: String!

  """
  Delete jobs matching related_class in the context metadata.
  """
  relatedClass: String

  """
  Delete jobs matching remote_ip in the context metadata.
  """
  remoteIp: String

  """
  Delete jobs matching root_caller_id in the context metadata.
  """
  rootCallerId: String

  """
  Delete jobs matching root_namespace in the context metadata.
  """
  rootNamespace: String

  """
  Delete jobs matching user in the context metadata.
  """
  user: String

  """
  Delete jobs with the given worker class.
  """
  workerClass: String
}

"""
Autogenerated return type of AdminSidekiqQueuesDeleteJobs
"""
type AdminSidekiqQueuesDeleteJobsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Information about the status of the deletion request.
  """
  result: DeleteJobsResponse
}

"""
Configuration details for an Agent
"""
type AgentConfiguration {
  """
  Name of the agent.
  """
  agentName: String
}

"""
The connection type for AgentConfiguration.
"""
type AgentConfigurationConnection {
  """
  A list of edges.
  """
  edges: [AgentConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [AgentConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AgentConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AgentConfiguration
}

"""
Information about a connected Agent
"""
type AgentMetadata {
  """
  Agent version commit.
  """
  commit: String

  """
  Name of the pod running the Agent.
  """
  podName: String

  """
  Namespace of the pod running the Agent.
  """
  podNamespace: String

  """
  Agent version tag.
  """
  version: String
}

"""
Agent token statuses
"""
enum AgentTokenStatus {
  """
  Active agent token.
  """
  ACTIVE

  """
  Revoked agent token.
  """
  REVOKED
}

"""
Describes an alert from the project's Alert Management
"""
type AlertManagementAlert implements NoteableInterface & Todoable {
  """
  Assignees of the alert.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Timestamp the alert was created.
  """
  createdAt: Time

  """
  Description of the alert.
  """
  description: String

  """
  Alert details.
  """
  details: JSON

  """
  URL of the alert detail page.
  """
  detailsUrl: String!

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  Timestamp the alert ended.
  """
  endedAt: Time

  """
  Environment for the alert.
  """
  environment: Environment

  """
  Number of events of this alert.
  """
  eventCount: Int

  """
  List of hosts the alert came from.
  """
  hosts: [String!]

  """
  Internal ID of the alert.
  """
  iid: ID!

  """
  Issue attached to the alert.
  """
  issue: Issue

  """
  Internal ID of the GitLab issue attached to the alert. Deprecated in 13.10: Use issue field.
  """
  issueIid: ID @deprecated(reason: "Use issue field. Deprecated in 13.10.")

  """
  URL for metrics embed for the alert.
  """
  metricsDashboardUrl: String

  """
  Monitoring tool the alert came from.
  """
  monitoringTool: String

  """
  All notes on this noteable.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  Alert condition for Prometheus.
  """
  prometheusAlert: PrometheusAlert

  """
  Runbook for the alert as defined in alert details.
  """
  runbook: String

  """
  Service the alert came from.
  """
  service: String

  """
  Severity of the alert.
  """
  severity: AlertManagementSeverity

  """
  Timestamp the alert was raised.
  """
  startedAt: Time

  """
  Status of the alert.
  """
  status: AlertManagementStatus

  """
  Title of the alert.
  """
  title: String

  """
  To-do items of the current user for the alert.
  """
  todos(
    """
    Action to be filtered.
    """
    action: [TodoActionEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of a group.
    """
    groupId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: [ID!]

    """
    State of the todo.
    """
    state: [TodoStateEnum!]

    """
    Type of the todo.
    """
    type: [TodoTargetEnum!]
  ): TodoConnection

  """
  Timestamp the alert was last updated.
  """
  updatedAt: Time

  """
  URL of the alert.
  """
  webUrl: String!
}

"""
The connection type for AlertManagementAlert.
"""
type AlertManagementAlertConnection {
  """
  A list of edges.
  """
  edges: [AlertManagementAlertEdge]

  """
  A list of nodes.
  """
  nodes: [AlertManagementAlert]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AlertManagementAlertEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AlertManagementAlert
}

"""
Values for sorting alerts
"""
enum AlertManagementAlertSort {
  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created time by ascending order.
  """
  CREATED_TIME_ASC

  """
  Created time by descending order.
  """
  CREATED_TIME_DESC

  """
  End time by ascending order.
  """
  ENDED_AT_ASC

  """
  End time by descending order.
  """
  ENDED_AT_DESC

  """
  Events count by ascending order.
  """
  EVENT_COUNT_ASC

  """
  Events count by descending order.
  """
  EVENT_COUNT_DESC

  """
  Severity from less critical to more critical.
  """
  SEVERITY_ASC

  """
  Severity from more critical to less critical.
  """
  SEVERITY_DESC

  """
  Start time by ascending order.
  """
  STARTED_AT_ASC

  """
  Start time by descending order.
  """
  STARTED_AT_DESC

  """
  Status by order: `Ignored > Resolved > Acknowledged > Triggered`.
  """
  STATUS_ASC

  """
  Status by order: `Triggered > Acknowledged > Resolved > Ignored`.
  """
  STATUS_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Created time by ascending order.
  """
  UPDATED_TIME_ASC

  """
  Created time by descending order.
  """
  UPDATED_TIME_DESC

  """
  Created at ascending order.
  """
  created_asc @deprecated(reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5.")

  """
  Created at descending order.
  """
  created_desc @deprecated(reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5.")

  """
  Updated at ascending order.
  """
  updated_asc @deprecated(reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5.")

  """
  Updated at descending order.
  """
  updated_desc @deprecated(reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5.")
}

"""
Represents total number of alerts for the represented categories
"""
type AlertManagementAlertStatusCountsType {
  """
  Number of alerts with status ACKNOWLEDGED for the project
  """
  acknowledged: Int

  """
  Total number of alerts for the project.
  """
  all: Int

  """
  Number of alerts with status IGNORED for the project
  """
  ignored: Int

  """
  Number of alerts with status TRIGGERED or ACKNOWLEDGED for the project.
  """
  open: Int

  """
  Number of alerts with status RESOLVED for the project
  """
  resolved: Int

  """
  Number of alerts with status TRIGGERED for the project
  """
  triggered: Int
}

"""
Filters the alerts based on given domain
"""
enum AlertManagementDomainFilter {
  """
  Alerts for operations domain.
  """
  operations

  """
  Alerts for threat monitoring domain. Deprecated in 15.0: Network policies are
  deprecated and will be removed in GitLab 16.0.
  """
  threat_monitoring @deprecated(reason: "Network policies are deprecated and will be removed in GitLab 16.0. Deprecated in 15.0.")
}

"""
An endpoint and credentials used to accept alerts for a project
"""
type AlertManagementHttpIntegration implements AlertManagementIntegration {
  """
  Whether the endpoint is currently accepting alerts.
  """
  active: Boolean

  """
  URL at which Prometheus metrics can be queried to populate the metrics dashboard.
  """
  apiUrl: String

  """
  ID of the integration.
  """
  id: ID!

  """
  Name of the integration.
  """
  name: String

  """
  Token used to authenticate alert notification requests.
  """
  token: String

  """
  Type of integration.
  """
  type: AlertManagementIntegrationType!

  """
  Endpoint which accepts alert notifications.
  """
  url: String
}

"""
The connection type for AlertManagementHttpIntegration.
"""
type AlertManagementHttpIntegrationConnection {
  """
  A list of edges.
  """
  edges: [AlertManagementHttpIntegrationEdge]

  """
  A list of nodes.
  """
  nodes: [AlertManagementHttpIntegration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AlertManagementHttpIntegrationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AlertManagementHttpIntegration
}

"""
A `AlertManagementHttpIntegrationID` is a global ID. It is encoded as a string.

An example `AlertManagementHttpIntegrationID` is: `"gid://gitlab/AlertManagement::HttpIntegration/1"`.
"""
scalar AlertManagementHttpIntegrationID

interface AlertManagementIntegration {
  """
  Whether the endpoint is currently accepting alerts.
  """
  active: Boolean

  """
  URL at which Prometheus metrics can be queried to populate the metrics dashboard.
  """
  apiUrl: String

  """
  ID of the integration.
  """
  id: ID!

  """
  Name of the integration.
  """
  name: String

  """
  Token used to authenticate alert notification requests.
  """
  token: String

  """
  Type of integration.
  """
  type: AlertManagementIntegrationType!

  """
  Endpoint which accepts alert notifications.
  """
  url: String
}

"""
The connection type for AlertManagementIntegration.
"""
type AlertManagementIntegrationConnection {
  """
  A list of edges.
  """
  edges: [AlertManagementIntegrationEdge]

  """
  A list of nodes.
  """
  nodes: [AlertManagementIntegration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AlertManagementIntegrationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AlertManagementIntegration
}

"""
Values of types of integrations
"""
enum AlertManagementIntegrationType {
  """
  Integration with any monitoring tool.
  """
  HTTP

  """
  Prometheus integration.
  """
  PROMETHEUS
}

"""
An endpoint and credentials used to accept Prometheus alerts for a project
"""
type AlertManagementPrometheusIntegration implements AlertManagementIntegration {
  """
  Whether the endpoint is currently accepting alerts.
  """
  active: Boolean

  """
  URL at which Prometheus metrics can be queried to populate the metrics dashboard.
  """
  apiUrl: String

  """
  ID of the integration.
  """
  id: ID!

  """
  Name of the integration.
  """
  name: String

  """
  Token used to authenticate alert notification requests.
  """
  token: String

  """
  Type of integration.
  """
  type: AlertManagementIntegrationType!

  """
  Endpoint which accepts alert notifications.
  """
  url: String
}

"""
Alert severity values
"""
enum AlertManagementSeverity {
  """
  Critical severity
  """
  CRITICAL

  """
  High severity
  """
  HIGH

  """
  Info severity
  """
  INFO

  """
  Low severity
  """
  LOW

  """
  Medium severity
  """
  MEDIUM

  """
  Unknown severity
  """
  UNKNOWN
}

"""
Alert status values
"""
enum AlertManagementStatus {
  """
  Someone is actively investigating the problem.
  """
  ACKNOWLEDGED

  """
  No action will be taken.
  """
  IGNORED

  """
  The problem has been addressed.
  """
  RESOLVED

  """
  Investigation has not started.
  """
  TRIGGERED
}

"""
Autogenerated input type of AlertSetAssignees
"""
input AlertSetAssigneesInput {
  """
  Usernames to assign to the alert. Replaces existing assignees by default.
  """
  assigneeUsernames: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the alert to mutate.
  """
  iid: String!

  """
  Operation to perform. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode

  """
  Project the alert to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of AlertSetAssignees
"""
type AlertSetAssigneesPayload {
  """
  Alert after mutation.
  """
  alert: AlertManagementAlert

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue created after mutation.
  """
  issue: Issue

  """
  To-do item after mutation.
  """
  todo: Todo
}

"""
Autogenerated input type of AlertTodoCreate
"""
input AlertTodoCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the alert to mutate.
  """
  iid: String!

  """
  Project the alert to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of AlertTodoCreate
"""
type AlertTodoCreatePayload {
  """
  Alert after mutation.
  """
  alert: AlertManagementAlert

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue created after mutation.
  """
  issue: Issue

  """
  To-do item after mutation.
  """
  todo: Todo
}

"""
Assignee ID wildcard values
"""
enum AssigneeWildcardId {
  """
  An assignee is assigned.
  """
  ANY

  """
  No assignee is assigned.
  """
  NONE
}

"""
User availability status
"""
enum AvailabilityEnum {
  """
  Busy
  """
  BUSY

  """
  Not Set
  """
  NOT_SET
}

"""
An emoji awarded by a user
"""
type AwardEmoji {
  """
  Emoji description.
  """
  description: String!

  """
  Emoji as an icon.
  """
  emoji: String!

  """
  Emoji name.
  """
  name: String!

  """
  Emoji in Unicode.
  """
  unicode: String!

  """
  Unicode version for this emoji.
  """
  unicodeVersion: String!

  """
  User who awarded the emoji.
  """
  user: UserCore!
}

"""
Autogenerated input type of AwardEmojiAdd
"""
input AwardEmojiAddInput {
  """
  Global ID of the awardable resource.
  """
  awardableId: AwardableID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Emoji name.
  """
  name: String!
}

"""
Autogenerated return type of AwardEmojiAdd
"""
type AwardEmojiAddPayload {
  """
  Award emoji after mutation.
  """
  awardEmoji: AwardEmoji

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of AwardEmojiRemove
"""
input AwardEmojiRemoveInput {
  """
  Global ID of the awardable resource.
  """
  awardableId: AwardableID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Emoji name.
  """
  name: String!
}

"""
Autogenerated return type of AwardEmojiRemove
"""
type AwardEmojiRemovePayload {
  """
  Award emoji after mutation.
  """
  awardEmoji: AwardEmoji

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of AwardEmojiToggle
"""
input AwardEmojiToggleInput {
  """
  Global ID of the awardable resource.
  """
  awardableId: AwardableID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Emoji name.
  """
  name: String!
}

"""
Autogenerated return type of AwardEmojiToggle
"""
type AwardEmojiTogglePayload {
  """
  Award emoji after mutation.
  """
  awardEmoji: AwardEmoji

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Indicates the status of the emoji. True if the toggle awarded the emoji, and false if the toggle removed the emoji.
  """
  toggledOn: Boolean!
}

"""
A `AwardableID` is a global ID. It is encoded as a string.

An example `AwardableID` is: `"gid://gitlab/Awardable/1"`.
"""
scalar AwardableID

type BaseService implements Service {
  """
  Indicates if the service is active.
  """
  active: Boolean

  """
  Type of the service.
  """
  serviceType: ServiceType

  """
  Class name of the service.
  """
  type: String
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type Blob implements Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  LFS ID of the blob.
  """
  lfsOid: String

  """
  Blob mode in numeric format.
  """
  mode: String

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Type of tree entry.
  """
  type: EntryType!

  """
  Web path of the blob.
  """
  webPath: String

  """
  Web URL of the blob.
  """
  webUrl: String
}

"""
The connection type for Blob.
"""
type BlobConnection {
  """
  A list of edges.
  """
  edges: [BlobEdge]

  """
  A list of nodes.
  """
  nodes: [Blob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Blob
}

"""
Represents how the blob content should be displayed
"""
type BlobViewer {
  """
  Shows whether the blob should be displayed collapsed.
  """
  collapsed: Boolean!

  """
  Content file type.
  """
  fileType: String!

  """
  Shows whether the blob content is loaded asynchronously.
  """
  loadAsync: Boolean!

  """
  Loading partial name.
  """
  loadingPartialName: String!

  """
  Error rendering the blob content.
  """
  renderError: String

  """
  Shows whether the blob is too large to be displayed.
  """
  tooLarge: Boolean!

  """
  Type of blob viewer.
  """
  type: BlobViewersType!
}

"""
Types of blob viewers
"""
enum BlobViewersType {
  """
  Auxiliary blob viewers type.
  """
  auxiliary

  """
  Rich blob viewers type.
  """
  rich

  """
  Simple blob viewers type.
  """
  simple
}

"""
Represents a project or group issue board
"""
type Board {
  """
  Timestamp of when the board was created.
  """
  createdAt: Time!

  """
  Whether or not backlog list is hidden.
  """
  hideBacklogList: Boolean

  """
  Whether or not closed list is hidden.
  """
  hideClosedList: Boolean

  """
  ID (global ID) of the board.
  """
  id: ID!

  """
  Lists of the board.
  """
  lists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Find a list by its global ID.
    """
    id: ListID

    """
    Filters applied when getting issue metadata in the board list.
    """
    issueFilters: BoardIssueInput

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardListConnection

  """
  Name of the board.
  """
  name: String

  """
  Timestamp of when the board was last updated.
  """
  updatedAt: Time!

  """
  Web path of the board.
  """
  webPath: String!

  """
  Web URL of the board.
  """
  webUrl: String!
}

"""
The connection type for Board.
"""
type BoardConnection {
  """
  A list of edges.
  """
  edges: [BoardEdge]

  """
  A list of nodes.
  """
  nodes: [Board]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BoardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Board
}

"""
A `BoardID` is a global ID. It is encoded as a string.

An example `BoardID` is: `"gid://gitlab/Board/1"`.
"""
scalar BoardID

input BoardIssueInput {
  """
  Filter by assignee username.
  """
  assigneeUsername: [String]

  """
  Filter by assignee wildcard. Incompatible with assigneeUsername.
  """
  assigneeWildcardId: AssigneeWildcardId

  """
  Filter by author username.
  """
  authorUsername: String

  """
  Filter by confidentiality.
  """
  confidential: Boolean

  """
  List of IIDs of issues. For example `["1", "2"]`.
  """
  iids: [String!]

  """
  Filter by label name.
  """
  labelName: [String]

  """
  Filter by milestone title.
  """
  milestoneTitle: String

  """
  Filter by milestone ID wildcard.
  """
  milestoneWildcardId: MilestoneWildcardId

  """
  Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
  """
  myReactionEmoji: String

  """
  List of negated arguments.
  """
  not: NegatedBoardIssueInput

  """
  Filter by release tag.
  """
  releaseTag: String

  """
  Search query for issue title or description.
  """
  search: String

  """
  Filter by the given issue types.
  """
  types: [IssueType!]
}

"""
Represents a list for an issue board
"""
type BoardList {
  """
  Indicates if the list is collapsed for this user.
  """
  collapsed: Boolean

  """
  ID (global ID) of the list.
  """
  id: ID!

  """
  Board issues.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters applied when selecting issues in the board list.
    """
    filters: BoardIssueInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection

  """
  Count of issues in the list.
  """
  issuesCount: Int

  """
  Label of the list.
  """
  label: Label

  """
  Type of the list.
  """
  listType: String!

  """
  Position of list within the board.
  """
  position: Int

  """
  Title of the list.
  """
  title: String!
}

"""
The connection type for BoardList.
"""
type BoardListConnection {
  """
  A list of edges.
  """
  edges: [BoardListEdge]

  """
  A list of nodes.
  """
  nodes: [BoardList]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of BoardListCreate
"""
input BoardListCreateInput {
  """
  Create the backlog list.
  """
  backlog: Boolean

  """
  Global ID of the issue board to mutate.
  """
  boardId: BoardID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of an existing label.
  """
  labelId: LabelID
}

"""
Autogenerated return type of BoardListCreate
"""
type BoardListCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue list in the issue board.
  """
  list: BoardList
}

"""
An edge in a connection.
"""
type BoardListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BoardList
}

type Branch {
  """
  Commit for the branch.
  """
  commit: Commit

  """
  Name of the branch.
  """
  name: String!
}

"""
Autogenerated input type of BulkRunnerDelete
"""
input BulkRunnerDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of the runners to delete.
  """
  ids: [CiRunnerID!]
}

"""
Autogenerated return type of BulkRunnerDelete
"""
type BulkRunnerDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Number of records effectively deleted. Only present if operation was performed synchronously.
  """
  deletedCount: Int

  """
  IDs of records effectively deleted. Only present if operation was performed synchronously.
  """
  deletedIds: [CiRunnerID!]

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type CiApplicationSettings {
  """
  Whether to keep the latest jobs artifacts.
  """
  keepLatestArtifact: Boolean
}

"""
A `CiBuildID` is a global ID. It is encoded as a string.

An example `CiBuildID` is: `"gid://gitlab/Ci::Build/1"`.
"""
scalar CiBuildID

type CiBuildNeed {
  """
  ID of the BuildNeed.
  """
  id: ID!

  """
  Name of the job we need to complete.
  """
  name: String
}

"""
The connection type for CiBuildNeed.
"""
type CiBuildNeedConnection {
  """
  A list of edges.
  """
  edges: [CiBuildNeedEdge]

  """
  A list of nodes.
  """
  nodes: [CiBuildNeed]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiBuildNeedEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiBuildNeed
}

"""
Autogenerated input type of CiCdSettingsUpdate
"""
input CiCdSettingsUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full Path of the project the settings belong to.
  """
  fullPath: ID!

  """
  Indicates CI job tokens generated in this project have restricted access to resources.
  """
  jobTokenScopeEnabled: Boolean

  """
  Indicates if the latest artifact should be kept for this project.
  """
  keepLatestArtifact: Boolean
}

"""
Autogenerated return type of CiCdSettingsUpdate
"""
type CiCdSettingsUpdatePayload {
  """
  CI/CD settings after mutation.
  """
  ciCdSettings: ProjectCiCdSetting!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type CiConfig {
  """
  Linting errors.
  """
  errors: [String!]

  """
  List of included files.
  """
  includes: [CiConfigInclude!]

  """
  Merged CI configuration YAML.
  """
  mergedYaml: String

  """
  Stages of the pipeline.
  """
  stages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiConfigStageConnection

  """
  Status of linting, can be either valid or invalid.
  """
  status: CiConfigStatus

  """
  Linting warnings.
  """
  warnings: [String!]
}

type CiConfigGroup {
  """
  Jobs in group.
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiConfigJobConnection

  """
  Name of the job group.
  """
  name: String

  """
  Size of the job group.
  """
  size: Int
}

"""
The connection type for CiConfigGroup.
"""
type CiConfigGroupConnection {
  """
  A list of edges.
  """
  edges: [CiConfigGroupEdge]

  """
  A list of nodes.
  """
  nodes: [CiConfigGroup]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiConfigGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiConfigGroup
}

type CiConfigInclude {
  """
  File blob location. It can be masked if it contains masked variables, e.g., "https://gitlab.com/gitlab-org/gitlab/-/blob/e52d6d0246d7375291850e61f0abc101fbda9dc2/.gitlab/ci/build-images.gitlab-ci.yml".
  """
  blob: String

  """
  Current project scope, e.g., "gitlab-org/gitlab".
  """
  contextProject: String

  """
  Current sha scope.
  """
  contextSha: String

  """
  Extra information for the `include`, which can contain `job_name`, `project`,
  and `ref`. Values can be masked if they contain masked variables.
  """
  extra: JSON

  """
  File location. It can be masked if it contains masked variables, e.g., ".gitlab/ci/build-images.gitlab-ci.yml".
  """
  location: String

  """
  File raw location. It can be masked if it contains masked variables, e.g., "https://gitlab.com/gitlab-org/gitlab/-/raw/e52d6d0246d7375291850e61f0abc101fbda9dc2/.gitlab/ci/build-images.gitlab-ci.yml".
  """
  raw: String

  """
  Include type.
  """
  type: CiConfigIncludeType
}

"""
Include type.
"""
enum CiConfigIncludeType {
  """
  Project file include.
  """
  file

  """
  Local include.
  """
  local

  """
  Remote include.
  """
  remote

  """
  Template include.
  """
  template
}

type CiConfigJob {
  """
  Override a set of commands that are executed after the job.
  """
  afterScript: [String!]

  """
  Allow job to fail.
  """
  allowFailure: Boolean

  """
  Override a set of commands that are executed before the job.
  """
  beforeScript: [String!]

  """
  Name of an environment to which the job deploys.
  """
  environment: String

  """
  Limit when jobs are not created.
  """
  except: CiConfigJobRestriction

  """
  Name of the job group.
  """
  groupName: String

  """
  Name of the job.
  """
  name: String

  """
  Builds that must complete before the jobs run.
  """
  needs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiConfigNeedConnection

  """
  Jobs are created when these conditions do not apply.
  """
  only: CiConfigJobRestriction

  """
  Shell script that is executed by a runner.
  """
  script: [String!]

  """
  Name of the job stage.
  """
  stage: String

  """
  List of tags that are used to select a runner.
  """
  tags: [String!]

  """
  When to run the job.
  """
  when: String
}

"""
The connection type for CiConfigJob.
"""
type CiConfigJobConnection {
  """
  A list of edges.
  """
  edges: [CiConfigJobEdge]

  """
  A list of nodes.
  """
  nodes: [CiConfigJob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiConfigJobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiConfigJob
}

type CiConfigJobRestriction {
  """
  Git refs the job restriction applies to.
  """
  refs: [String!]
}

type CiConfigNeed {
  """
  Name of the need.
  """
  name: String
}

"""
The connection type for CiConfigNeed.
"""
type CiConfigNeedConnection {
  """
  A list of edges.
  """
  edges: [CiConfigNeedEdge]

  """
  A list of nodes.
  """
  nodes: [CiConfigNeed]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiConfigNeedEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiConfigNeed
}

type CiConfigStage {
  """
  Groups of jobs for the stage.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiConfigGroupConnection

  """
  Name of the stage.
  """
  name: String
}

"""
The connection type for CiConfigStage.
"""
type CiConfigStageConnection {
  """
  A list of edges.
  """
  edges: [CiConfigStageEdge]

  """
  A list of nodes.
  """
  nodes: [CiConfigStage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiConfigStageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiConfigStage
}

"""
Values for YAML processor result
"""
enum CiConfigStatus {
  """
  Configuration file is not valid.
  """
  INVALID

  """
  Configuration file is valid.
  """
  VALID
}

type CiGroup {
  """
  Detailed status of the group.
  """
  detailedStatus: DetailedStatus

  """
  ID for a group.
  """
  id: String!

  """
  Jobs in group.
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiJobConnection

  """
  Name of the job group.
  """
  name: String

  """
  Size of the group.
  """
  size: Int
}

"""
The connection type for CiGroup.
"""
type CiGroupConnection {
  """
  A list of edges.
  """
  edges: [CiGroupEdge]

  """
  A list of nodes.
  """
  nodes: [CiGroup]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiGroup
}

"""
CI/CD variables for a group.
"""
type CiGroupVariable implements CiVariable {
  """
  Scope defining the environments that can use the variable.
  """
  environmentScope: String

  """
  ID of the variable.
  """
  id: ID!

  """
  Name of the variable.
  """
  key: String

  """
  Indicates whether the variable is masked.
  """
  masked: Boolean

  """
  Indicates whether the variable is protected.
  """
  protected: Boolean

  """
  Indicates whether the variable is raw.
  """
  raw: Boolean

  """
  Value of the variable.
  """
  value: String

  """
  Type of the variable.
  """
  variableType: CiVariableType
}

"""
The connection type for CiGroupVariable.
"""
type CiGroupVariableConnection {
  """
  A list of edges.
  """
  edges: [CiGroupVariableEdge]

  """
  A list of nodes.
  """
  nodes: [CiGroupVariable]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiGroupVariableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiGroupVariable
}

"""
CI/CD variables for a GitLab instance.
"""
type CiInstanceVariable implements CiVariable {
  """
  Scope defining the environments that can use the variable. Deprecated in 15.3:
  No longer used, only available for GroupVariableType and ProjectVariableType.
  """
  environmentScope: String @deprecated(reason: "No longer used, only available for GroupVariableType and ProjectVariableType. Deprecated in 15.3.")

  """
  ID of the variable.
  """
  id: ID!

  """
  Name of the variable.
  """
  key: String

  """
  Indicates whether the variable is masked.
  """
  masked: Boolean

  """
  Indicates whether the variable is protected.
  """
  protected: Boolean

  """
  Indicates whether the variable is raw.
  """
  raw: Boolean

  """
  Value of the variable.
  """
  value: String

  """
  Type of the variable.
  """
  variableType: CiVariableType
}

"""
The connection type for CiInstanceVariable.
"""
type CiInstanceVariableConnection {
  """
  A list of edges.
  """
  edges: [CiInstanceVariableEdge]

  """
  A list of nodes.
  """
  nodes: [CiInstanceVariable]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiInstanceVariableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiInstanceVariable
}

type CiJob {
  """
  Indicates the job is active.
  """
  active: Boolean!

  """
  Whether the job is allowed to fail.
  """
  allowFailure: Boolean!

  """
  Artifacts generated by the job.
  """
  artifacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiJobArtifactConnection

  """
  Indicates the job can be canceled.
  """
  cancelable: Boolean!

  """
  Path to the commit that triggered the job.
  """
  commitPath: String

  """
  Coverage level of the job.
  """
  coverage: Float

  """
  When the job was created.
  """
  createdAt: Time!

  """
  Whether the job was created by a tag.
  """
  createdByTag: Boolean!

  """
  Detailed status of the job.
  """
  detailedStatus: DetailedStatus

  """
  Downstream pipeline for a bridge.
  """
  downstreamPipeline: Pipeline

  """
  Duration of the job in seconds.
  """
  duration: Int

  """
  When a job has finished running.
  """
  finishedAt: Time

  """
  ID of the job.
  """
  id: JobID

  """
  Indicates the type of job.
  """
  kind: CiJobKind!

  """
  Whether the job has a manual action.
  """
  manualJob: Boolean

  """
  Variables added to a manual job when the job is triggered.
  """
  manualVariables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiManualVariableConnection

  """
  Name of the job.
  """
  name: String

  """
  References to builds that must complete before the jobs run.
  """
  needs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiBuildNeedConnection

  """
  Pipeline the job belongs to.
  """
  pipeline: Pipeline

  """
  Indicates the job can be played.
  """
  playable: Boolean!

  """
  Jobs that must complete before the job runs. Returns `BuildNeed`, which is the
  needed jobs if the job uses the `needs` keyword, or the previous stage jobs otherwise.
  """
  previousStageJobsOrNeeds(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobNeedUnionConnection

  """
  When the job was enqueued and marked as pending.
  """
  queuedAt: Time

  """
  How long the job was enqueued before starting.
  """
  queuedDuration: Duration

  """
  Ref name of the job.
  """
  refName: String

  """
  Path to the ref.
  """
  refPath: String

  """
  Indicates that the job has been retried.
  """
  retried: Boolean

  """
  Indicates the job can be retried.
  """
  retryable: Boolean!

  """
  Schedule for the build.
  """
  scheduledAt: Time

  """
  Type of job scheduling. Value is `dag` if the job uses the `needs` keyword, and `stage` otherwise.
  """
  schedulingType: String

  """
  Short SHA1 ID of the commit.
  """
  shortSha: String!

  """
  Stage of the job.
  """
  stage: CiStage

  """
  When the job was started.
  """
  startedAt: Time

  """
  Status of the job.
  """
  status: CiJobStatus

  """
  Indicates the job is stuck.
  """
  stuck: Boolean!

  """
  Tags for the current job.
  """
  tags: [String!]

  """
  Whether the job was triggered.
  """
  triggered: Boolean

  """
  Permissions for the current user on the resource
  """
  userPermissions: JobPermissions!
}

type CiJobArtifact {
  """
  URL for downloading the artifact's file.
  """
  downloadPath: String

  """
  File type of the artifact.
  """
  fileType: JobArtifactFileType

  """
  File name of the artifact.
  """
  name: String
}

"""
The connection type for CiJobArtifact.
"""
type CiJobArtifactConnection {
  """
  A list of edges.
  """
  edges: [CiJobArtifactEdge]

  """
  A list of nodes.
  """
  nodes: [CiJobArtifact]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiJobArtifactEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiJobArtifact
}

"""
The connection type for CiJob.
"""
type CiJobConnection {
  """
  Limited count of collection. Returns limit + 1 for counts greater than the limit.
  """
  count(
    """
    Limit value to be applied to the count query. Default is 1000.
    """
    limit: Int = 1000
  ): Int!

  """
  A list of edges.
  """
  edges: [CiJobEdge]

  """
  A list of nodes.
  """
  nodes: [CiJob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiJobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiJob
}

enum CiJobKind {
  """
  Bridge CI job connecting a parent and child pipeline.
  """
  BRIDGE

  """
  Standard CI job.
  """
  BUILD
}

enum CiJobStatus {
  """
  A job that is canceled.
  """
  CANCELED

  """
  A job that is created.
  """
  CREATED

  """
  A job that is failed.
  """
  FAILED

  """
  A job that is manual.
  """
  MANUAL

  """
  A job that is pending.
  """
  PENDING

  """
  A job that is preparing.
  """
  PREPARING

  """
  A job that is running.
  """
  RUNNING

  """
  A job that is scheduled.
  """
  SCHEDULED

  """
  A job that is skipped.
  """
  SKIPPED

  """
  A job that is success.
  """
  SUCCESS

  """
  A job that is waiting for resource.
  """
  WAITING_FOR_RESOURCE
}

"""
Autogenerated input type of CiJobTokenScopeAddProject
"""
input CiJobTokenScopeAddProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project that the CI job token scope belongs to.
  """
  projectPath: ID!

  """
  Project to be added to the CI job token scope.
  """
  targetProjectPath: ID!
}

"""
Autogenerated return type of CiJobTokenScopeAddProject
"""
type CiJobTokenScopeAddProjectPayload {
  """
  CI job token's scope of access.
  """
  ciJobTokenScope: CiJobTokenScopeType

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CiJobTokenScopeRemoveProject
"""
input CiJobTokenScopeRemoveProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project that the CI job token scope belongs to.
  """
  projectPath: ID!

  """
  Project to be removed from the CI job token scope.
  """
  targetProjectPath: ID!
}

"""
Autogenerated return type of CiJobTokenScopeRemoveProject
"""
type CiJobTokenScopeRemoveProjectPayload {
  """
  CI job token's scope of access.
  """
  ciJobTokenScope: CiJobTokenScopeType

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type CiJobTokenScopeType {
  """
  Allow list of projects that can be accessed by CI Job tokens created by this project.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!
}

"""
CI/CD variables given to a manual job.
"""
type CiManualVariable implements CiVariable {
  """
  Scope defining the environments that can use the variable. Deprecated in 15.3:
  No longer used, only available for GroupVariableType and ProjectVariableType.
  """
  environmentScope: String @deprecated(reason: "No longer used, only available for GroupVariableType and ProjectVariableType. Deprecated in 15.3.")

  """
  ID of the variable.
  """
  id: ID!

  """
  Name of the variable.
  """
  key: String

  """
  Indicates whether the variable is raw.
  """
  raw: Boolean

  """
  Value of the variable.
  """
  value: String

  """
  Type of the variable.
  """
  variableType: CiVariableType
}

"""
The connection type for CiManualVariable.
"""
type CiManualVariableConnection {
  """
  A list of edges.
  """
  edges: [CiManualVariableEdge]

  """
  A list of nodes.
  """
  nodes: [CiManualVariable]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiManualVariableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiManualVariable
}

"""
A `CiPipelineID` is a global ID. It is encoded as a string.

An example `CiPipelineID` is: `"gid://gitlab/Ci::Pipeline/1"`.
"""
scalar CiPipelineID

"""
CI/CD variables for a project.
"""
type CiProjectVariable implements CiVariable {
  """
  Scope defining the environments that can use the variable.
  """
  environmentScope: String

  """
  ID of the variable.
  """
  id: ID!

  """
  Name of the variable.
  """
  key: String

  """
  Indicates whether the variable is masked.
  """
  masked: Boolean

  """
  Indicates whether the variable is protected.
  """
  protected: Boolean

  """
  Indicates whether the variable is raw.
  """
  raw: Boolean

  """
  Value of the variable.
  """
  value: String

  """
  Type of the variable.
  """
  variableType: CiVariableType
}

"""
The connection type for CiProjectVariable.
"""
type CiProjectVariableConnection {
  """
  A list of edges.
  """
  edges: [CiProjectVariableEdge]

  """
  A list of nodes.
  """
  nodes: [CiProjectVariable]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiProjectVariableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiProjectVariable
}

type CiRunner {
  """
  Access level of the runner.
  """
  accessLevel: CiRunnerAccessLevel!

  """
  Indicates the runner is allowed to receive jobs. Deprecated in 14.8: Use paused.
  """
  active: Boolean! @deprecated(reason: "Use paused. Deprecated in 14.8.")

  """
  Admin URL of the runner. Only available for administrators.
  """
  adminUrl: String

  """
  Architecture provided by the the runner.
  """
  architectureName: String

  """
  Timestamp of last contact from this runner.
  """
  contactedAt: Time

  """
  Timestamp of creation of this runner.
  """
  createdAt: Time

  """
  Description of the runner.
  """
  description: String

  """
  Admin form URL of the runner. Only available for administrators.
  """
  editAdminUrl: String

  """
  Executor last advertised by the runner.
  """
  executorName: String

  """
  Groups the runner is associated with. For group runners only.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the runner.
  """
  id: CiRunnerID!

  """
  IP address of the runner.
  """
  ipAddress: String

  """
  Number of jobs processed by the runner (limited to 1000, plus one to indicate that more items exist).
  """
  jobCount: Int

  """
  Jobs assigned to the runner.
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter jobs by status.
    """
    statuses: [CiJobStatus!]
  ): CiJobConnection

  """
  Indicates the runner is locked.
  """
  locked: Boolean

  """
  Runner's maintenance notes.
  """
  maintenanceNote: String

  """
  The GitLab Flavored Markdown rendering of `maintenance_note`
  """
  maintenanceNoteHtml: String

  """
  Maximum timeout (in seconds) for jobs processed by the runner.
  """
  maximumTimeout: Int

  """
  Project that owns the runner. For project runners only.
  """
  ownerProject: Project

  """
  Indicates the runner is paused and not available to run jobs.
  """
  paused: Boolean!

  """
  Platform provided by the runner.
  """
  platformName: String

  """
  Number of projects that the runner is associated with.
  """
  projectCount: Int

  """
  Projects the runner is associated with. For project runners only.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Revision of the runner.
  """
  revision: String

  """
  Indicates the runner is able to run untagged jobs.
  """
  runUntagged: Boolean!

  """
  Type of the runner.
  """
  runnerType: CiRunnerType!

  """
  First eight characters of the runner's token used to authenticate new job requests. Used as the runner's unique ID.
  """
  shortSha: String

  """
  Status of the runner.
  """
  status(
    """
    Compatibility mode. A null value turns off compatibility mode. Deprecated in
    15.0: Will be removed in 17.0. In GitLab 16.0 and later, the field will act
    as if `legacyMode` is null.
    """
    legacyMode: String = "14.5" @deprecated(reason: "Will be removed in 17.0. In GitLab 16.0 and later, the field will act as if `legacyMode` is null. Deprecated in 15.0.")
  ): CiRunnerStatus!

  """
  Tags associated with the runner.
  """
  tagList: [String!]

  """
  Runner token expiration time.
  """
  tokenExpiresAt: Time

  """
  Permissions for the current user on the resource
  """
  userPermissions: RunnerPermissions!

  """
  Version of the runner.
  """
  version: String
}

enum CiRunnerAccessLevel {
  """
  A runner that is not protected.
  """
  NOT_PROTECTED

  """
  A runner that is ref protected.
  """
  REF_PROTECTED
}

"""
The connection type for CiRunner.
"""
type CiRunnerConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [CiRunnerEdge]

  """
  A list of nodes.
  """
  nodes: [CiRunner]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiRunnerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  Web URL of the runner edit page. The value depends on where you put this field
  in the query. You can use it for projects or groups.
  """
  editUrl: String

  """
  The item at the end of the edge.
  """
  node: CiRunner

  """
  Web URL of the runner. The value depends on where you put this field in the query. You can use it for projects or groups.
  """
  webUrl: String
}

"""
A `CiRunnerID` is a global ID. It is encoded as a string.

An example `CiRunnerID` is: `"gid://gitlab/Ci::Runner/1"`.
"""
scalar CiRunnerID

"""
Values for sorting runners
"""
enum CiRunnerSort {
  """
  Ordered by contacted_at in ascending order.
  """
  CONTACTED_ASC

  """
  Ordered by contacted_at in descending order.
  """
  CONTACTED_DESC

  """
  Ordered by created_at in ascending order.
  """
  CREATED_ASC

  """
  Ordered by created_at in descending order.
  """
  CREATED_DESC

  """
  Ordered by token_expires_at in ascending order.
  """
  TOKEN_EXPIRES_AT_ASC

  """
  Ordered by token_expires_at in descending order.
  """
  TOKEN_EXPIRES_AT_DESC
}

enum CiRunnerStatus {
  """
  Runner that is not paused. Deprecated in 14.6: This was renamed.
  """
  ACTIVE @deprecated(reason: "This was renamed. Please use `CiRunner.paused`. Deprecated in 14.6.")

  """
  Runner that has never contacted this instance.
  """
  NEVER_CONTACTED

  """
  Runner that has not contacted this instance within the last 2 hours. Will be
  considered `STALE` if offline for more than 3 months.
  """
  OFFLINE

  """
  Runner that contacted this instance within the last 2 hours.
  """
  ONLINE

  """
  Runner that is paused. Deprecated in 14.6: This was renamed.
  """
  PAUSED @deprecated(reason: "This was renamed. Please use `CiRunner.paused`. Deprecated in 14.6.")

  """
  Runner that has not contacted this instance within the last 3 months.
  """
  STALE
}

enum CiRunnerType {
  """
  A runner that is group type.
  """
  GROUP_TYPE

  """
  A runner that is instance type.
  """
  INSTANCE_TYPE

  """
  A runner that is project type.
  """
  PROJECT_TYPE
}

enum CiRunnerUpgradeStatus {
  """
  Upgrade is available for the runner.
  """
  AVAILABLE

  """
  Runner version is not valid.
  """
  INVALID

  """
  Upgrade is not available for the runner.
  """
  NOT_AVAILABLE

  """
  Upgrade is available and recommended for the runner.
  """
  RECOMMENDED
}

type CiStage {
  """
  Detailed status of the stage.
  """
  detailedStatus: DetailedStatus

  """
  Group of jobs for the stage.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiGroupConnection

  """
  ID of the stage.
  """
  id: ID!

  """
  Jobs for the stage.
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiJobConnection

  """
  Name of the stage.
  """
  name: String

  """
  Status of the pipeline stage.
  """
  status: String
}

"""
The connection type for CiStage.
"""
type CiStageConnection {
  """
  A list of edges.
  """
  edges: [CiStageEdge]

  """
  A list of nodes.
  """
  nodes: [CiStage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CiStageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CiStage
}

"""
GitLab CI/CD configuration template.
"""
type CiTemplate {
  """
  Contents of the CI template.
  """
  content: String!

  """
  Name of the CI template.
  """
  name: String!
}

interface CiVariable {
  """
  ID of the variable.
  """
  id: ID!

  """
  Name of the variable.
  """
  key: String

  """
  Indicates whether the variable is raw.
  """
  raw: Boolean

  """
  Value of the variable.
  """
  value: String

  """
  Type of the variable.
  """
  variableType: CiVariableType
}

"""
Attributes for defining a CI/CD variable.
"""
input CiVariableInput {
  """
  Name of the variable.
  """
  key: String!

  """
  Value of the variable.
  """
  value: String!
}

enum CiVariableType {
  """
  Env var type.
  """
  ENV_VAR

  """
  File type.
  """
  FILE
}

type ClusterAgent {
  """
  Recent activity for the cluster agent.
  """
  activityEvents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ClusterAgentActivityEventConnection

  """
  Active connections for the cluster agent
  """
  connections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ConnectedAgentConnection

  """
  Timestamp the cluster agent was created.
  """
  createdAt: Time

  """
  User object, containing information about the person who created the agent.
  """
  createdByUser: UserCore

  """
  ID of the cluster agent.
  """
  id: ID!

  """
  Name of the cluster agent.
  """
  name: String

  """
  Project this cluster agent is associated with.
  """
  project: Project

  """
  Tokens associated with the cluster agent.
  """
  tokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Status of the token.
    """
    status: AgentTokenStatus
  ): ClusterAgentTokenConnection

  """
  Timestamp the cluster agent was updated.
  """
  updatedAt: Time

  """
  Web path of the cluster agent.
  """
  webPath: String
}

type ClusterAgentActivityEvent {
  """
  Agent token associated with the event.
  """
  agentToken: ClusterAgentToken

  """
  Type of event.
  """
  kind: String

  """
  Severity of the event.
  """
  level: String

  """
  Timestamp the event was recorded.
  """
  recordedAt: Time

  """
  User associated with the event.
  """
  user: UserCore
}

"""
The connection type for ClusterAgentActivityEvent.
"""
type ClusterAgentActivityEventConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [ClusterAgentActivityEventEdge]

  """
  A list of nodes.
  """
  nodes: [ClusterAgentActivityEvent]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ClusterAgentActivityEventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ClusterAgentActivityEvent
}

"""
The connection type for ClusterAgent.
"""
type ClusterAgentConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [ClusterAgentEdge]

  """
  A list of nodes.
  """
  nodes: [ClusterAgent]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of ClusterAgentDelete
"""
input ClusterAgentDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the cluster agent that will be deleted.
  """
  id: ClustersAgentID!
}

"""
Autogenerated return type of ClusterAgentDelete
"""
type ClusterAgentDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
An edge in a connection.
"""
type ClusterAgentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ClusterAgent
}

type ClusterAgentToken {
  """
  Cluster agent this token is associated with.
  """
  clusterAgent: ClusterAgent

  """
  Timestamp the token was created.
  """
  createdAt: Time

  """
  User who created the token.
  """
  createdByUser: UserCore

  """
  Description of the token.
  """
  description: String

  """
  Global ID of the token.
  """
  id: ClustersAgentTokenID!

  """
  Timestamp the token was last used.
  """
  lastUsedAt: Time

  """
  Name given to the token.
  """
  name: String

  """
  Current status of the token.
  """
  status: AgentTokenStatus
}

"""
The connection type for ClusterAgentToken.
"""
type ClusterAgentTokenConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [ClusterAgentTokenEdge]

  """
  A list of nodes.
  """
  nodes: [ClusterAgentToken]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of ClusterAgentTokenCreate
"""
input ClusterAgentTokenCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the cluster agent that will be associated with the new token.
  """
  clusterAgentId: ClustersAgentID!

  """
  Description of the token.
  """
  description: String

  """
  Name of the token.
  """
  name: String!
}

"""
Autogenerated return type of ClusterAgentTokenCreate
"""
type ClusterAgentTokenCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Token secret value. Make sure you save it - you won't be able to access it again.
  """
  secret: String

  """
  Token created after mutation.
  """
  token: ClusterAgentToken
}

"""
An edge in a connection.
"""
type ClusterAgentTokenEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ClusterAgentToken
}

"""
Autogenerated input type of ClusterAgentTokenRevoke
"""
input ClusterAgentTokenRevokeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the agent token that will be revoked.
  """
  id: ClustersAgentTokenID!
}

"""
Autogenerated return type of ClusterAgentTokenRevoke
"""
type ClusterAgentTokenRevokePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
A `ClustersAgentID` is a global ID. It is encoded as a string.

An example `ClustersAgentID` is: `"gid://gitlab/Clusters::Agent/1"`.
"""
scalar ClustersAgentID

"""
A `ClustersAgentTokenID` is a global ID. It is encoded as a string.

An example `ClustersAgentTokenID` is: `"gid://gitlab/Clusters::AgentToken/1"`.
"""
scalar ClustersAgentTokenID

"""
A `ClustersClusterID` is a global ID. It is encoded as a string.

An example `ClustersClusterID` is: `"gid://gitlab/Clusters::Cluster/1"`.
"""
scalar ClustersClusterID

"""
Color represented as a hex code or named color.

For example: "#fefefe".
"""
scalar Color

type Commit implements Todoable {
  """
  Author of the commit.
  """
  author: UserCore

  """
  Commit author's email.
  """
  authorEmail: String

  """
  Commit authors gravatar.
  """
  authorGravatar: String

  """
  Commit authors name.
  """
  authorName: String

  """
  Timestamp of when the commit was authored.
  """
  authoredDate: Time

  """
  Description of the commit message.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Full title of the commit message.
  """
  fullTitle: String

  """
  The GitLab Flavored Markdown rendering of `full_title`
  """
  fullTitleHtml: String

  """
  ID (global ID) of the commit.
  """
  id: ID!

  """
  Raw commit message.
  """
  message: String

  """
  Pipelines of the commit ordered latest first.
  """
  pipelines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter pipelines by the ref they are run for.
    """
    ref: String

    """
    Filter pipelines by scope.
    """
    scope: PipelineScopeEnum

    """
    Filter pipelines by the sha of the commit they are run for.
    """
    sha: String

    """
    Filter pipelines by their source.
    """
    source: String

    """
    Filter pipelines by their status.
    """
    status: PipelineStatusEnum

    """
    Pipelines updated after this date.
    """
    updatedAfter: Time

    """
    Pipelines updated before this date.
    """
    updatedBefore: Time

    """
    Filter pipelines by the user that triggered the pipeline.
    """
    username: String
  ): PipelineConnection

  """
  SHA1 ID of the commit.
  """
  sha: String!

  """
  Short SHA1 ID of the commit.
  """
  shortId: String!

  """
  Rendered HTML of the commit signature.
  """
  signatureHtml: String

  """
  Title of the commit message.
  """
  title: String

  """
  The GitLab Flavored Markdown rendering of `title`
  """
  titleHtml: String

  """
  Web path of the commit.
  """
  webPath: String!

  """
  Web URL of the commit.
  """
  webUrl: String!
}

input CommitAction {
  """
  Action to perform: create, delete, move, update, or chmod.
  """
  action: CommitActionMode!

  """
  Content of the file.
  """
  content: String

  """
  Encoding of the file. Default is text.
  """
  encoding: CommitEncoding

  """
  Enables/disables the execute flag on the file.
  """
  executeFilemode: Boolean

  """
  Full path to the file.
  """
  filePath: String!

  """
  Last known file commit ID.
  """
  lastCommitId: String

  """
  Original full path to the file being moved.
  """
  previousPath: String
}

"""
Mode of a commit action
"""
enum CommitActionMode {
  """
  Chmod command.
  """
  CHMOD

  """
  Create command.
  """
  CREATE

  """
  Delete command.
  """
  DELETE

  """
  Move command.
  """
  MOVE

  """
  Update command.
  """
  UPDATE
}

"""
The connection type for Commit.
"""
type CommitConnection {
  """
  A list of edges.
  """
  edges: [CommitEdge]

  """
  A list of nodes.
  """
  nodes: [Commit]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of CommitCreate
"""
input CommitCreateInput {
  """
  Array of action hashes to commit as a batch.
  """
  actions: [CommitAction!]!

  """
  Name of the branch to commit into, it can be a new branch.
  """
  branch: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Raw commit message.
  """
  message: String!

  """
  Project full path the branch is associated with.
  """
  projectPath: ID!

  """
  If on a new branch, name of the original branch.
  """
  startBranch: String
}

"""
Autogenerated return type of CommitCreate
"""
type CommitCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Commit after mutation.
  """
  commit: Commit

  """
  ETag path for the commit's pipeline.
  """
  commitPipelinePath: String

  """
  Contents of the commit.
  """
  content: [String!]

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
An edge in a connection.
"""
type CommitEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Commit
}

enum CommitEncoding {
  """
  Base64 encoding.
  """
  BASE64

  """
  Text encoding.
  """
  TEXT
}

"""
Composer metadata
"""
type ComposerMetadata {
  """
  Data of the Composer JSON file.
  """
  composerJson: PackageComposerJsonType!

  """
  Target SHA of the package.
  """
  targetSha: String!
}

"""
Conan file metadata
"""
type ConanFileMetadata implements PackageFileMetadata {
  """
  Type of the Conan file.
  """
  conanFileType: ConanMetadatumFileTypeEnum!

  """
  Reference of the Conan package.
  """
  conanPackageReference: String

  """
  Date of creation.
  """
  createdAt: Time!

  """
  ID of the metadatum.
  """
  id: PackagesConanFileMetadatumID!

  """
  Revision of the package.
  """
  packageRevision: String

  """
  Revision of the Conan recipe.
  """
  recipeRevision: String!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
Conan metadata
"""
type ConanMetadata {
  """
  Date of creation.
  """
  createdAt: Time!

  """
  ID of the metadatum.
  """
  id: PackagesConanMetadatumID!

  """
  Channel of the Conan package.
  """
  packageChannel: String!

  """
  Username of the Conan package.
  """
  packageUsername: String!

  """
  Recipe of the Conan package.
  """
  recipe: String!

  """
  Recipe path of the Conan package.
  """
  recipePath: String!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
Conan file types
"""
enum ConanMetadatumFileTypeEnum {
  """
  A package file type.
  """
  PACKAGE_FILE

  """
  A recipe file type.
  """
  RECIPE_FILE
}

"""
Autogenerated input type of ConfigureSastIac
"""
input ConfigureSastIacInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project.
  """
  projectPath: ID!
}

"""
Autogenerated return type of ConfigureSastIac
"""
type ConfigureSastIacPayload {
  """
  Branch that has the new/modified `.gitlab-ci.yml` file.
  """
  branch: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Redirect path to use when the response is successful.
  """
  successPath: String
}

"""
Autogenerated input type of ConfigureSast
"""
input ConfigureSastInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  SAST CI configuration for the project.
  """
  configuration: SastCiConfigurationInput!

  """
  Full path of the project.
  """
  projectPath: ID!
}

"""
Autogenerated return type of ConfigureSast
"""
type ConfigureSastPayload {
  """
  Branch that has the new/modified `.gitlab-ci.yml` file.
  """
  branch: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Redirect path to use when the response is successful.
  """
  successPath: String
}

"""
Autogenerated input type of ConfigureSecretDetection
"""
input ConfigureSecretDetectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project.
  """
  projectPath: ID!
}

"""
Autogenerated return type of ConfigureSecretDetection
"""
type ConfigureSecretDetectionPayload {
  """
  Branch that has the new/modified `.gitlab-ci.yml` file.
  """
  branch: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Redirect path to use when the response is successful.
  """
  successPath: String
}

"""
Connection details for an Agent
"""
type ConnectedAgent {
  """
  When the connection was established.
  """
  connectedAt: Time

  """
  ID of the connection.
  """
  connectionId: BigInt

  """
  Information about the Agent.
  """
  metadata: AgentMetadata
}

"""
The connection type for ConnectedAgent.
"""
type ConnectedAgentConnection {
  """
  A list of edges.
  """
  edges: [ConnectedAgentEdge]

  """
  A list of nodes.
  """
  nodes: [ConnectedAgent]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ConnectedAgentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ConnectedAgent
}

"""
A tag expiration policy designed to keep only the images that matter most
"""
type ContainerExpirationPolicy {
  """
  This container expiration policy schedule.
  """
  cadence: ContainerExpirationPolicyCadenceEnum!

  """
  Timestamp of when the container expiration policy was created.
  """
  createdAt: Time!

  """
  Indicates whether this container expiration policy is enabled.
  """
  enabled: Boolean!

  """
  Number of tags to retain.
  """
  keepN: ContainerExpirationPolicyKeepEnum

  """
  Tags with names matching this regex pattern will expire.
  """
  nameRegex: UntrustedRegexp

  """
  Tags with names matching this regex pattern will be preserved.
  """
  nameRegexKeep: UntrustedRegexp

  """
  Next time that this container expiration policy will get executed.
  """
  nextRunAt: Time

  """
  Tags older that this will expire.
  """
  olderThan: ContainerExpirationPolicyOlderThanEnum

  """
  Timestamp of when the container expiration policy was updated.
  """
  updatedAt: Time!
}

enum ContainerExpirationPolicyCadenceEnum {
  """
  Every day
  """
  EVERY_DAY

  """
  Every month
  """
  EVERY_MONTH

  """
  Every three months
  """
  EVERY_THREE_MONTHS

  """
  Every two weeks
  """
  EVERY_TWO_WEEKS

  """
  Every week
  """
  EVERY_WEEK
}

enum ContainerExpirationPolicyKeepEnum {
  """
  50 tags per image name
  """
  FIFTY_TAGS

  """
  5 tags per image name
  """
  FIVE_TAGS

  """
  100 tags per image name
  """
  ONE_HUNDRED_TAGS

  """
  1 tag per image name
  """
  ONE_TAG

  """
  10 tags per image name
  """
  TEN_TAGS

  """
  25 tags per image name
  """
  TWENTY_FIVE_TAGS
}

enum ContainerExpirationPolicyOlderThanEnum {
  """
  14 days until tags are automatically removed
  """
  FOURTEEN_DAYS

  """
  90 days until tags are automatically removed
  """
  NINETY_DAYS

  """
  7 days until tags are automatically removed
  """
  SEVEN_DAYS

  """
  60 days until tags are automatically removed
  """
  SIXTY_DAYS

  """
  30 days until tags are automatically removed
  """
  THIRTY_DAYS
}

"""
A container repository
"""
type ContainerRepository {
  """
  Can the current user delete the container repository.
  """
  canDelete: Boolean!

  """
  Timestamp when the container repository was created.
  """
  createdAt: Time!

  """
  Tags cleanup status for the container repository.
  """
  expirationPolicyCleanupStatus: ContainerRepositoryCleanupStatus

  """
  Timestamp when the cleanup done by the expiration policy was started on the container repository.
  """
  expirationPolicyStartedAt: Time

  """
  ID of the container repository.
  """
  id: ID!

  """
  Number of deleted tags from the last cleanup.
  """
  lastCleanupDeletedTagsCount: Int

  """
  URL of the container repository.
  """
  location: String!

  """
  Migration state of the container repository.
  """
  migrationState: String!

  """
  Name of the container repository.
  """
  name: String!

  """
  Path of the container repository.
  """
  path: String!

  """
  Project of the container registry.
  """
  project: Project!

  """
  Status of the container repository.
  """
  status: ContainerRepositoryStatus

  """
  Number of tags associated with this image.
  """
  tagsCount: Int!

  """
  Timestamp when the container repository was updated.
  """
  updatedAt: Time!
}

"""
Status of the tags cleanup of a container repository
"""
enum ContainerRepositoryCleanupStatus {
  """
  Tags cleanup is ongoing.
  """
  ONGOING

  """
  Tags cleanup is scheduled and is going to be executed shortly.
  """
  SCHEDULED

  """
  Tags cleanup has been partially executed. There are still remaining tags to delete.
  """
  UNFINISHED

  """
  Tags cleanup is not scheduled. This is the default state.
  """
  UNSCHEDULED
}

"""
The connection type for ContainerRepository.
"""
type ContainerRepositoryConnection {
  """
  A list of edges.
  """
  edges: [ContainerRepositoryEdge]

  """
  A list of nodes.
  """
  nodes: [ContainerRepository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Details of a container repository
"""
type ContainerRepositoryDetails {
  """
  Can the current user delete the container repository.
  """
  canDelete: Boolean!

  """
  Timestamp when the container repository was created.
  """
  createdAt: Time!

  """
  Tags cleanup status for the container repository.
  """
  expirationPolicyCleanupStatus: ContainerRepositoryCleanupStatus

  """
  Timestamp when the cleanup done by the expiration policy was started on the container repository.
  """
  expirationPolicyStartedAt: Time

  """
  ID of the container repository.
  """
  id: ID!

  """
  Number of deleted tags from the last cleanup.
  """
  lastCleanupDeletedTagsCount: Int

  """
  URL of the container repository.
  """
  location: String!

  """
  Migration state of the container repository.
  """
  migrationState: String!

  """
  Name of the container repository.
  """
  name: String!

  """
  Path of the container repository.
  """
  path: String!

  """
  Project of the container registry.
  """
  project: Project!

  """
  Deduplicated size of the image repository in bytes. This is only available on
  GitLab.com for repositories created after `2021-11-04`.
  """
  size: Float

  """
  Status of the container repository.
  """
  status: ContainerRepositoryStatus

  """
  Tags of the container repository.
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search by tag name.
    """
    name: String = null

    """
    Sort tags by these criteria.
    """
    sort: ContainerRepositoryTagSort = null
  ): ContainerRepositoryTagConnection

  """
  Number of tags associated with this image.
  """
  tagsCount: Int!

  """
  Timestamp when the container repository was updated.
  """
  updatedAt: Time!
}

"""
An edge in a connection.
"""
type ContainerRepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ContainerRepository
}

"""
A `ContainerRepositoryID` is a global ID. It is encoded as a string.

An example `ContainerRepositoryID` is: `"gid://gitlab/ContainerRepository/1"`.
"""
scalar ContainerRepositoryID

"""
Values for sorting container repositories
"""
enum ContainerRepositorySort {
  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Name by ascending order.
  """
  NAME_ASC

  """
  Name by descending order.
  """
  NAME_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Created at ascending order.
  """
  created_asc @deprecated(reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5.")

  """
  Created at descending order.
  """
  created_desc @deprecated(reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5.")

  """
  Updated at ascending order.
  """
  updated_asc @deprecated(reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5.")

  """
  Updated at descending order.
  """
  updated_desc @deprecated(reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5.")
}

"""
Status of a container repository
"""
enum ContainerRepositoryStatus {
  """
  Delete Failed status.
  """
  DELETE_FAILED

  """
  Delete Scheduled status.
  """
  DELETE_SCHEDULED
}

"""
A tag from a container repository
"""
type ContainerRepositoryTag {
  """
  Can the current user delete this tag.
  """
  canDelete: Boolean!

  """
  Timestamp when the tag was created.
  """
  createdAt: Time

  """
  Digest of the tag.
  """
  digest: String

  """
  URL of the tag.
  """
  location: String!

  """
  Name of the tag.
  """
  name: String!

  """
  Path of the tag.
  """
  path: String!

  """
  Revision of the tag.
  """
  revision: String

  """
  Short revision of the tag.
  """
  shortRevision: String

  """
  Size of the tag.
  """
  totalSize: BigInt
}

"""
The connection type for ContainerRepositoryTag.
"""
type ContainerRepositoryTagConnection {
  """
  A list of edges.
  """
  edges: [ContainerRepositoryTagEdge]

  """
  A list of nodes.
  """
  nodes: [ContainerRepositoryTag]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ContainerRepositoryTagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ContainerRepositoryTag
}

"""
Values for sorting tags
"""
enum ContainerRepositoryTagSort {
  """
  Ordered by name in ascending order.
  """
  NAME_ASC

  """
  Ordered by name in descending order.
  """
  NAME_DESC
}

"""
Autogenerated input type of CreateAlertIssue
"""
input CreateAlertIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the alert to mutate.
  """
  iid: String!

  """
  Project the alert to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of CreateAlertIssue
"""
type CreateAlertIssuePayload {
  """
  Alert after mutation.
  """
  alert: AlertManagementAlert

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue created after mutation.
  """
  issue: Issue

  """
  To-do item after mutation.
  """
  todo: Todo
}

"""
Autogenerated input type of CreateAnnotation
"""
input CreateAnnotationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the cluster to add an annotation to.
  """
  clusterId: ClustersClusterID

  """
  Path to a file defining the dashboard on which the annotation should be added.
  """
  dashboardPath: String!

  """
  Description of the annotation.
  """
  description: String!

  """
  Timestamp indicating ending moment to which the annotation relates.
  """
  endingAt: Time

  """
  Global ID of the environment to add an annotation to.
  """
  environmentId: EnvironmentID

  """
  Timestamp indicating starting moment to which the annotation relates.
  """
  startingAt: Time!
}

"""
Autogenerated return type of CreateAnnotation
"""
type CreateAnnotationPayload {
  """
  Created annotation.
  """
  annotation: MetricsDashboardAnnotation

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateBoard
"""
input CreateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the group with which the resource is associated.
  """
  groupPath: ID

  """
  Whether or not backlog list is hidden.
  """
  hideBacklogList: Boolean

  """
  Whether or not closed list is hidden.
  """
  hideClosedList: Boolean

  """
  Board name.
  """
  name: String

  """
  Full path of the project with which the resource is associated.
  """
  projectPath: ID
}

"""
Autogenerated return type of CreateBoard
"""
type CreateBoardPayload {
  """
  Board after mutation.
  """
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateBranch
"""
input CreateBranchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Name of the branch.
  """
  name: String!

  """
  Project full path the branch is associated with.
  """
  projectPath: ID!

  """
  Branch name or commit SHA to create branch from.
  """
  ref: String!
}

"""
Autogenerated return type of CreateBranch
"""
type CreateBranchPayload {
  """
  Branch after mutation.
  """
  branch: Branch

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateClusterAgent
"""
input CreateClusterAgentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Name of the cluster agent.
  """
  name: String!

  """
  Full path of the associated project for this cluster agent.
  """
  projectPath: ID!
}

"""
Autogenerated return type of CreateClusterAgent
"""
type CreateClusterAgentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Cluster agent created after mutation.
  """
  clusterAgent: ClusterAgent

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateCustomEmoji
"""
input CreateCustomEmojiInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Namespace full path the emoji is associated with.
  """
  groupPath: ID!

  """
  Name of the emoji.
  """
  name: String!

  """
  Location of the emoji file.
  """
  url: String!
}

"""
Autogenerated return type of CreateCustomEmoji
"""
type CreateCustomEmojiPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  New custom emoji.
  """
  customEmoji: CustomEmoji

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateDiffNote
"""
input CreateDiffNoteInput {
  """
  Content of the note.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Confidentiality flag of a note. Default is false.
  """
  confidential: Boolean

  """
  Global ID of the resource to add a note to.
  """
  noteableId: NoteableID!

  """
  Position of this note on a diff.
  """
  position: DiffPositionInput!
}

"""
Autogenerated return type of CreateDiffNote
"""
type CreateDiffNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of CreateImageDiffNote
"""
input CreateImageDiffNoteInput {
  """
  Content of the note.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Confidentiality flag of a note. Default is false.
  """
  confidential: Boolean

  """
  Global ID of the resource to add a note to.
  """
  noteableId: NoteableID!

  """
  Position of this note on a diff.
  """
  position: DiffImagePositionInput!
}

"""
Autogenerated return type of CreateImageDiffNote
"""
type CreateImageDiffNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  """
  Array of user IDs to assign to the issue.
  """
  assigneeIds: [UserID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates the issue is confidential.
  """
  confidential: Boolean

  """
  Timestamp when the issue was created. Available only for admins and project owners.
  """
  createdAt: Time

  """
  Description of the issue.
  """
  description: String

  """
  ID of a discussion to resolve. Also pass `merge_request_to_resolve_discussions_of`.
  """
  discussionToResolve: String

  """
  Due date of the issue.
  """
  dueDate: ISO8601Date

  """
  IID (internal ID) of a project issue. Only admins and project owners can modify.
  """
  iid: Int

  """
  IDs of labels to be added to the issue.
  """
  labelIds: [LabelID!]

  """
  Labels of the issue.
  """
  labels: [String!]

  """
  Indicates discussion is locked on the issue.
  """
  locked: Boolean

  """
  IID of a merge request for which to resolve discussions.
  """
  mergeRequestToResolveDiscussionsOf: MergeRequestID

  """
  ID of the milestone to assign to the issue. On update milestone will be removed if set to null.
  """
  milestoneId: MilestoneID

  """
  Global ID of issue that should be placed after the current issue.
  """
  moveAfterId: IssueID

  """
  Global ID of issue that should be placed before the current issue.
  """
  moveBeforeId: IssueID

  """
  Project full path the issue is associated with.
  """
  projectPath: ID!

  """
  Title of the issue.
  """
  title: String!

  """
  Type of the issue.
  """
  type: IssueType
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of CreateNote
"""
input CreateNoteInput {
  """
  Content of the note.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Confidentiality flag of a note. Default is false.
  """
  confidential: Boolean

  """
  Global ID of the discussion this note is in reply to.
  """
  discussionId: DiscussionID

  """
  SHA of the head commit which is used to ensure that the merge request has not been updated since the request was sent.
  """
  mergeRequestDiffHeadSha: String

  """
  Global ID of the resource to add a note to.
  """
  noteableId: NoteableID!
}

"""
Autogenerated return type of CreateNote
"""
type CreateNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of CreateSnippet
"""
input CreateSnippetInput {
  """
  Actions to perform over the snippet repository and blobs.
  """
  blobActions: [SnippetBlobActionInputType!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of the snippet.
  """
  description: String

  """
  Full path of the project the snippet is associated with.
  """
  projectPath: ID

  """
  Title of the snippet.
  """
  title: String!

  """
  Paths to files uploaded in the snippet description.
  """
  uploadedFiles: [String!]

  """
  Visibility level of the snippet.
  """
  visibilityLevel: VisibilityLevelsEnum!
}

"""
Autogenerated return type of CreateSnippet
"""
type CreateSnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

interface CurrentUserTodos {
  """
  To-do items for the current user.
  """
  currentUserTodos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    State of the to-do items.
    """
    state: TodoStateEnum
  ): TodoConnection!
}

"""
A custom emoji uploaded by user
"""
type CustomEmoji {
  """
  Whether the emoji is an external link.
  """
  external: Boolean!

  """
  ID of the emoji.
  """
  id: CustomEmojiID!

  """
  Name of the emoji.
  """
  name: String!

  """
  Link to file of the emoji.
  """
  url: String!
}

"""
The connection type for CustomEmoji.
"""
type CustomEmojiConnection {
  """
  A list of edges.
  """
  edges: [CustomEmojiEdge]

  """
  A list of nodes.
  """
  nodes: [CustomEmoji]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CustomEmojiEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CustomEmoji
}

"""
A `CustomEmojiID` is a global ID. It is encoded as a string.

An example `CustomEmojiID` is: `"gid://gitlab/CustomEmoji/1"`.
"""
scalar CustomEmojiID

type CustomerRelationsContact {
  """
  State of the contact.
  """
  active: Boolean!

  """
  Timestamp the contact was created.
  """
  createdAt: Time!

  """
  Description of or notes for the contact.
  """
  description: String

  """
  Email address of the contact.
  """
  email: String

  """
  First name of the contact.
  """
  firstName: String!

  """
  Internal ID of the contact.
  """
  id: ID!

  """
  Last name of the contact.
  """
  lastName: String!

  """
  Organization of the contact.
  """
  organization: CustomerRelationsOrganization

  """
  Phone number of the contact.
  """
  phone: String

  """
  Timestamp the contact was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for CustomerRelationsContact.
"""
type CustomerRelationsContactConnection {
  """
  A list of edges.
  """
  edges: [CustomerRelationsContactEdge]

  """
  A list of nodes.
  """
  nodes: [CustomerRelationsContact]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of CustomerRelationsContactCreate
"""
input CustomerRelationsContactCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of or notes for the contact.
  """
  description: String

  """
  Email address of the contact.
  """
  email: String

  """
  First name of the contact.
  """
  firstName: String!

  """
  Group for the contact.
  """
  groupId: GroupID!

  """
  Last name of the contact.
  """
  lastName: String!

  """
  Organization for the contact.
  """
  organizationId: CustomerRelationsOrganizationID

  """
  Phone number of the contact.
  """
  phone: String
}

"""
Autogenerated return type of CustomerRelationsContactCreate
"""
type CustomerRelationsContactCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Contact after the mutation.
  """
  contact: CustomerRelationsContact

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
An edge in a connection.
"""
type CustomerRelationsContactEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CustomerRelationsContact
}

"""
A `CustomerRelationsContactID` is a global ID. It is encoded as a string.

An example `CustomerRelationsContactID` is: `"gid://gitlab/CustomerRelations::Contact/1"`.
"""
scalar CustomerRelationsContactID

enum CustomerRelationsContactState {
  """
  Active contact.
  """
  active

  """
  Inactive contact.
  """
  inactive
}

"""
Autogenerated input type of CustomerRelationsContactUpdate
"""
input CustomerRelationsContactUpdateInput {
  """
  State of the contact.
  """
  active: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of or notes for the contact.
  """
  description: String

  """
  Email address of the contact.
  """
  email: String

  """
  First name of the contact.
  """
  firstName: String

  """
  Global ID of the contact.
  """
  id: CustomerRelationsContactID!

  """
  Last name of the contact.
  """
  lastName: String

  """
  Organization of the contact.
  """
  organizationId: CustomerRelationsOrganizationID

  """
  Phone number of the contact.
  """
  phone: String
}

"""
Autogenerated return type of CustomerRelationsContactUpdate
"""
type CustomerRelationsContactUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Contact after the mutation.
  """
  contact: CustomerRelationsContact

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type CustomerRelationsOrganization {
  """
  State of the organization.
  """
  active: Boolean!

  """
  Timestamp the organization was created.
  """
  createdAt: Time!

  """
  Standard billing rate for the organization.
  """
  defaultRate: Float

  """
  Description of or notes for the organization.
  """
  description: String

  """
  Internal ID of the organization.
  """
  id: ID!

  """
  Name of the organization.
  """
  name: String!

  """
  Timestamp the organization was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for CustomerRelationsOrganization.
"""
type CustomerRelationsOrganizationConnection {
  """
  A list of edges.
  """
  edges: [CustomerRelationsOrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [CustomerRelationsOrganization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of CustomerRelationsOrganizationCreate
"""
input CustomerRelationsOrganizationCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Standard billing rate for the organization.
  """
  defaultRate: Float

  """
  Description of or notes for the organization.
  """
  description: String

  """
  Group for the organization.
  """
  groupId: GroupID!

  """
  Name of the organization.
  """
  name: String!
}

"""
Autogenerated return type of CustomerRelationsOrganizationCreate
"""
type CustomerRelationsOrganizationCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Organization after the mutation.
  """
  organization: CustomerRelationsOrganization
}

"""
An edge in a connection.
"""
type CustomerRelationsOrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CustomerRelationsOrganization
}

"""
A `CustomerRelationsOrganizationID` is a global ID. It is encoded as a string.

An example `CustomerRelationsOrganizationID` is: `"gid://gitlab/CustomerRelations::Organization/1"`.
"""
scalar CustomerRelationsOrganizationID

enum CustomerRelationsOrganizationState {
  """
  Active organization.
  """
  active

  """
  Inactive organization.
  """
  inactive
}

"""
Autogenerated input type of CustomerRelationsOrganizationUpdate
"""
input CustomerRelationsOrganizationUpdateInput {
  """
  State of the organization.
  """
  active: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Standard billing rate for the organization.
  """
  defaultRate: Float

  """
  Description of or notes for the organization.
  """
  description: String

  """
  Global ID of the organization.
  """
  id: CustomerRelationsOrganizationID!

  """
  Name of the organization.
  """
  name: String
}

"""
Autogenerated return type of CustomerRelationsOrganizationUpdate
"""
type CustomerRelationsOrganizationUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Organization after the mutation.
  """
  organization: CustomerRelationsOrganization!
}

"""
Date represented in ISO 8601
"""
scalar Date

"""
Autogenerated input type of DeleteAnnotation
"""
input DeleteAnnotationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the annotation to delete.
  """
  id: MetricsDashboardAnnotationID!
}

"""
Autogenerated return type of DeleteAnnotation
"""
type DeleteAnnotationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
The response from the AdminSidekiqQueuesDeleteJobs mutation
"""
type DeleteJobsResponse {
  """
  Whether or not the entire queue was processed in time; if not, retrying the same request is safe.
  """
  completed: Boolean

  """
  Number of matching jobs deleted.
  """
  deletedJobs: Int

  """
  Queue size after processing.
  """
  queueSize: Int
}

"""
Represents metadata associated with a dependency link
"""
union DependencyLinkMetadata = NugetDependencyLinkMetadata

"""
Dependency proxy blob
"""
type DependencyProxyBlob {
  """
  Date of creation.
  """
  createdAt: Time!

  """
  Name of the blob.
  """
  fileName: String!

  """
  Size of the blob file.
  """
  size: String!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
The connection type for DependencyProxyBlob.
"""
type DependencyProxyBlobConnection {
  """
  A list of edges.
  """
  edges: [DependencyProxyBlobEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyProxyBlob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DependencyProxyBlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyProxyBlob
}

"""
Group-level Dependency Proxy TTL policy settings
"""
type DependencyProxyImageTtlGroupPolicy {
  """
  Timestamp of creation.
  """
  createdAt: Time

  """
  Indicates whether the policy is enabled or disabled.
  """
  enabled: Boolean!

  """
  Number of days to retain a cached image file.
  """
  ttl: Int

  """
  Timestamp of the most recent update.
  """
  updatedAt: Time
}

"""
Dependency proxy manifest
"""
type DependencyProxyManifest {
  """
  Date of creation.
  """
  createdAt: Time!

  """
  Digest of the manifest.
  """
  digest: String!

  """
  Name of the manifest.
  """
  fileName: String!

  """
  ID of the manifest.
  """
  id: DependencyProxyManifestID!

  """
  Name of the image.
  """
  imageName: String!

  """
  Size of the manifest file.
  """
  size: String!

  """
  Status of the manifest (default, pending_destruction, processing, error)
  """
  status: DependencyProxyManifestStatus!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
The connection type for DependencyProxyManifest.
"""
type DependencyProxyManifestConnection {
  """
  A list of edges.
  """
  edges: [DependencyProxyManifestEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyProxyManifest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DependencyProxyManifestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyProxyManifest
}

"""
A `DependencyProxyManifestID` is a global ID. It is encoded as a string.

An example `DependencyProxyManifestID` is: `"gid://gitlab/DependencyProxy::Manifest/1"`.
"""
scalar DependencyProxyManifestID

enum DependencyProxyManifestStatus {
  """
  Dependency proxy manifest has a status of default.
  """
  DEFAULT

  """
  Dependency proxy manifest has a status of error.
  """
  ERROR

  """
  Dependency proxy manifest has a status of pending_destruction.
  """
  PENDING_DESTRUCTION

  """
  Dependency proxy manifest has a status of processing.
  """
  PROCESSING
}

"""
Group-level Dependency Proxy settings
"""
type DependencyProxySetting {
  """
  Indicates whether the dependency proxy is enabled for the group.
  """
  enabled: Boolean!
}

"""
A single design
"""
type Design implements CurrentUserTodos & DesignFields & NoteableInterface & Todoable {
  """
  To-do items for the current user.
  """
  currentUserTodos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    State of the to-do items.
    """
    state: TodoStateEnum
  ): TodoConnection!

  """
  Diff refs for this design.
  """
  diffRefs: DiffRefs!

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  How this design was changed in the current version.
  """
  event: DesignVersionEvent!

  """
  Filename of the design.
  """
  filename: String!

  """
  Full path to the design file.
  """
  fullPath: String!

  """
  ID of this design.
  """
  id: ID!

  """
  URL of the full-sized image.
  """
  image: String!

  """
  The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
  """
  imageV432x230: String

  """
  Issue the design belongs to.
  """
  issue: Issue!

  """
  All notes on this noteable.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  Total count of user-created notes for this design.
  """
  notesCount: Int!

  """
  Project the design belongs to.
  """
  project: Project!

  """
  All versions related to this design ordered newest first.
  """
  versions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Global ID of the most recent acceptable version.
    """
    earlierOrEqualToId: DesignManagementVersionID

    """
    SHA256 of the most recent acceptable version.
    """
    earlierOrEqualToSha: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DesignVersionConnection!

  """
  URL of the design.
  """
  webUrl: String!
}

"""
A design pinned to a specific version. The image field reflects the design as of the associated version
"""
type DesignAtVersion implements DesignFields {
  """
  Underlying design.
  """
  design: Design!

  """
  Diff refs for this design.
  """
  diffRefs: DiffRefs!

  """
  How this design was changed in the current version.
  """
  event: DesignVersionEvent!

  """
  Filename of the design.
  """
  filename: String!

  """
  Full path to the design file.
  """
  fullPath: String!

  """
  ID of this design.
  """
  id: ID!

  """
  URL of the full-sized image.
  """
  image: String!

  """
  The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
  """
  imageV432x230: String

  """
  Issue the design belongs to.
  """
  issue: Issue!

  """
  Total count of user-created notes for this design.
  """
  notesCount: Int!

  """
  Project the design belongs to.
  """
  project: Project!

  """
  Version this design-at-versions is pinned to.
  """
  version: DesignVersion!
}

"""
The connection type for DesignAtVersion.
"""
type DesignAtVersionConnection {
  """
  A list of edges.
  """
  edges: [DesignAtVersionEdge]

  """
  A list of nodes.
  """
  nodes: [DesignAtVersion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DesignAtVersionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DesignAtVersion
}

"""
A collection of designs
"""
type DesignCollection {
  """
  Copy state of the design collection.
  """
  copyState: DesignCollectionCopyState

  """
  Find a specific design.
  """
  design(
    """
    Find a design by its filename.
    """
    filename: String

    """
    Find a design by its ID.
    """
    id: DesignManagementDesignID
  ): Design

  """
  Find a design as of a version.
  """
  designAtVersion(
    """
    Global ID of the design at this version.
    """
    id: DesignManagementDesignAtVersionID!
  ): DesignAtVersion

  """
  All designs for the design collection.
  """
  designs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filters designs to only those that existed at the version. If argument is
    omitted or nil then all designs will reflect the latest version
    """
    atVersion: DesignManagementVersionID

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters designs by their filename.
    """
    filenames: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filters designs by their ID.
    """
    ids: [DesignManagementDesignID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DesignConnection!

  """
  Issue associated with the design collection.
  """
  issue: Issue!

  """
  Project associated with the design collection.
  """
  project: Project!

  """
  A specific version.
  """
  version(
    """
    Global ID of the version.
    """
    id: DesignManagementVersionID

    """
    SHA256 of a specific version.
    """
    sha: String
  ): DesignVersion

  """
  All versions related to all designs, ordered newest first.
  """
  versions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Global ID of the most recent acceptable version.
    """
    earlierOrEqualToId: DesignManagementVersionID

    """
    SHA256 of the most recent acceptable version.
    """
    earlierOrEqualToSha: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DesignVersionConnection!
}

"""
Copy state of a DesignCollection
"""
enum DesignCollectionCopyState {
  """
  The DesignCollection encountered an error during a copy
  """
  ERROR

  """
  The DesignCollection is being copied
  """
  IN_PROGRESS

  """
  The DesignCollection has no copy in progress
  """
  READY
}

"""
The connection type for Design.
"""
type DesignConnection {
  """
  A list of edges.
  """
  edges: [DesignEdge]

  """
  A list of nodes.
  """
  nodes: [Design]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DesignEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Design
}

interface DesignFields {
  """
  Diff refs for this design.
  """
  diffRefs: DiffRefs!

  """
  How this design was changed in the current version.
  """
  event: DesignVersionEvent!

  """
  Filename of the design.
  """
  filename: String!

  """
  Full path to the design file.
  """
  fullPath: String!

  """
  ID of this design.
  """
  id: ID!

  """
  URL of the full-sized image.
  """
  image: String!

  """
  The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
  """
  imageV432x230: String

  """
  Issue the design belongs to.
  """
  issue: Issue!

  """
  Total count of user-created notes for this design.
  """
  notesCount: Int!

  """
  Project the design belongs to.
  """
  project: Project!
}

type DesignManagement {
  """
  Find a design as of a version.
  """
  designAtVersion(
    """
    Global ID of the design at this version.
    """
    id: DesignManagementDesignAtVersionID!
  ): DesignAtVersion

  """
  Find a version.
  """
  version(
    """
    Global ID of the version.
    """
    id: DesignManagementVersionID!
  ): DesignVersion
}

"""
Autogenerated input type of DesignManagementDelete
"""
input DesignManagementDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Filenames of the designs to delete.
  """
  filenames: [String!]!

  """
  IID of the issue to modify designs for.
  """
  iid: ID!

  """
  Project where the issue is to upload designs for.
  """
  projectPath: ID!
}

"""
Autogenerated return type of DesignManagementDelete
"""
type DesignManagementDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  New version in which the designs are deleted.
  """
  version: DesignVersion
}

"""
A `DesignManagementDesignAtVersionID` is a global ID. It is encoded as a string.

An example `DesignManagementDesignAtVersionID` is: `"gid://gitlab/DesignManagement::DesignAtVersion/1"`.
"""
scalar DesignManagementDesignAtVersionID

"""
A `DesignManagementDesignID` is a global ID. It is encoded as a string.

An example `DesignManagementDesignID` is: `"gid://gitlab/DesignManagement::Design/1"`.
"""
scalar DesignManagementDesignID

"""
Autogenerated input type of DesignManagementMove
"""
input DesignManagementMoveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the design to move.
  """
  id: DesignManagementDesignID!

  """
  ID of the immediately following design.
  """
  next: DesignManagementDesignID

  """
  ID of the immediately preceding design.
  """
  previous: DesignManagementDesignID
}

"""
Autogenerated return type of DesignManagementMove
"""
type DesignManagementMovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Current state of the collection.
  """
  designCollection: DesignCollection

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DesignManagementUpload
"""
input DesignManagementUploadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Files to upload.
  """
  files: [Upload!]!

  """
  IID of the issue to modify designs for.
  """
  iid: ID!

  """
  Project where the issue is to upload designs for.
  """
  projectPath: ID!
}

"""
Autogenerated return type of DesignManagementUpload
"""
type DesignManagementUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Designs that were uploaded by the mutation.
  """
  designs: [Design!]!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Any designs that were skipped from the upload due to there being no change to their content since their last version
  """
  skippedDesigns: [Design!]!
}

"""
A `DesignManagementVersionID` is a global ID. It is encoded as a string.

An example `DesignManagementVersionID` is: `"gid://gitlab/DesignManagement::Version/1"`.
"""
scalar DesignManagementVersionID

"""
A specific version in which designs were added, modified or deleted
"""
type DesignVersion {
  """
  Author of the version.
  """
  author: UserCore!

  """
  Timestamp of when the version was created.
  """
  createdAt: Time!

  """
  A particular design as of this version, provided it is visible at this version.
  """
  designAtVersion(
    """
    ID of a specific design.
    """
    designId: DesignManagementDesignID

    """
    Filename of a specific design.
    """
    filename: String

    """
    ID of the DesignAtVersion.
    """
    id: DesignManagementDesignAtVersionID
  ): DesignAtVersion!

  """
  All designs that were changed in the version.
  """
  designs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DesignConnection!

  """
  All designs that are visible at this version, as of this version.
  """
  designsAtVersion(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters designs by their filename.
    """
    filenames: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filters designs by their ID.
    """
    ids: [DesignManagementDesignID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DesignAtVersionConnection!

  """
  ID of the design version.
  """
  id: ID!

  """
  SHA of the design version.
  """
  sha: ID!
}

"""
The connection type for DesignVersion.
"""
type DesignVersionConnection {
  """
  A list of edges.
  """
  edges: [DesignVersionEdge]

  """
  A list of nodes.
  """
  nodes: [DesignVersion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DesignVersionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DesignVersion
}

"""
Mutation event of a design within a version
"""
enum DesignVersionEvent {
  """
  A creation event
  """
  CREATION

  """
  A deletion event
  """
  DELETION

  """
  A modification event
  """
  MODIFICATION

  """
  No change.
  """
  NONE
}

"""
Autogenerated input type of DestroyBoard
"""
input DestroyBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the board to destroy.
  """
  id: BoardID!
}

"""
Autogenerated input type of DestroyBoardList
"""
input DestroyBoardListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the list to destroy. Only label lists are accepted.
  """
  listId: ListID!
}

"""
Autogenerated return type of DestroyBoardList
"""
type DestroyBoardListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  List after mutation.
  """
  list: BoardList
}

"""
Autogenerated return type of DestroyBoard
"""
type DestroyBoardPayload {
  """
  Board after mutation.
  """
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroyContainerRepository
"""
input DestroyContainerRepositoryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the container repository.
  """
  id: ContainerRepositoryID!
}

"""
Autogenerated return type of DestroyContainerRepository
"""
type DestroyContainerRepositoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Container repository policy after scheduling the deletion.
  """
  containerRepository: ContainerRepository!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroyContainerRepositoryTags
"""
input DestroyContainerRepositoryTagsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the container repository.
  """
  id: ContainerRepositoryID!

  """
  Container repository tag(s) to delete. Total number can't be greater than 20
  """
  tagNames: [String!]!
}

"""
Autogenerated return type of DestroyContainerRepositoryTags
"""
type DestroyContainerRepositoryTagsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Deleted container repository tags.
  """
  deletedTagNames: [String!]!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroyCustomEmoji
"""
input DestroyCustomEmojiInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the custom emoji to destroy.
  """
  id: CustomEmojiID!
}

"""
Autogenerated return type of DestroyCustomEmoji
"""
type DestroyCustomEmojiPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Deleted custom emoji.
  """
  customEmoji: CustomEmoji

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroyNote
"""
input DestroyNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the note to destroy.
  """
  id: NoteID!
}

"""
Autogenerated return type of DestroyNote
"""
type DestroyNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of DestroyPackageFile
"""
input DestroyPackageFileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the Package file.
  """
  id: PackagesPackageFileID!
}

"""
Autogenerated return type of DestroyPackageFile
"""
type DestroyPackageFilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroyPackageFiles
"""
input DestroyPackageFilesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of the Package file.
  """
  ids: [PackagesPackageFileID!]!

  """
  Project path where the packages cleanup policy is located.
  """
  projectPath: ID!
}

"""
Autogenerated return type of DestroyPackageFiles
"""
type DestroyPackageFilesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroyPackage
"""
input DestroyPackageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the Package.
  """
  id: PackagesPackageID!
}

"""
Autogenerated return type of DestroyPackage
"""
type DestroyPackagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroySnippet
"""
input DestroySnippetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the snippet to destroy.
  """
  id: SnippetID!
}

"""
Autogenerated return type of DestroySnippet
"""
type DestroySnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

type DetailedStatus {
  """
  Action information for the status. This includes method, button title, icon, path, and title.
  """
  action: StatusAction

  """
  Path of the details for the status.
  """
  detailsPath: String

  """
  Favicon of the status.
  """
  favicon: String

  """
  Group of the status.
  """
  group: String

  """
  Indicates if the status has further details.
  """
  hasDetails: Boolean

  """
  Icon of the status.
  """
  icon: String

  """
  ID for a detailed status.
  """
  id: String!

  """
  Label of the status.
  """
  label: String

  """
  Text of the status.
  """
  text: String

  """
  Tooltip associated with the status.
  """
  tooltip: String
}

input DiffImagePositionInput {
  """
  Merge base of the branch the comment was made on.
  """
  baseSha: String

  """
  SHA of the HEAD at the time the comment was made.
  """
  headSha: String!

  """
  Total height of the image.
  """
  height: Int!

  """
  The paths of the file that was changed. Both of the properties of this input
  are optional, but at least one of them is required
  """
  paths: DiffPathsInput!

  """
  SHA of the branch being compared against.
  """
  startSha: String!

  """
  Total width of the image.
  """
  width: Int!

  """
  X position of the note.
  """
  x: Int!

  """
  Y position of the note.
  """
  y: Int!
}

"""
A `DiffNoteID` is a global ID. It is encoded as a string.

An example `DiffNoteID` is: `"gid://gitlab/DiffNote/1"`.
"""
scalar DiffNoteID

input DiffPathsInput {
  """
  Path of the file on the HEAD SHA.
  """
  newPath: String

  """
  Path of the file on the start SHA.
  """
  oldPath: String
}

type DiffPosition {
  """
  Information about the branch, HEAD, and base at the time of commenting.
  """
  diffRefs: DiffRefs!

  """
  Path of the file that was changed.
  """
  filePath: String!

  """
  Total height of the image.
  """
  height: Int

  """
  Line on HEAD SHA that was changed.
  """
  newLine: Int

  """
  Path of the file on the HEAD SHA.
  """
  newPath: String

  """
  Line on start SHA that was changed.
  """
  oldLine: Int

  """
  Path of the file on the start SHA.
  """
  oldPath: String

  """
  Type of file the position refers to.
  """
  positionType: DiffPositionType!

  """
  Total width of the image.
  """
  width: Int

  """
  X position of the note.
  """
  x: Int

  """
  Y position of the note.
  """
  y: Int
}

input DiffPositionInput {
  """
  Merge base of the branch the comment was made on.
  """
  baseSha: String

  """
  SHA of the HEAD at the time the comment was made.
  """
  headSha: String!

  """
  Line on HEAD SHA that was changed. Please see the [REST API Documentation](https://docs.gitlab.com/ee/api/discussions.html#create-a-new-thread-in-the-merge-request-diff)
  for more information on how to use this field.
  """
  newLine: Int

  """
  Line on start SHA that was changed. Please see the [REST API Documentation](https://docs.gitlab.com/ee/api/discussions.html#create-a-new-thread-in-the-merge-request-diff)
  for more information on how to use this field.
  """
  oldLine: Int

  """
  The paths of the file that was changed. Both of the properties of this input
  are optional, but at least one of them is required
  """
  paths: DiffPathsInput!

  """
  SHA of the branch being compared against.
  """
  startSha: String!
}

"""
Type of file the position refers to
"""
enum DiffPositionType {
  """
  An image.
  """
  image

  """
  Text file.
  """
  text
}

type DiffRefs {
  """
  Merge base of the branch the comment was made on.
  """
  baseSha: String

  """
  SHA of the HEAD at the time the comment was made.
  """
  headSha: String!

  """
  SHA of the branch being compared against.
  """
  startSha: String!
}

"""
Changes to a single file
"""
type DiffStats {
  """
  Number of lines added to this file.
  """
  additions: Int!

  """
  Number of lines deleted from this file.
  """
  deletions: Int!

  """
  File path, relative to repository root.
  """
  path: String!
}

"""
Aggregated summary of changes
"""
type DiffStatsSummary {
  """
  Number of lines added.
  """
  additions: Int!

  """
  Number of lines changed.
  """
  changes: Int!

  """
  Number of lines deleted.
  """
  deletions: Int!

  """
  Number of files changed.
  """
  fileCount: Int!
}

type Discussion implements ResolvableInterface {
  """
  Timestamp of the discussion's creation.
  """
  createdAt: Time!

  """
  ID of this discussion.
  """
  id: DiscussionID!

  """
  Object which the discussion belongs to.
  """
  noteable: NoteableType

  """
  All notes in the discussion.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  ID used to reply to this discussion.
  """
  replyId: DiscussionID!

  """
  Indicates if the object can be resolved.
  """
  resolvable: Boolean!

  """
  Indicates if the object is resolved.
  """
  resolved: Boolean!

  """
  Timestamp of when the object was resolved.
  """
  resolvedAt: Time

  """
  User who resolved the object.
  """
  resolvedBy: UserCore
}

"""
The connection type for Discussion.
"""
type DiscussionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [Discussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Discussion
}

"""
A `DiscussionID` is a global ID. It is encoded as a string.

An example `DiscussionID` is: `"gid://gitlab/Discussion/1"`.
"""
scalar DiscussionID

"""
Autogenerated input type of DiscussionToggleResolve
"""
input DiscussionToggleResolveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the discussion.
  """
  id: DiscussionID!

  """
  Will resolve the discussion when true, and unresolve the discussion when false.
  """
  resolve: Boolean!
}

"""
Autogenerated return type of DiscussionToggleResolve
"""
type DiscussionToggleResolvePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Discussion after mutation.
  """
  discussion: Discussion

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Duration between two instants, represented as a fractional number of seconds.

For example: 12.3334
"""
scalar Duration

"""
Autogenerated input type of EchoCreate
"""
input EchoCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors to return to the user.
  """
  errors: [String!]

  """
  Messages to return to the user.
  """
  messages: [String!]
}

"""
Autogenerated return type of EchoCreate
"""
type EchoCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Messages returned to the user.
  """
  echoes: [String!]

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

interface Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Type of tree entry.
  """
  type: EntryType!
}

"""
Type of a tree entry
"""
enum EntryType {
  """
  File tree type.
  """
  blob

  """
  Commit tree type.
  """
  commit

  """
  Directory tree type.
  """
  tree
}

"""
Describes where code is deployed for a project
"""
type Environment {
  """
  ID of the environment.
  """
  id: ID!

  """
  Most severe open alert for the environment. If multiple alerts have equal severity, the most recent is returned.
  """
  latestOpenedMostSevereAlert: AlertManagementAlert

  """
  Metrics dashboard schema for the environment.
  """
  metricsDashboard(
    """
    Path to a file which defines a metrics dashboard eg: `"config/prometheus/common_metrics.yml"`.
    """
    path: String!
  ): MetricsDashboard

  """
  Human-readable name of the environment.
  """
  name: String!

  """
  Path to the environment.
  """
  path: String!

  """
  State of the environment, for example: available/stopped.
  """
  state: String!
}

"""
The connection type for Environment.
"""
type EnvironmentConnection {
  """
  A list of edges.
  """
  edges: [EnvironmentEdge]

  """
  A list of nodes.
  """
  nodes: [Environment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EnvironmentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Environment
}

"""
A `EnvironmentID` is a global ID. It is encoded as a string.

An example `EnvironmentID` is: `"gid://gitlab/Environment/1"`.
"""
scalar EnvironmentID

"""
Autogenerated input type of EnvironmentsCanaryIngressUpdate
"""
input EnvironmentsCanaryIngressUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the environment to update.
  """
  id: EnvironmentID!

  """
  Weight of the Canary Ingress.
  """
  weight: Int!
}

"""
Autogenerated return type of EnvironmentsCanaryIngressUpdate
"""
type EnvironmentsCanaryIngressUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type FileUpload {
  """
  Global ID of the upload.
  """
  id: UploadID!

  """
  Path of the upload.
  """
  path: String!

  """
  Size of the upload in bytes.
  """
  size: Int!
}

"""
A `GitlabErrorTrackingDetailedErrorID` is a global ID. It is encoded as a string.

An example `GitlabErrorTrackingDetailedErrorID` is: `"gid://gitlab/Gitlab::ErrorTracking::DetailedError/1"`.
"""
scalar GitlabErrorTrackingDetailedErrorID

"""
A global identifier.

A global identifier represents an object uniquely across the application.
An example of such an identifier is `"gid://gitlab/User/1"`.

Global identifiers are encoded as strings.
"""
scalar GlobalID

type GrafanaIntegration {
  """
  Timestamp of the issue's creation.
  """
  createdAt: Time!

  """
  Indicates whether Grafana integration is enabled.
  """
  enabled: Boolean!

  """
  URL for the Grafana host for the Grafana integration.
  """
  grafanaUrl: String!

  """
  Internal ID of the Grafana integration.
  """
  id: ID!

  """
  Timestamp of the issue's last activity.
  """
  updatedAt: Time!
}

type Group {
  """
  Indicates whether Auto DevOps is enabled for all projects within this group.
  """
  autoDevopsEnabled: Boolean

  """
  Avatar URL of the group.
  """
  avatarUrl: String

  """
  A single board of the group.
  """
  board(
    """
    ID of the board.
    """
    id: BoardID!
  ): Board

  """
  Boards of the group.
  """
  boards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Find a board by its ID.
    """
    id: BoardID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  List of the group's CI/CD variables.
  """
  ciVariables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiGroupVariableConnection

  """
  Find contacts of this group.
  """
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter contacts by IDs.
    """
    ids: [CustomerRelationsContactID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search term to find contacts with.
    """
    search: String

    """
    State of the contacts to search for.
    """
    state: CustomerRelationsContactState
  ): CustomerRelationsContactConnection

  """
  Container repositories of the group.
  """
  containerRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the container repositories by their name.
    """
    name: String

    """
    Sort container repositories by this criteria.
    """
    sort: ContainerRepositorySort = created_desc
  ): ContainerRepositoryConnection

  """
  Number of container repositories in the group.
  """
  containerRepositoriesCount: Int!

  """
  Indicates if the cross_project_pipeline feature is available for the namespace.
  """
  crossProjectPipelineAvailable: Boolean!

  """
  Custom emoji within this namespace. Available only when feature flag
  `custom_emoji` is enabled. This flag is disabled by default, because the
  feature is experimental and is subject to change without notice.
  """
  customEmoji(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomEmojiConnection

  """
  Number of dependency proxy blobs cached in the group.
  """
  dependencyProxyBlobCount: Int!

  """
  Dependency Proxy blobs.
  """
  dependencyProxyBlobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyProxyBlobConnection

  """
  Number of dependency proxy images cached in the group.
  """
  dependencyProxyImageCount: Int!

  """
  Prefix for pulling images when using the dependency proxy.
  """
  dependencyProxyImagePrefix: String!

  """
  Dependency proxy TTL policy for the group.
  """
  dependencyProxyImageTtlPolicy: DependencyProxyImageTtlGroupPolicy

  """
  Dependency Proxy manifests.
  """
  dependencyProxyManifests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyProxyManifestConnection

  """
  Dependency Proxy settings for the group.
  """
  dependencyProxySetting: DependencyProxySetting

  """
  Total size of the dependency proxy cached images.
  """
  dependencyProxyTotalSize: String!

  """
  List of descendant groups of this group.
  """
  descendantGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List of descendant groups of the parent group.
    """
    includeParentDescendants: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit result to groups owned by authenticated user.
    """
    owned: Boolean

    """
    Search query for group name or group full path.
    """
    search: String
  ): GroupConnection

  """
  Description of the namespace.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Indicates if a group has email notifications disabled.
  """
  emailsDisabled: Boolean

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  A membership of a user within this group.
  """
  groupMembers(
    """
    Filter members by the given access levels.
    """
    accessLevels: [AccessLevelEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter members by the given member relations.
    """
    relations: [GroupMemberRelation!] = [DIRECT, INHERITED]

    """
    Search query.
    """
    search: String
  ): GroupMemberConnection

  """
  ID of the namespace.
  """
  id: ID!

  """
  Issues for projects in this group.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Username of a user assigned to the issue. Deprecated in 13.11: Use `assigneeUsernames`.
    """
    assigneeUsername: String @deprecated(reason: "Use `assigneeUsernames`. Deprecated in 13.11.")

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Issues closed after this date.
    """
    closedAfter: Time

    """
    Issues closed before this date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after this date.
    """
    createdAfter: Time

    """
    Issues created before this date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Return issues from archived projects
    """
    includeArchived: Boolean = false

    """
    Include issues belonging to subgroups
    """
    includeSubgroups: Boolean = false

    """
    Labels applied to this issue.
    """
    labelName: [String]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Milestone applied to this issue.
    """
    milestoneTitle: [String]

    """
    Filter issues by milestone ID wildcard.
    """
    milestoneWildcardId: MilestoneWildcardId

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    Negated arguments.
    """
    not: NegatedIssueFilterInput

    """
    Search query for title or description.
    """
    search: String

    """
    Sort issues by this criteria.
    """
    sort: IssueSort = created_desc

    """
    Current state of this issue.
    """
    state: IssuableState

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after this date.
    """
    updatedAfter: Time

    """
    Issues updated before this date.
    """
    updatedBefore: Time
  ): IssueConnection

  """
  Label available on this group.
  """
  label(
    """
    Title of the label.
    """
    title: String!
  ): Label

  """
  Labels available on this group.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include labels from ancestor groups.
    """
    includeAncestorGroups: Boolean = false

    """
    Include labels from descendant groups.
    """
    includeDescendantGroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Include only group level labels.
    """
    onlyGroupLabels: Boolean = false

    """
    Search term to find labels with.
    """
    searchTerm: String
  ): LabelConnection

  """
  Indicates if Large File Storage (LFS) is enabled for namespace.
  """
  lfsEnabled: Boolean

  """
  Indicates if a group is disabled from getting mentioned.
  """
  mentionsDisabled: Boolean

  """
  Merge requests for projects in this group.
  """
  mergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Return merge requests from archived projects
    """
    includeArchived: Boolean = false

    """
    Include merge requests belonging to subgroups
    """
    includeSubgroups: Boolean = false

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Milestones of the group.
  """
  milestones(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Date the milestone contains.
    """
    containingDate: Time

    """
    List items overlapping a time frame defined by startDate..endDate (if one
    date is provided, both must be present) Deprecated in 13.5: Use timeframe.end.
    """
    endDate: Time @deprecated(reason: "Use timeframe.end. Deprecated in 13.5.")

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global milestone IDs, e.g., `"gid://gitlab/Milestone/1"`.
    """
    ids: [ID!]

    """
    Include milestones from all parent groups.
    """
    includeAncestors: Boolean

    """
    Include milestones from all subgroups and subprojects.
    """
    includeDescendants: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search string for the title.
    """
    searchTitle: String

    """
    Sort milestones by this criteria.
    """
    sort: MilestoneSort = DUE_DATE_ASC

    """
    List items overlapping a time frame defined by startDate..endDate (if one
    date is provided, both must be present) Deprecated in 13.5: Use
    timeframe.start.
    """
    startDate: Time @deprecated(reason: "Use timeframe.start. Deprecated in 13.5.")

    """
    Filter milestones by state.
    """
    state: MilestoneStateEnum

    """
    List items overlapping the given timeframe.
    """
    timeframe: Timeframe

    """
    Title of the milestone.
    """
    title: String
  ): MilestoneConnection

  """
  Name of the namespace.
  """
  name: String!

  """
  Find organizations of this group.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter organizations by IDs.
    """
    ids: [CustomerRelationsOrganizationID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search term used to find organizations with.
    """
    search: String

    """
    State of the organization to search for.
    """
    state: CustomerRelationsOrganizationState
  ): CustomerRelationsOrganizationConnection

  """
  Package settings for the namespace.
  """
  packageSettings: PackageSettings

  """
  Packages of the group.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include versionless packages.
    """
    includeVersionless: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search a package by name.
    """
    packageName: String = null

    """
    Filter a package by type.
    """
    packageType: PackageTypeEnum = null

    """
    Sort packages by this criteria.
    """
    sort: PackageGroupSort = CREATED_DESC

    """
    Filter a package by status.
    """
    status: PackageStatus = null
  ): PackageConnection

  """
  Parent group.
  """
  parent: Group

  """
  Path of the namespace.
  """
  path: String!

  """
  Permission level required to create projects in the group.
  """
  projectCreationLevel: String

  """
  Projects within this namespace.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter projects by IDs.
    """
    ids: [ID!] = null

    """
    Include also subgroup projects.
    """
    includeSubgroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search project with most similar names or paths.
    """
    search: String = null

    """
    Sort projects by this criteria.
    """
    sort: NamespaceProjectSort = null
  ): ProjectConnection!

  """
  List of recently visited boards of the group. Maximum size is 4.
  """
  recentIssueBoards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  Indicates if users can request access to namespace.
  """
  requestAccessEnabled: Boolean

  """
  Indicates if all users in this group are required to set up two-factor authentication.
  """
  requireTwoFactorAuthentication: Boolean

  """
  Aggregated storage statistics of the namespace. Only available for root namespaces.
  """
  rootStorageStatistics: RootStorageStatistics

  """
  Find runners visible to the current user.
  """
  runners(
    """
    Filter runners by `active` (true) or `paused` (false) status. Deprecated in 14.8: This was renamed.
    """
    active: Boolean @deprecated(reason: "This was renamed. Please use `paused`. Deprecated in 14.8.")

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Control which runners to include in the results.
    """
    membership: RunnerMembershipFilter = DESCENDANTS

    """
    Filter runners by `paused` (true) or `active` (false) status.
    """
    paused: Boolean

    """
    Filter by full token or partial text in description field.
    """
    search: String

    """
    Sort order of results.
    """
    sort: CiRunnerSort

    """
    Filter runners by status.
    """
    status: CiRunnerStatus

    """
    Filter by tags associated with the runner (comma-separated or array).
    """
    tagList: [String!]

    """
    Filter runners by type.
    """
    type: CiRunnerType

    """
    Filter by upgrade status.
    """
    upgradeStatus: CiRunnerUpgradeStatus
  ): CiRunnerConnection

  """
  Indicates if sharing a project with another group within this group is prevented.
  """
  shareWithGroupLock: Boolean

  """
  Shared runners availability for the namespace and its descendants.
  """
  sharedRunnersSetting: SharedRunnersSetting

  """
  Permission level required to create subgroups within the group.
  """
  subgroupCreationLevel: String

  """
  Timelog categories for the namespace. Available only when feature flag
  `timelog_categories` is enabled. This flag is disabled by default, because the
  feature is experimental and is subject to change without notice.
  """
  timelogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeTrackingTimelogCategoryConnection

  """
  Time logged on issues and merge requests in the group and its subgroups.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection!

  """
  Time before two-factor authentication is enforced.
  """
  twoFactorGracePeriod: Int

  """
  Permissions for the current user on the resource
  """
  userPermissions: GroupPermissions!

  """
  Visibility of the namespace.
  """
  visibility: String

  """
  Web URL of the group.
  """
  webUrl: String!

  """
  Work item types available to the group. Returns `null` if `work_items` feature
  flag is disabled. This flag is disabled by default, because the feature is
  experimental and is subject to change without notice.
  """
  workItemTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If `true`, only taskable work item types will be returned. Argument is
    experimental and can be removed in the future without notice.
    """
    taskable: Boolean
  ): WorkItemTypeConnection
}

"""
The connection type for Group.
"""
type GroupConnection {
  """
  A list of edges.
  """
  edges: [GroupEdge]

  """
  A list of nodes.
  """
  nodes: [Group]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type GroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Group
}

"""
A `GroupID` is a global ID. It is encoded as a string.

An example `GroupID` is: `"gid://gitlab/Group/1"`.
"""
scalar GroupID

"""
Represents a Group Membership
"""
type GroupMember implements MemberInterface {
  """
  GitLab::Access level.
  """
  accessLevel: AccessLevel

  """
  Date and time the membership was created.
  """
  createdAt: Time

  """
  User that authorized membership.
  """
  createdBy: UserCore

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  Group that a User is a member of.
  """
  group: Group

  """
  ID of the member.
  """
  id: ID!

  """
  Find a merge request.
  """
  mergeRequestInteraction(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): UserMergeRequestInteraction

  """
  Group notification email for User. Only available for admins.
  """
  notificationEmail: String

  """
  Date and time the membership was last updated.
  """
  updatedAt: Time

  """
  User that is associated with the member object.
  """
  user: UserCore

  """
  Permissions for the current user on the resource
  """
  userPermissions: GroupPermissions!
}

"""
The connection type for GroupMember.
"""
type GroupMemberConnection {
  """
  A list of edges.
  """
  edges: [GroupMemberEdge]

  """
  A list of nodes.
  """
  nodes: [GroupMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type GroupMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GroupMember
}

"""
Group member relation
"""
enum GroupMemberRelation {
  """
  Members in the group's subgroups.
  """
  DESCENDANTS

  """
  Members in the group itself.
  """
  DIRECT

  """
  Members in the group's ancestor groups.
  """
  INHERITED

  """
  Invited group's members.
  """
  SHARED_FROM_GROUPS
}

"""
User permission on groups
"""
enum GroupPermission {
  """
  Groups where the user can create projects.
  """
  CREATE_PROJECTS

  """
  Groups where the user can transfer projects to.
  """
  TRANSFER_PROJECTS
}

type GroupPermissions {
  """
  Indicates the user can perform `create_projects` on this resource
  """
  createProjects: Boolean!

  """
  Indicates the user can perform `read_group` on this resource
  """
  readGroup: Boolean!
}

"""
Autogenerated input type of GroupUpdate
"""
input GroupUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the group that will be updated.
  """
  fullPath: ID!

  """
  Shared runners availability for the namespace and its descendants.
  """
  sharedRunnersSetting: SharedRunnersSetting!
}

"""
Autogenerated return type of GroupUpdate
"""
type GroupUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Group after update.
  """
  group: Group
}

"""
Helm file metadata
"""
type HelmFileMetadata implements PackageFileMetadata {
  """
  Channel of the Helm chart.
  """
  channel: String!

  """
  Date of creation.
  """
  createdAt: Time!

  """
  Metadata of the Helm chart.
  """
  metadata: PackageHelmMetadataType!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
Autogenerated input type of HttpIntegrationCreate
"""
input HttpIntegrationCreateInput {
  """
  Whether the integration is receiving alerts.
  """
  active: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Name of the integration.
  """
  name: String!

  """
  Project to create the integration in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of HttpIntegrationCreate
"""
type HttpIntegrationCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  HTTP integration.
  """
  integration: AlertManagementHttpIntegration
}

"""
Autogenerated input type of HttpIntegrationDestroy
"""
input HttpIntegrationDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the integration to remove.
  """
  id: AlertManagementHttpIntegrationID!
}

"""
Autogenerated return type of HttpIntegrationDestroy
"""
type HttpIntegrationDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  HTTP integration.
  """
  integration: AlertManagementHttpIntegration
}

"""
Autogenerated input type of HttpIntegrationResetToken
"""
input HttpIntegrationResetTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the integration to mutate.
  """
  id: AlertManagementHttpIntegrationID!
}

"""
Autogenerated return type of HttpIntegrationResetToken
"""
type HttpIntegrationResetTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  HTTP integration.
  """
  integration: AlertManagementHttpIntegration
}

"""
Autogenerated input type of HttpIntegrationUpdate
"""
input HttpIntegrationUpdateInput {
  """
  Whether the integration is receiving alerts.
  """
  active: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the integration to mutate.
  """
  id: AlertManagementHttpIntegrationID!

  """
  Name of the integration.
  """
  name: String
}

"""
Autogenerated return type of HttpIntegrationUpdate
"""
type HttpIntegrationUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  HTTP integration.
  """
  integration: AlertManagementHttpIntegration
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
A `IncidentManagementTimelineEventID` is a global ID. It is encoded as a string.

An example `IncidentManagementTimelineEventID` is: `"gid://gitlab/IncidentManagement::TimelineEvent/1"`.
"""
scalar IncidentManagementTimelineEventID

"""
A `IntegrationsPrometheusID` is a global ID. It is encoded as a string.

An example `IntegrationsPrometheusID` is: `"gid://gitlab/Integrations::Prometheus/1"`.
The older format `"gid://gitlab/PrometheusService/1"` was deprecated in 14.1.
"""
scalar IntegrationsPrometheusID

"""
Represents an issuable.
"""
union Issuable = Issue | MergeRequest | WorkItem

"""
A `IssuableID` is a global ID. It is encoded as a string.

An example `IssuableID` is: `"gid://gitlab/Issuable/1"`.
"""
scalar IssuableID

"""
Incident severity
"""
enum IssuableSeverity {
  """
  Critical severity
  """
  CRITICAL

  """
  High severity
  """
  HIGH

  """
  Low severity
  """
  LOW

  """
  Medium severity
  """
  MEDIUM

  """
  Unknown severity
  """
  UNKNOWN
}

"""
State of a GitLab issue or merge request
"""
enum IssuableState {
  """
  All available.
  """
  all

  """
  In closed state.
  """
  closed

  """
  Discussion has been locked.
  """
  locked

  """
  In open state.
  """
  opened
}

type Issue implements CurrentUserTodos & NoteableInterface & Todoable {
  """
  Alert associated to this issue.
  """
  alertManagementAlert: AlertManagementAlert

  """
  Assignees of the issue.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  User that created the issue.
  """
  author: UserCore!

  """
  Issue this issue was closed as a duplicate of.
  """
  closedAsDuplicateOf: Issue

  """
  Timestamp of when the issue was closed.
  """
  closedAt: Time

  """
  Indicates the issue is confidential.
  """
  confidential: Boolean!

  """
  User specific email address for the issue.
  """
  createNoteEmail: String

  """
  Timestamp of when the issue was created.
  """
  createdAt: Time!

  """
  To-do items for the current user.
  """
  currentUserTodos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    State of the to-do items.
    """
    state: TodoStateEnum
  ): TodoConnection!

  """
  Customer relations contacts of the issue.
  """
  customerRelationsContacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CustomerRelationsContactConnection

  """
  Description of the issue.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Collection of design images associated with this issue.
  """
  designCollection: DesignCollection

  """
  Indicates discussion is locked on the issue.
  """
  discussionLocked: Boolean!

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  Number of downvotes the issue has received.
  """
  downvotes: Int!

  """
  Due date of the issue.
  """
  dueDate: Time

  """
  Indicates if a project has email notifications disabled: `true` if email notifications are disabled.
  """
  emailsDisabled: Boolean!

  """
  Escalation status of the issue.
  """
  escalationStatus: IssueEscalationStatus

  """
  Indicates the issue is hidden because the author has been banned. Will always
  return `null` if `ban_user_feature_flag` feature flag is disabled.
  """
  hidden: Boolean

  """
  Human-readable time estimate of the issue.
  """
  humanTimeEstimate: String

  """
  Human-readable total time reported as spent on the issue.
  """
  humanTotalTimeSpent: String

  """
  ID of the issue.
  """
  id: ID!

  """
  Internal ID of the issue.
  """
  iid: ID!

  """
  Labels of the issue.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  Number of merge requests that close the issue on merge.
  """
  mergeRequestsCount: Int!

  """
  Milestone of the issue.
  """
  milestone: Milestone

  """
  Indicates if issue got moved from other project.
  """
  moved: Boolean

  """
  Updated Issue after it got moved to another project.
  """
  movedTo: Issue

  """
  All notes on this noteable.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  List of participants in the issue.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  ID of the issue project.
  """
  projectId: Int!

  """
  Internal reference of the issue. Returned in shortened format by default.
  """
  reference(
    """
    Boolean option specifying whether the reference should be returned in full.
    """
    full: Boolean = false
  ): String!

  """
  Relative position of the issue (used for positioning in epic tree and issue boards).
  """
  relativePosition: Int

  """
  Severity level of the incident.
  """
  severity: IssuableSeverity

  """
  State of the issue.
  """
  state: IssueState!

  """
  Indicates the currently logged in user is subscribed to the issue.
  """
  subscribed: Boolean!

  """
  Task completion status of the issue.
  """
  taskCompletionStatus: TaskCompletionStatus!

  """
  Time estimate of the issue.
  """
  timeEstimate: Int!

  """
  Timelogs on the issue.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection!

  """
  Title of the issue.
  """
  title: String!

  """
  The GitLab Flavored Markdown rendering of `title`
  """
  titleHtml: String

  """
  Total time reported as spent on the issue.
  """
  totalTimeSpent: Int!

  """
  Type of the issue.
  """
  type: IssueType

  """
  Timestamp of when the issue was last updated.
  """
  updatedAt: Time!

  """
  User that last updated the issue.
  """
  updatedBy: UserCore

  """
  Number of upvotes the issue has received.
  """
  upvotes: Int!

  """
  Number of user discussions in the issue.
  """
  userDiscussionsCount: Int!

  """
  Number of user notes of the issue.
  """
  userNotesCount: Int!

  """
  Permissions for the current user on the resource
  """
  userPermissions: IssuePermissions!

  """
  Web path of the issue.
  """
  webPath: String!

  """
  Web URL of the issue.
  """
  webUrl: String!
}

"""
The connection type for Issue.
"""
type IssueConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [IssueEdge]

  """
  A list of nodes.
  """
  nodes: [Issue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type IssueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Issue
}

"""
Issue escalation status values
"""
enum IssueEscalationStatus {
  """
  Someone is actively investigating the problem.
  """
  ACKNOWLEDGED

  """
  No action will be taken.
  """
  IGNORED

  """
  The problem has been addressed.
  """
  RESOLVED

  """
  Investigation has not started.
  """
  TRIGGERED
}

"""
A `IssueID` is a global ID. It is encoded as a string.

An example `IssueID` is: `"gid://gitlab/Issue/1"`.
"""
scalar IssueID

"""
Autogenerated input type of IssueMove
"""
input IssueMoveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  Project to move the issue to.
  """
  targetProjectPath: ID!
}

"""
Autogenerated input type of IssueMoveList
"""
input IssueMoveListInput {
  """
  Global ID of the board that the issue is in.
  """
  boardId: BoardID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the board list that the issue will be moved from.
  """
  fromListId: ID

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  ID of issue that should be placed after the current issue.
  """
  moveAfterId: ID

  """
  ID of issue that should be placed before the current issue.
  """
  moveBeforeId: ID

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  ID of the board list that the issue will be moved to.
  """
  toListId: ID
}

"""
Autogenerated return type of IssueMoveList
"""
type IssueMoveListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated return type of IssueMove
"""
type IssueMovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Check permissions for the current user on a issue
"""
type IssuePermissions {
  """
  Indicates the user can perform `admin_issue` on this resource
  """
  adminIssue: Boolean!

  """
  Indicates the user can perform `create_design` on this resource
  """
  createDesign: Boolean!

  """
  Indicates the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  Indicates the user can perform `destroy_design` on this resource
  """
  destroyDesign: Boolean!

  """
  Indicates the user can perform `read_design` on this resource
  """
  readDesign: Boolean!

  """
  Indicates the user can perform `read_issue` on this resource
  """
  readIssue: Boolean!

  """
  Indicates the user can perform `reopen_issue` on this resource
  """
  reopenIssue: Boolean!

  """
  Indicates the user can perform `update_issue` on this resource
  """
  updateIssue: Boolean!
}

"""
Autogenerated input type of IssueSetAssignees
"""
input IssueSetAssigneesInput {
  """
  Usernames to assign to the resource. Replaces existing assignees by default.
  """
  assigneeUsernames: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Operation to perform. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode = REPLACE

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of IssueSetAssignees
"""
type IssueSetAssigneesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetConfidential
"""
input IssueSetConfidentialInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not to set the issue as a confidential.
  """
  confidential: Boolean!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of IssueSetConfidential
"""
type IssueSetConfidentialPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetCrmContacts
"""
input IssueSetCrmContactsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Customer relations contact IDs to set. Replaces existing contacts by default.
  """
  contactIds: [CustomerRelationsContactID!]!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Changes the operation mode. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of IssueSetCrmContacts
"""
type IssueSetCrmContactsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetDueDate
"""
input IssueSetDueDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Desired due date for the issue. Due date is removed if null.
  """
  dueDate: Time

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of IssueSetDueDate
"""
type IssueSetDueDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetEscalationStatus
"""
input IssueSetEscalationStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  Set the escalation status.
  """
  status: IssueEscalationStatus!
}

"""
Autogenerated return type of IssueSetEscalationStatus
"""
type IssueSetEscalationStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetLocked
"""
input IssueSetLockedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Whether or not to lock discussion on the issue.
  """
  locked: Boolean!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of IssueSetLocked
"""
type IssueSetLockedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetSeverity
"""
input IssueSetSeverityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  Set the incident severity level.
  """
  severity: IssuableSeverity!
}

"""
Autogenerated return type of IssueSetSeverity
"""
type IssueSetSeverityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetSubscription
"""
input IssueSetSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  Desired state of the subscription.
  """
  subscribedState: Boolean!
}

"""
Autogenerated return type of IssueSetSubscription
"""
type IssueSetSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Values for sorting issues
"""
enum IssueSort {
  """
  Closed time by ascending order.
  """
  CLOSED_AT_ASC

  """
  Closed time by descending order.
  """
  CLOSED_AT_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Due date by ascending order.
  """
  DUE_DATE_ASC

  """
  Due date by descending order.
  """
  DUE_DATE_DESC

  """
  Status from triggered to resolved.
  """
  ESCALATION_STATUS_ASC

  """
  Status from resolved to triggered.
  """
  ESCALATION_STATUS_DESC

  """
  Label priority by ascending order.
  """
  LABEL_PRIORITY_ASC

  """
  Label priority by descending order.
  """
  LABEL_PRIORITY_DESC

  """
  Milestone due date by ascending order.
  """
  MILESTONE_DUE_ASC

  """
  Milestone due date by descending order.
  """
  MILESTONE_DUE_DESC

  """
  Number of upvotes (awarded "thumbs up" emoji) by ascending order.
  """
  POPULARITY_ASC

  """
  Number of upvotes (awarded "thumbs up" emoji) by descending order.
  """
  POPULARITY_DESC

  """
  Priority by ascending order.
  """
  PRIORITY_ASC

  """
  Priority by descending order.
  """
  PRIORITY_DESC

  """
  Relative position by ascending order.
  """
  RELATIVE_POSITION_ASC

  """
  Severity from less critical to more critical.
  """
  SEVERITY_ASC

  """
  Severity from more critical to less critical.
  """
  SEVERITY_DESC

  """
  Title by ascending order.
  """
  TITLE_ASC

  """
  Title by descending order.
  """
  TITLE_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Created at ascending order.
  """
  created_asc @deprecated(reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5.")

  """
  Created at descending order.
  """
  created_desc @deprecated(reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5.")

  """
  Updated at ascending order.
  """
  updated_asc @deprecated(reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5.")

  """
  Updated at descending order.
  """
  updated_desc @deprecated(reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5.")
}

"""
State of a GitLab issue
"""
enum IssueState {
  """
  All available.
  """
  all

  """
  In closed state.
  """
  closed

  """
  Discussion has been locked.
  """
  locked

  """
  In open state.
  """
  opened
}

"""
Values for issue state events
"""
enum IssueStateEvent {
  """
  Closes the issue.
  """
  CLOSE

  """
  Reopens the issue.
  """
  REOPEN
}

"""
Represents total number of issues for the represented statuses
"""
type IssueStatusCountsType {
  """
  Number of issues with status ALL for the project
  """
  all: Int

  """
  Number of issues with status CLOSED for the project
  """
  closed: Int

  """
  Number of issues with status OPENED for the project
  """
  opened: Int
}

"""
Issue type
"""
enum IssueType {
  """
  Incident issue type
  """
  INCIDENT

  """
  Issue issue type
  """
  ISSUE

  """
  Requirement issue type
  """
  REQUIREMENT

  """
  Task issue type. Available only when feature flag `work_items` is enabled.
  Introduced in 15.2: This feature is in Alpha. It can be changed or removed at any time.
  """
  TASK @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.2.")

  """
  Test Case issue type
  """
  TEST_CASE
}

"""
Represents untyped JSON
"""
scalar JSON

type JiraImport {
  """
  Timestamp of when the Jira import was created.
  """
  createdAt: Time

  """
  Count of issues that failed to import.
  """
  failedToImportCount: Int!

  """
  Count of issues that were successfully imported.
  """
  importedIssuesCount: Int!

  """
  Project key for the imported Jira project.
  """
  jiraProjectKey: String!

  """
  Timestamp of when the Jira import was scheduled.
  """
  scheduledAt: Time

  """
  User that started the Jira import.
  """
  scheduledBy: UserCore

  """
  Total count of issues that were attempted to import.
  """
  totalIssueCount: Int!
}

"""
The connection type for JiraImport.
"""
type JiraImportConnection {
  """
  A list of edges.
  """
  edges: [JiraImportEdge]

  """
  A list of nodes.
  """
  nodes: [JiraImport]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type JiraImportEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: JiraImport
}

"""
Autogenerated input type of JiraImportStart
"""
input JiraImportStartInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project key of the importer Jira project.
  """
  jiraProjectKey: String!

  """
  Project name of the importer Jira project.
  """
  jiraProjectName: String

  """
  Project to import the Jira project into.
  """
  projectPath: ID!

  """
  Mapping of Jira to GitLab users.
  """
  usersMapping: [JiraUsersMappingInputType!]
}

"""
Autogenerated return type of JiraImportStart
"""
type JiraImportStartPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Jira import data after mutation.
  """
  jiraImport: JiraImport
}

"""
Autogenerated input type of JiraImportUsers
"""
input JiraImportUsersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project to import the Jira users into.
  """
  projectPath: ID!

  """
  Index of the record the import should started at, default 0 (50 records returned).
  """
  startAt: Int
}

"""
Autogenerated return type of JiraImportUsers
"""
type JiraImportUsersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Users returned from Jira, matched by email and name if possible.
  """
  jiraUsers: [JiraUser!]
}

type JiraProject {
  """
  Key of the Jira project.
  """
  key: String!

  """
  Name of the Jira project.
  """
  name: String

  """
  ID of the Jira project.
  """
  projectId: Int!
}

"""
The connection type for JiraProject.
"""
type JiraProjectConnection {
  """
  A list of edges.
  """
  edges: [JiraProjectEdge]

  """
  A list of nodes.
  """
  nodes: [JiraProject]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type JiraProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: JiraProject
}

type JiraService implements Service {
  """
  Indicates if the service is active.
  """
  active: Boolean

  """
  List of all Jira projects fetched through Jira REST API.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Project name or key.
    """
    name: String
  ): JiraProjectConnection

  """
  Type of the service.
  """
  serviceType: ServiceType

  """
  Class name of the service.
  """
  type: String
}

type JiraUser {
  """
  ID of the matched GitLab user.
  """
  gitlabId: Int

  """
  Name of the matched GitLab user.
  """
  gitlabName: String

  """
  Username of the matched GitLab user.
  """
  gitlabUsername: String

  """
  Account ID of the Jira user.
  """
  jiraAccountId: String!

  """
  Display name of the Jira user.
  """
  jiraDisplayName: String!

  """
  Email of the Jira user, returned only for users with public emails.
  """
  jiraEmail: String
}

input JiraUsersMappingInputType {
  """
  ID of the GitLab user.
  """
  gitlabId: Int

  """
  Jira account ID of the user.
  """
  jiraAccountId: String!
}

enum JobArtifactFileType {
  """
  ACCESSIBILITY job artifact file type.
  """
  ACCESSIBILITY

  """
  API FUZZING job artifact file type.
  """
  API_FUZZING

  """
  ARCHIVE job artifact file type.
  """
  ARCHIVE

  """
  BROWSER PERFORMANCE job artifact file type.
  """
  BROWSER_PERFORMANCE

  """
  CLUSTER APPLICATIONS job artifact file type.
  """
  CLUSTER_APPLICATIONS

  """
  CLUSTER IMAGE SCANNING job artifact file type.
  """
  CLUSTER_IMAGE_SCANNING

  """
  COBERTURA job artifact file type.
  """
  COBERTURA

  """
  CODE QUALITY job artifact file type.
  """
  CODEQUALITY

  """
  CONTAINER SCANNING job artifact file type.
  """
  CONTAINER_SCANNING

  """
  COVERAGE FUZZING job artifact file type.
  """
  COVERAGE_FUZZING

  """
  CYCLONEDX job artifact file type.
  """
  CYCLONEDX

  """
  DAST job artifact file type.
  """
  DAST

  """
  DEPENDENCY SCANNING job artifact file type.
  """
  DEPENDENCY_SCANNING

  """
  DOTENV job artifact file type.
  """
  DOTENV

  """
  JUNIT job artifact file type.
  """
  JUNIT

  """
  LICENSE SCANNING job artifact file type.
  """
  LICENSE_SCANNING

  """
  LOAD PERFORMANCE job artifact file type.
  """
  LOAD_PERFORMANCE

  """
  LSIF job artifact file type.
  """
  LSIF

  """
  METADATA job artifact file type.
  """
  METADATA

  """
  METRICS job artifact file type.
  """
  METRICS

  """
  METRICS REFEREE job artifact file type.
  """
  METRICS_REFEREE

  """
  NETWORK REFEREE job artifact file type.
  """
  NETWORK_REFEREE

  """
  PERFORMANCE job artifact file type.
  """
  PERFORMANCE

  """
  REQUIREMENTS job artifact file type.
  """
  REQUIREMENTS

  """
  SAST job artifact file type.
  """
  SAST

  """
  SECRET DETECTION job artifact file type.
  """
  SECRET_DETECTION

  """
  TERRAFORM job artifact file type.
  """
  TERRAFORM

  """
  TRACE job artifact file type.
  """
  TRACE
}

"""
Autogenerated input type of JobCancel
"""
input JobCancelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the job to mutate.
  """
  id: CiBuildID!
}

"""
Autogenerated return type of JobCancel
"""
type JobCancelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Job after the mutation.
  """
  job: CiJob
}

"""
A `CommitStatusID` is a global ID. It is encoded as a string.

An example `CommitStatusID` is: `"gid://gitlab/CommitStatus/1"`.
"""
scalar JobID

union JobNeedUnion = CiBuildNeed | CiJob

"""
The connection type for JobNeedUnion.
"""
type JobNeedUnionConnection {
  """
  A list of edges.
  """
  edges: [JobNeedUnionEdge]

  """
  A list of nodes.
  """
  nodes: [JobNeedUnion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type JobNeedUnionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: JobNeedUnion
}

type JobPermissions {
  """
  Indicates the user can perform `read_build` on this resource
  """
  readBuild: Boolean!

  """
  Indicates the user can perform `read_job_artifacts` on this resource
  """
  readJobArtifacts: Boolean!

  """
  Indicates the user can perform `update_build` on this resource
  """
  updateBuild: Boolean!
}

"""
Autogenerated input type of JobPlay
"""
input JobPlayInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the job to mutate.
  """
  id: CiBuildID!
}

"""
Autogenerated return type of JobPlay
"""
type JobPlayPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Job after the mutation.
  """
  job: CiJob
}

"""
Autogenerated input type of JobRetry
"""
input JobRetryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the job to mutate.
  """
  id: CiBuildID!

  """
  Variables to use when retrying a manual job.
  """
  variables: [CiVariableInput!] = []
}

"""
Autogenerated return type of JobRetry
"""
type JobRetryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Job after the mutation.
  """
  job: CiJob
}

"""
Autogenerated input type of JobUnschedule
"""
input JobUnscheduleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the job to mutate.
  """
  id: CiBuildID!
}

"""
Autogenerated return type of JobUnschedule
"""
type JobUnschedulePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Job after the mutation.
  """
  job: CiJob
}

type Kas {
  """
  Indicates whether the Kubernetes Agent Server is enabled.
  """
  enabled: Boolean!

  """
  URL used by the Agents to communicate with KAS.
  """
  externalUrl: String

  """
  KAS version.
  """
  version: String
}

type Label {
  """
  Background color of the label.
  """
  color: String!

  """
  When this label was created.
  """
  createdAt: Time!

  """
  Description of the label (Markdown rendered as HTML for caching).
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Label ID.
  """
  id: ID!

  """
  Text color of the label.
  """
  textColor: String!

  """
  Content of the label.
  """
  title: String!

  """
  When this label was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for Label.
"""
type LabelConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [LabelEdge]

  """
  A list of nodes.
  """
  nodes: [Label]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of LabelCreate
"""
input LabelCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The color of the label given in 6-digit hex notation with leading '#' sign
  (for example, `#FFAABB`) or one of the CSS color names.
  """
  color: String = "#6699cc"

  """
  Description of the label.
  """
  description: String

  """
  Full path of the group with which the resource is associated.
  """
  groupPath: ID

  """
  Full path of the project with which the resource is associated.
  """
  projectPath: ID

  """
  Title of the label.
  """
  title: String!
}

"""
Autogenerated return type of LabelCreate
"""
type LabelCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Label after mutation.
  """
  label: Label
}

"""
An edge in a connection.
"""
type LabelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Label
}

"""
A `LabelID` is a global ID. It is encoded as a string.

An example `LabelID` is: `"gid://gitlab/Label/1"`.
"""
scalar LabelID

"""
A `ListID` is a global ID. It is encoded as a string.

An example `ListID` is: `"gid://gitlab/List/1"`.
"""
scalar ListID

"""
Autogenerated input type of MarkAsSpamSnippet
"""
input MarkAsSpamSnippetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the snippet to update.
  """
  id: SnippetID!
}

"""
Autogenerated return type of MarkAsSpamSnippet
"""
type MarkAsSpamSnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

"""
Maven metadata
"""
type MavenMetadata {
  """
  App group of the Maven package.
  """
  appGroup: String!

  """
  App name of the Maven package.
  """
  appName: String!

  """
  App version of the Maven package.
  """
  appVersion: String

  """
  Date of creation.
  """
  createdAt: Time!

  """
  ID of the metadatum.
  """
  id: PackagesMavenMetadatumID!

  """
  Path of the Maven package.
  """
  path: String!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
Possible identifier types for a measurement
"""
enum MeasurementIdentifier {
  """
  Group count.
  """
  GROUPS

  """
  Issue count.
  """
  ISSUES

  """
  Merge request count.
  """
  MERGE_REQUESTS

  """
  Pipeline count.
  """
  PIPELINES

  """
  Pipeline count with canceled status.
  """
  PIPELINES_CANCELED

  """
  Pipeline count with failed status.
  """
  PIPELINES_FAILED

  """
  Pipeline count with skipped status.
  """
  PIPELINES_SKIPPED

  """
  Pipeline count with success status.
  """
  PIPELINES_SUCCEEDED

  """
  Project count.
  """
  PROJECTS

  """
  User count.
  """
  USERS
}

interface MemberInterface {
  """
  GitLab::Access level.
  """
  accessLevel: AccessLevel

  """
  Date and time the membership was created.
  """
  createdAt: Time

  """
  User that authorized membership.
  """
  createdBy: UserCore

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  ID of the member.
  """
  id: ID!

  """
  Find a merge request.
  """
  mergeRequestInteraction(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): UserMergeRequestInteraction

  """
  Date and time the membership was last updated.
  """
  updatedAt: Time

  """
  User that is associated with the member object.
  """
  user: UserCore
}

"""
The connection type for MemberInterface.
"""
type MemberInterfaceConnection {
  """
  A list of edges.
  """
  edges: [MemberInterfaceEdge]

  """
  A list of nodes.
  """
  nodes: [MemberInterface]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MemberInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MemberInterface
}

type MergeRequest implements CurrentUserTodos & NoteableInterface & Todoable {
  """
  Indicates if members of the target project can push to the fork.
  """
  allowCollaboration: Boolean

  """
  Users who approved the merge request.
  """
  approvedBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Assignees of the merge request.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestAssigneeConnection

  """
  User who created this merge request.
  """
  author: MergeRequestAuthor

  """
  Indicates if auto merge is enabled for the merge request.
  """
  autoMergeEnabled: Boolean!

  """
  Selected auto merge strategy.
  """
  autoMergeStrategy: String

  """
  Array of available auto merge strategies.
  """
  availableAutoMergeStrategies: [String!]

  """
  Number of commits in the merge request.
  """
  commitCount: Int

  """
  Merge request commits.
  """
  commits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitConnection

  """
  Merge request commits excluding merge commits.
  """
  commitsWithoutMergeCommits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitConnection

  """
  Users who have added commits to the merge request.
  """
  committers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Indicates if the merge request has conflicts.
  """
  conflicts: Boolean!

  """
  Timestamp of when the merge request was created.
  """
  createdAt: Time!

  """
  To-do items for the current user.
  """
  currentUserTodos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    State of the to-do items.
    """
    state: TodoStateEnum
  ): TodoConnection!

  """
  Default merge commit message of the merge request.
  """
  defaultMergeCommitMessage: String

  """
  Default squash commit message of the merge request.
  """
  defaultSquashCommitMessage: String

  """
  Description of the merge request (Markdown rendered as HTML for caching).
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Diff head SHA of the merge request.
  """
  diffHeadSha: String

  """
  References of the base SHA, the head SHA, and the start SHA for this merge request.
  """
  diffRefs: DiffRefs

  """
  Details about which files were changed in this merge request.
  """
  diffStats(
    """
    Specific file path.
    """
    path: String
  ): [DiffStats!]

  """
  Summary of which files were changed in this merge request.
  """
  diffStatsSummary: DiffStatsSummary

  """
  Indicates if comments on the merge request are locked to members only.
  """
  discussionLocked: Boolean!

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  Indicates if the source branch is behind the target branch.
  """
  divergedFromTargetBranch: Boolean!

  """
  Number of downvotes for the merge request.
  """
  downvotes: Int!

  """
  Indicates if the merge request is a draft.
  """
  draft: Boolean!

  """
  Indicates if the project settings will lead to source branch deletion after merge.
  """
  forceRemoveSourceBranch: Boolean

  """
  Indicates if the merge request has CI.
  """
  hasCi: Boolean!

  """
  Pipeline running on the branch HEAD of the merge request.
  """
  headPipeline: Pipeline

  """
  Human-readable time estimate of the merge request.
  """
  humanTimeEstimate: String

  """
  Human-readable total time reported as spent on the merge request.
  """
  humanTotalTimeSpent: String

  """
  ID of the merge request.
  """
  id: ID!

  """
  Internal ID of the merge request.
  """
  iid: String!

  """
  Commit SHA of the merge request if merge is in progress.
  """
  inProgressMergeCommitSha: String

  """
  Labels of the merge request.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  SHA of the merge request commit (set once merged).
  """
  mergeCommitSha: String

  """
  Error message due to a merge error.
  """
  mergeError: String

  """
  Indicates if a merge is currently occurring.
  """
  mergeOngoing: Boolean!

  """
  Status of the merge request. Deprecated in 14.0: This was renamed.
  """
  mergeStatus: String @deprecated(reason: "This was renamed. Please use `MergeRequest.mergeStatusEnum`. Deprecated in 14.0.")

  """
  Merge status of the merge request.
  """
  mergeStatusEnum: MergeStatus

  """
  User who merged this merge request or set it to merge when pipeline succeeds.
  """
  mergeUser: UserCore

  """
  Indicates if the merge has been set to be merged when its pipeline succeeds (MWPS).
  """
  mergeWhenPipelineSucceeds: Boolean

  """
  Indicates if the merge request is mergeable.
  """
  mergeable: Boolean!

  """
  Indicates if all discussions in the merge request have been resolved, allowing the merge request to be merged.
  """
  mergeableDiscussionsState: Boolean

  """
  Timestamp of when the merge request was merged, null if not merged.
  """
  mergedAt: Time

  """
  Milestone of the merge request.
  """
  milestone: Milestone

  """
  All notes on this noteable.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  Participants in the merge request. This includes the author, assignees, reviewers, and users mentioned in notes.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestParticipantConnection

  """
  Pipelines for the merge request. Note: for performance reasons, no more than
  the most recent 500 pipelines will be returned.
  """
  pipelines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter pipelines by the ref they are run for.
    """
    ref: String

    """
    Filter pipelines by scope.
    """
    scope: PipelineScopeEnum

    """
    Filter pipelines by the sha of the commit they are run for.
    """
    sha: String

    """
    Filter pipelines by their source.
    """
    source: String

    """
    Filter pipelines by their status.
    """
    status: PipelineStatusEnum

    """
    Pipelines updated after this date.
    """
    updatedAfter: Time

    """
    Pipelines updated before this date.
    """
    updatedBefore: Time

    """
    Filter pipelines by the user that triggered the pipeline.
    """
    username: String
  ): PipelineConnection

  """
  Alias for target_project.
  """
  project: Project!

  """
  ID of the merge request project.
  """
  projectId: Int!

  """
  Rebase commit SHA of the merge request.
  """
  rebaseCommitSha: String

  """
  Indicates if there is a rebase currently in progress for the merge request.
  """
  rebaseInProgress: Boolean!

  """
  Internal reference of the merge request. Returned in shortened format by default.
  """
  reference(
    """
    Boolean option specifying whether the reference should be returned in full.
    """
    full: Boolean = false
  ): String!

  """
  Users from whom a review has been requested.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestReviewerConnection

  """
  Indicates if the merge request is created by @GitLab-Security-Bot.
  """
  securityAutoFix: Boolean

  """
  Indicates if the merge request will be rebased.
  """
  shouldBeRebased: Boolean!

  """
  Indicates if the source branch of the merge request will be deleted after merge.
  """
  shouldRemoveSourceBranch: Boolean

  """
  Source branch of the merge request.
  """
  sourceBranch: String!

  """
  Indicates if the source branch of the merge request exists.
  """
  sourceBranchExists: Boolean!

  """
  Indicates if the source branch is protected.
  """
  sourceBranchProtected: Boolean!

  """
  Source project of the merge request.
  """
  sourceProject: Project

  """
  ID of the merge request source project.
  """
  sourceProjectId: Int

  """
  Indicates if squash on merge is enabled.
  """
  squash: Boolean!

  """
  Indicates if squash on merge is enabled.
  """
  squashOnMerge: Boolean!

  """
  State of the merge request.
  """
  state: MergeRequestState!

  """
  Indicates if the currently logged in user is subscribed to this merge request.
  """
  subscribed: Boolean!

  """
  Target branch of the merge request.
  """
  targetBranch: String!

  """
  Indicates if the target branch of the merge request exists.
  """
  targetBranchExists: Boolean!

  """
  Target project of the merge request.
  """
  targetProject: Project!

  """
  ID of the merge request target project.
  """
  targetProjectId: Int!

  """
  Completion status of tasks
  """
  taskCompletionStatus: TaskCompletionStatus!

  """
  Time estimate of the merge request.
  """
  timeEstimate: Int!

  """
  Timelogs on the merge request.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection!

  """
  Title of the merge request.
  """
  title: String!

  """
  The GitLab Flavored Markdown rendering of `title`
  """
  titleHtml: String

  """
  Total time reported as spent on the merge request.
  """
  totalTimeSpent: Int!

  """
  Timestamp of when the merge request was last updated.
  """
  updatedAt: Time!

  """
  Number of upvotes for the merge request.
  """
  upvotes: Int!

  """
  Number of user discussions in the merge request.
  """
  userDiscussionsCount: Int

  """
  User notes count of the merge request.
  """
  userNotesCount: Int

  """
  Permissions for the current user on the resource
  """
  userPermissions: MergeRequestPermissions!

  """
  Web URL of the merge request.
  """
  webUrl: String
}

"""
Autogenerated input type of MergeRequestAccept
"""
input MergeRequestAcceptInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Custom merge commit message.
  """
  commitMessage: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  HEAD SHA at the time when this merge was requested.
  """
  sha: String!

  """
  Should the source branch be removed.
  """
  shouldRemoveSourceBranch: Boolean

  """
  Squash commits on the source branch before merge.
  """
  squash: Boolean = false

  """
  Custom squash commit message (if squash is true).
  """
  squashCommitMessage: String

  """
  How to merge this merge request.
  """
  strategy: MergeStrategyEnum
}

"""
Autogenerated return type of MergeRequestAccept
"""
type MergeRequestAcceptPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
A user assigned to a merge request.
"""
type MergeRequestAssignee implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User email. Deprecated in 13.7: This was renamed.
  """
  email: String @deprecated(reason: "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.")

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  Location of the user.
  """
  location: String

  """
  Details of this user's interactions with the merge request.
  """
  mergeRequestInteraction: UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot
  and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Saved replies authored by the user. Will not return saved replies if `saved_replies` feature flag is disabled.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    search: String
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  To-do items of the user.
  """
  todos(
    """
    Action to be filtered.
    """
    action: [TodoActionEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of a group.
    """
    groupId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: [ID!]

    """
    State of the todo.
    """
    state: [TodoStateEnum!]

    """
    Type of the todo.
    """
    type: [TodoTargetEnum!]
  ): TodoConnection

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for MergeRequestAssignee.
"""
type MergeRequestAssigneeConnection {
  """
  A list of edges.
  """
  edges: [MergeRequestAssigneeEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequestAssignee]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MergeRequestAssigneeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequestAssignee
}

"""
The author of the merge request.
"""
type MergeRequestAuthor implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User email. Deprecated in 13.7: This was renamed.
  """
  email: String @deprecated(reason: "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.")

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  Location of the user.
  """
  location: String

  """
  Details of this user's interactions with the merge request.
  """
  mergeRequestInteraction: UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot
  and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Saved replies authored by the user. Will not return saved replies if `saved_replies` feature flag is disabled.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    search: String
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  To-do items of the user.
  """
  todos(
    """
    Action to be filtered.
    """
    action: [TodoActionEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of a group.
    """
    groupId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: [ID!]

    """
    State of the todo.
    """
    state: [TodoStateEnum!]

    """
    Type of the todo.
    """
    type: [TodoTargetEnum!]
  ): TodoConnection

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for MergeRequest.
"""
type MergeRequestConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [MergeRequestEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total sum of time to merge, in seconds, for the collection of merge requests.
  """
  totalTimeToMerge: Float
}

"""
Autogenerated input type of MergeRequestCreate
"""
input MergeRequestCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of the merge request (Markdown rendered as HTML for caching).
  """
  description: String

  """
  Labels of the merge request.
  """
  labels: [String!]

  """
  Project full path the merge request is associated with.
  """
  projectPath: ID!

  """
  Source branch of the merge request.
  """
  sourceBranch: String!

  """
  Target branch of the merge request.
  """
  targetBranch: String!

  """
  Title of the merge request.
  """
  title: String!
}

"""
Autogenerated return type of MergeRequestCreate
"""
type MergeRequestCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
An edge in a connection.
"""
type MergeRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequest
}

"""
A `MergeRequestID` is a global ID. It is encoded as a string.

An example `MergeRequestID` is: `"gid://gitlab/MergeRequest/1"`.
"""
scalar MergeRequestID

"""
New state to apply to a merge request.
"""
enum MergeRequestNewState {
  """
  Close the merge request if it is open.
  """
  CLOSED

  """
  Open the merge request if it is closed.
  """
  OPEN
}

"""
A user participating in a merge request.
"""
type MergeRequestParticipant implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User email. Deprecated in 13.7: This was renamed.
  """
  email: String @deprecated(reason: "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.")

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  Location of the user.
  """
  location: String

  """
  Details of this user's interactions with the merge request.
  """
  mergeRequestInteraction: UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot
  and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Saved replies authored by the user. Will not return saved replies if `saved_replies` feature flag is disabled.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    search: String
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  To-do items of the user.
  """
  todos(
    """
    Action to be filtered.
    """
    action: [TodoActionEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of a group.
    """
    groupId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: [ID!]

    """
    State of the todo.
    """
    state: [TodoStateEnum!]

    """
    Type of the todo.
    """
    type: [TodoTargetEnum!]
  ): TodoConnection

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for MergeRequestParticipant.
"""
type MergeRequestParticipantConnection {
  """
  A list of edges.
  """
  edges: [MergeRequestParticipantEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequestParticipant]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MergeRequestParticipantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequestParticipant
}

"""
Check permissions for the current user on a merge request
"""
type MergeRequestPermissions {
  """
  Indicates the user can perform `admin_merge_request` on this resource
  """
  adminMergeRequest: Boolean!

  """
  Indicates the user can perform `can_merge` on this resource
  """
  canMerge: Boolean!

  """
  Indicates the user can perform `cherry_pick_on_current_merge_request` on this resource
  """
  cherryPickOnCurrentMergeRequest: Boolean!

  """
  Indicates the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  Indicates the user can perform `push_to_source_branch` on this resource
  """
  pushToSourceBranch: Boolean!

  """
  Indicates the user can perform `read_merge_request` on this resource
  """
  readMergeRequest: Boolean!

  """
  Indicates the user can perform `remove_source_branch` on this resource
  """
  removeSourceBranch: Boolean!

  """
  Indicates the user can perform `revert_on_current_merge_request` on this resource
  """
  revertOnCurrentMergeRequest: Boolean!

  """
  Indicates the user can perform `update_merge_request` on this resource
  """
  updateMergeRequest: Boolean!
}

"""
State of a review of a GitLab merge request.
"""
enum MergeRequestReviewState {
  """
  The merge request is attention_requested.
  """
  ATTENTION_REQUESTED

  """
  The merge request is reviewed.
  """
  REVIEWED

  """
  The merge request is unreviewed.
  """
  UNREVIEWED
}

"""
A user assigned to a merge request as a reviewer.
"""
type MergeRequestReviewer implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User email. Deprecated in 13.7: This was renamed.
  """
  email: String @deprecated(reason: "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.")

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  Location of the user.
  """
  location: String

  """
  Details of this user's interactions with the merge request.
  """
  mergeRequestInteraction: UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot
  and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Saved replies authored by the user. Will not return saved replies if `saved_replies` feature flag is disabled.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    search: String
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  To-do items of the user.
  """
  todos(
    """
    Action to be filtered.
    """
    action: [TodoActionEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of a group.
    """
    groupId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: [ID!]

    """
    State of the todo.
    """
    state: [TodoStateEnum!]

    """
    Type of the todo.
    """
    type: [TodoTargetEnum!]
  ): TodoConnection

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for MergeRequestReviewer.
"""
type MergeRequestReviewerConnection {
  """
  A list of edges.
  """
  edges: [MergeRequestReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequestReviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MergeRequestReviewerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequestReviewer
}

"""
Autogenerated input type of MergeRequestReviewerRereview
"""
input MergeRequestReviewerRereviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  User ID for the user that has been requested for a new review.
  """
  userId: UserID!
}

"""
Autogenerated return type of MergeRequestReviewerRereview
"""
type MergeRequestReviewerRereviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetAssignees
"""
input MergeRequestSetAssigneesInput {
  """
  Usernames to assign to the resource. Replaces existing assignees by default.
  """
  assigneeUsernames: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Operation to perform. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode = REPLACE

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of MergeRequestSetAssignees
"""
type MergeRequestSetAssigneesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetDraft
"""
input MergeRequestSetDraftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not to set the merge request as a draft.
  """
  draft: Boolean!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of MergeRequestSetDraft
"""
type MergeRequestSetDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetLabels
"""
input MergeRequestSetLabelsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Label IDs to set. Replaces existing labels by default.
  """
  labelIds: [LabelID!]!

  """
  Changes the operation mode. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of MergeRequestSetLabels
"""
type MergeRequestSetLabelsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetLocked
"""
input MergeRequestSetLockedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Whether or not to lock the merge request.
  """
  locked: Boolean!

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of MergeRequestSetLocked
"""
type MergeRequestSetLockedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetMilestone
"""
input MergeRequestSetMilestoneInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Milestone to assign to the merge request.
  """
  milestoneId: MilestoneID

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of MergeRequestSetMilestone
"""
type MergeRequestSetMilestonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetSubscription
"""
input MergeRequestSetSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  Desired state of the subscription.
  """
  subscribedState: Boolean!
}

"""
Autogenerated return type of MergeRequestSetSubscription
"""
type MergeRequestSetSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Values for sorting merge requests
"""
enum MergeRequestSort {
  """
  Closed time by ascending order.
  """
  CLOSED_AT_ASC

  """
  Closed time by descending order.
  """
  CLOSED_AT_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Label priority by ascending order.
  """
  LABEL_PRIORITY_ASC

  """
  Label priority by descending order.
  """
  LABEL_PRIORITY_DESC

  """
  Merge time by ascending order.
  """
  MERGED_AT_ASC

  """
  Merge time by descending order.
  """
  MERGED_AT_DESC

  """
  Milestone due date by ascending order.
  """
  MILESTONE_DUE_ASC

  """
  Milestone due date by descending order.
  """
  MILESTONE_DUE_DESC

  """
  Priority by ascending order.
  """
  PRIORITY_ASC

  """
  Priority by descending order.
  """
  PRIORITY_DESC

  """
  Title by ascending order.
  """
  TITLE_ASC

  """
  Title by descending order.
  """
  TITLE_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Created at ascending order.
  """
  created_asc @deprecated(reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5.")

  """
  Created at descending order.
  """
  created_desc @deprecated(reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5.")

  """
  Updated at ascending order.
  """
  updated_asc @deprecated(reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5.")

  """
  Updated at descending order.
  """
  updated_desc @deprecated(reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5.")
}

"""
State of a GitLab merge request
"""
enum MergeRequestState {
  """
  All available.
  """
  all

  """
  In closed state.
  """
  closed

  """
  Discussion has been locked.
  """
  locked

  """
  Merge request has been merged.
  """
  merged

  """
  In open state.
  """
  opened
}

"""
Autogenerated input type of MergeRequestUpdate
"""
input MergeRequestUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of the merge request (Markdown rendered as HTML for caching).
  """
  description: String

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  Action to perform to change the state.
  """
  state: MergeRequestNewState

  """
  Target branch of the merge request.
  """
  targetBranch: String

  """
  Title of the merge request.
  """
  title: String
}

"""
Autogenerated return type of MergeRequestUpdate
"""
type MergeRequestUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

input MergeRequestsResolverNegatedParams {
  """
  Array of label names. All resolved merge requests will not have these labels.
  """
  labels: [String!]

  """
  Title of the milestone.
  """
  milestoneTitle: String
}

"""
Representation of whether a GitLab merge request can be merged.
"""
enum MergeStatus {
  """
  There are conflicts between the source and target branches.
  """
  CANNOT_BE_MERGED

  """
  Currently unchecked. The previous state was `CANNOT_BE_MERGED`.
  """
  CANNOT_BE_MERGED_RECHECK

  """
  There are no conflicts between the source and target branches.
  """
  CAN_BE_MERGED

  """
  Currently checking for mergeability.
  """
  CHECKING

  """
  Merge status has not been checked.
  """
  UNCHECKED
}

enum MergeStrategyEnum {
  """
  Use the merge_when_pipeline_succeeds merge strategy.
  """
  MERGE_WHEN_PIPELINE_SUCCEEDS
}

type Metadata {
  """
  Metadata about KAS.
  """
  kas: Kas!

  """
  Revision.
  """
  revision: String!

  """
  Version.
  """
  version: String!
}

type MetricsDashboard {
  """
  Annotations added to the dashboard.
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Timestamp marking date and time from which annotations need to be fetched.
    """
    from: Time!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Timestamp marking date and time to which annotations need to be fetched.
    """
    to: Time
  ): MetricsDashboardAnnotationConnection

  """
  Path to a file with the dashboard definition.
  """
  path: String

  """
  Dashboard schema validation warnings.
  """
  schemaValidationWarnings: [String!]
}

type MetricsDashboardAnnotation {
  """
  Description of the annotation.
  """
  description: String

  """
  Timestamp marking end of annotated time span.
  """
  endingAt: Time

  """
  ID of the annotation.
  """
  id: ID!

  """
  ID of a dashboard panel to which the annotation should be scoped.
  """
  panelId: String

  """
  Timestamp marking start of annotated time span.
  """
  startingAt: Time
}

"""
The connection type for MetricsDashboardAnnotation.
"""
type MetricsDashboardAnnotationConnection {
  """
  A list of edges.
  """
  edges: [MetricsDashboardAnnotationEdge]

  """
  A list of nodes.
  """
  nodes: [MetricsDashboardAnnotation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MetricsDashboardAnnotationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MetricsDashboardAnnotation
}

"""
A `MetricsDashboardAnnotationID` is a global ID. It is encoded as a string.

An example `MetricsDashboardAnnotationID` is: `"gid://gitlab/Metrics::Dashboard::Annotation/1"`.
"""
scalar MetricsDashboardAnnotationID

"""
Represents a milestone
"""
type Milestone {
  """
  Timestamp of milestone creation.
  """
  createdAt: Time!

  """
  Description of the milestone.
  """
  description: String

  """
  Timestamp of the milestone due date.
  """
  dueDate: Time

  """
  Expired state of the milestone (a milestone is expired when the due date is
  past the current date). Defaults to `false` when due date has not been set.
  """
  expired: Boolean!

  """
  Indicates if milestone is at group level.
  """
  groupMilestone: Boolean!

  """
  ID of the milestone.
  """
  id: ID!

  """
  Internal ID of the milestone.
  """
  iid: ID!

  """
  Indicates if milestone is at project level.
  """
  projectMilestone: Boolean!

  """
  Releases associated with this milestone.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReleaseConnection

  """
  Timestamp of the milestone start date.
  """
  startDate: Time

  """
  State of the milestone.
  """
  state: MilestoneStateEnum!

  """
  Milestone statistics.
  """
  stats: MilestoneStats

  """
  Indicates if milestone is at subgroup level.
  """
  subgroupMilestone: Boolean!

  """
  Title of the milestone.
  """
  title: String!

  """
  Timestamp of last milestone update.
  """
  updatedAt: Time!

  """
  Web path of the milestone.
  """
  webPath: String!
}

"""
The connection type for Milestone.
"""
type MilestoneConnection {
  """
  A list of edges.
  """
  edges: [MilestoneEdge]

  """
  A list of nodes.
  """
  nodes: [Milestone]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MilestoneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Milestone
}

"""
A `MilestoneID` is a global ID. It is encoded as a string.

An example `MilestoneID` is: `"gid://gitlab/Milestone/1"`.
"""
scalar MilestoneID

"""
Values for sorting milestones
"""
enum MilestoneSort {
  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Milestone due date by ascending order.
  """
  DUE_DATE_ASC

  """
  Milestone due date by descending order.
  """
  DUE_DATE_DESC

  """
  Group milestones in this order: non-expired milestones with due dates,
  non-expired milestones without due dates and expired milestones then sort by
  due date in ascending order.
  """
  EXPIRED_LAST_DUE_DATE_ASC

  """
  Group milestones in this order: non-expired milestones with due dates,
  non-expired milestones without due dates and expired milestones then sort by
  due date in descending order.
  """
  EXPIRED_LAST_DUE_DATE_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Created at ascending order.
  """
  created_asc @deprecated(reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5.")

  """
  Created at descending order.
  """
  created_desc @deprecated(reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5.")

  """
  Updated at ascending order.
  """
  updated_asc @deprecated(reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5.")

  """
  Updated at descending order.
  """
  updated_desc @deprecated(reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5.")
}

"""
Current state of milestone
"""
enum MilestoneStateEnum {
  """
  Milestone is currently active.
  """
  active

  """
  Milestone is closed.
  """
  closed
}

"""
Contains statistics about a milestone
"""
type MilestoneStats {
  """
  Number of closed issues associated with the milestone.
  """
  closedIssuesCount: Int

  """
  Total number of issues associated with the milestone.
  """
  totalIssuesCount: Int
}

"""
Milestone ID wildcard values
"""
enum MilestoneWildcardId {
  """
  Milestone is assigned.
  """
  ANY

  """
  No milestone is assigned.
  """
  NONE

  """
  Milestone assigned is open and started (start date <= today).
  """
  STARTED

  """
  Milestone assigned is due in the future (due date > today).
  """
  UPCOMING
}

type Mutation {
  adminSidekiqQueuesDeleteJobs(
    """
    Parameters for AdminSidekiqQueuesDeleteJobs
    """
    input: AdminSidekiqQueuesDeleteJobsInput!
  ): AdminSidekiqQueuesDeleteJobsPayload
  alertSetAssignees(
    """
    Parameters for AlertSetAssignees
    """
    input: AlertSetAssigneesInput!
  ): AlertSetAssigneesPayload
  alertTodoCreate(
    """
    Parameters for AlertTodoCreate
    """
    input: AlertTodoCreateInput!
  ): AlertTodoCreatePayload
  awardEmojiAdd(
    """
    Parameters for AwardEmojiAdd
    """
    input: AwardEmojiAddInput!
  ): AwardEmojiAddPayload
  awardEmojiRemove(
    """
    Parameters for AwardEmojiRemove
    """
    input: AwardEmojiRemoveInput!
  ): AwardEmojiRemovePayload
  awardEmojiToggle(
    """
    Parameters for AwardEmojiToggle
    """
    input: AwardEmojiToggleInput!
  ): AwardEmojiTogglePayload
  boardListCreate(
    """
    Parameters for BoardListCreate
    """
    input: BoardListCreateInput!
  ): BoardListCreatePayload
  bulkRunnerDelete(
    """
    Parameters for BulkRunnerDelete
    """
    input: BulkRunnerDeleteInput!
  ): BulkRunnerDeletePayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.3.")
  ciCdSettingsUpdate(
    """
    Parameters for CiCdSettingsUpdate
    """
    input: CiCdSettingsUpdateInput!
  ): CiCdSettingsUpdatePayload @deprecated(reason: "This was renamed. Please use `ProjectCiCdSettingsUpdate`. Deprecated in 15.0.")
  ciJobTokenScopeAddProject(
    """
    Parameters for CiJobTokenScopeAddProject
    """
    input: CiJobTokenScopeAddProjectInput!
  ): CiJobTokenScopeAddProjectPayload
  ciJobTokenScopeRemoveProject(
    """
    Parameters for CiJobTokenScopeRemoveProject
    """
    input: CiJobTokenScopeRemoveProjectInput!
  ): CiJobTokenScopeRemoveProjectPayload
  clusterAgentDelete(
    """
    Parameters for ClusterAgentDelete
    """
    input: ClusterAgentDeleteInput!
  ): ClusterAgentDeletePayload
  clusterAgentTokenCreate(
    """
    Parameters for ClusterAgentTokenCreate
    """
    input: ClusterAgentTokenCreateInput!
  ): ClusterAgentTokenCreatePayload
  clusterAgentTokenRevoke(
    """
    Parameters for ClusterAgentTokenRevoke
    """
    input: ClusterAgentTokenRevokeInput!
  ): ClusterAgentTokenRevokePayload
  commitCreate(
    """
    Parameters for CommitCreate
    """
    input: CommitCreateInput!
  ): CommitCreatePayload

  """
  Configure SAST for a project by enabling SAST in a new or modified
  `.gitlab-ci.yml` file in a new branch. The new branch and a URL to
  create a Merge Request are a part of the response.
  """
  configureSast(
    """
    Parameters for ConfigureSast
    """
    input: ConfigureSastInput!
  ): ConfigureSastPayload

  """
  Enable SAST IaC for a project in a new or
  modified `.gitlab-ci.yml` file in a new branch. The new
  branch and a URL to create a merge request are a part of the
  response.
  """
  configureSastIac(
    """
    Parameters for ConfigureSastIac
    """
    input: ConfigureSastIacInput!
  ): ConfigureSastIacPayload

  """
  Configure Secret Detection for a project by enabling Secret Detection
  in a new or modified `.gitlab-ci.yml` file in a new branch. The new
  branch and a URL to create a Merge Request are a part of the
  response.
  """
  configureSecretDetection(
    """
    Parameters for ConfigureSecretDetection
    """
    input: ConfigureSecretDetectionInput!
  ): ConfigureSecretDetectionPayload
  createAlertIssue(
    """
    Parameters for CreateAlertIssue
    """
    input: CreateAlertIssueInput!
  ): CreateAlertIssuePayload
  createAnnotation(
    """
    Parameters for CreateAnnotation
    """
    input: CreateAnnotationInput!
  ): CreateAnnotationPayload
  createBoard(
    """
    Parameters for CreateBoard
    """
    input: CreateBoardInput!
  ): CreateBoardPayload
  createBranch(
    """
    Parameters for CreateBranch
    """
    input: CreateBranchInput!
  ): CreateBranchPayload
  createClusterAgent(
    """
    Parameters for CreateClusterAgent
    """
    input: CreateClusterAgentInput!
  ): CreateClusterAgentPayload

  """
   Available only when feature flag `custom_emoji` is enabled. This flag is
  disabled by default, because the feature is experimental and is subject to
  change without notice.
  """
  createCustomEmoji(
    """
    Parameters for CreateCustomEmoji
    """
    input: CreateCustomEmojiInput!
  ): CreateCustomEmojiPayload
  createDiffNote(
    """
    Parameters for CreateDiffNote
    """
    input: CreateDiffNoteInput!
  ): CreateDiffNotePayload
  createImageDiffNote(
    """
    Parameters for CreateImageDiffNote
    """
    input: CreateImageDiffNoteInput!
  ): CreateImageDiffNotePayload
  createIssue(
    """
    Parameters for CreateIssue
    """
    input: CreateIssueInput!
  ): CreateIssuePayload

  """
  Creates a Note.
  If the body of the Note contains only quick actions,
  the Note will be destroyed during an update, and no Note will be
  returned.
  """
  createNote(
    """
    Parameters for CreateNote
    """
    input: CreateNoteInput!
  ): CreateNotePayload
  createSnippet(
    """
    Parameters for CreateSnippet
    """
    input: CreateSnippetInput!
  ): CreateSnippetPayload
  customerRelationsContactCreate(
    """
    Parameters for CustomerRelationsContactCreate
    """
    input: CustomerRelationsContactCreateInput!
  ): CustomerRelationsContactCreatePayload
  customerRelationsContactUpdate(
    """
    Parameters for CustomerRelationsContactUpdate
    """
    input: CustomerRelationsContactUpdateInput!
  ): CustomerRelationsContactUpdatePayload
  customerRelationsOrganizationCreate(
    """
    Parameters for CustomerRelationsOrganizationCreate
    """
    input: CustomerRelationsOrganizationCreateInput!
  ): CustomerRelationsOrganizationCreatePayload
  customerRelationsOrganizationUpdate(
    """
    Parameters for CustomerRelationsOrganizationUpdate
    """
    input: CustomerRelationsOrganizationUpdateInput!
  ): CustomerRelationsOrganizationUpdatePayload
  deleteAnnotation(
    """
    Parameters for DeleteAnnotation
    """
    input: DeleteAnnotationInput!
  ): DeleteAnnotationPayload
  designManagementDelete(
    """
    Parameters for DesignManagementDelete
    """
    input: DesignManagementDeleteInput!
  ): DesignManagementDeletePayload
  designManagementMove(
    """
    Parameters for DesignManagementMove
    """
    input: DesignManagementMoveInput!
  ): DesignManagementMovePayload
  designManagementUpload(
    """
    Parameters for DesignManagementUpload
    """
    input: DesignManagementUploadInput!
  ): DesignManagementUploadPayload
  destroyBoard(
    """
    Parameters for DestroyBoard
    """
    input: DestroyBoardInput!
  ): DestroyBoardPayload
  destroyBoardList(
    """
    Parameters for DestroyBoardList
    """
    input: DestroyBoardListInput!
  ): DestroyBoardListPayload
  destroyContainerRepository(
    """
    Parameters for DestroyContainerRepository
    """
    input: DestroyContainerRepositoryInput!
  ): DestroyContainerRepositoryPayload
  destroyContainerRepositoryTags(
    """
    Parameters for DestroyContainerRepositoryTags
    """
    input: DestroyContainerRepositoryTagsInput!
  ): DestroyContainerRepositoryTagsPayload

  """
   Available only when feature flag `custom_emoji` is enabled. This flag is
  disabled by default, because the feature is experimental and is subject to
  change without notice.
  """
  destroyCustomEmoji(
    """
    Parameters for DestroyCustomEmoji
    """
    input: DestroyCustomEmojiInput!
  ): DestroyCustomEmojiPayload
  destroyNote(
    """
    Parameters for DestroyNote
    """
    input: DestroyNoteInput!
  ): DestroyNotePayload
  destroyPackage(
    """
    Parameters for DestroyPackage
    """
    input: DestroyPackageInput!
  ): DestroyPackagePayload
  destroyPackageFile(
    """
    Parameters for DestroyPackageFile
    """
    input: DestroyPackageFileInput!
  ): DestroyPackageFilePayload
  destroyPackageFiles(
    """
    Parameters for DestroyPackageFiles
    """
    input: DestroyPackageFilesInput!
  ): DestroyPackageFilesPayload
  destroySnippet(
    """
    Parameters for DestroySnippet
    """
    input: DestroySnippetInput!
  ): DestroySnippetPayload

  """
  Toggles the resolved state of a discussion
  """
  discussionToggleResolve(
    """
    Parameters for DiscussionToggleResolve
    """
    input: DiscussionToggleResolveInput!
  ): DiscussionToggleResolvePayload

  """
  A mutation that does not perform any changes.

  This is expected to be used for testing of endpoints, to verify
  that a user has mutation access.
  """
  echoCreate(
    """
    Parameters for EchoCreate
    """
    input: EchoCreateInput!
  ): EchoCreatePayload

  """
  **Deprecated** This endpoint is planned to be removed along with
  certificate-based clusters. [See this
  epic](https://gitlab.com/groups/gitlab-org/configure/-/epics/8) for more information.
  """
  environmentsCanaryIngressUpdate(
    """
    Parameters for EnvironmentsCanaryIngressUpdate
    """
    input: EnvironmentsCanaryIngressUpdateInput!
  ): EnvironmentsCanaryIngressUpdatePayload
  groupUpdate(
    """
    Parameters for GroupUpdate
    """
    input: GroupUpdateInput!
  ): GroupUpdatePayload
  httpIntegrationCreate(
    """
    Parameters for HttpIntegrationCreate
    """
    input: HttpIntegrationCreateInput!
  ): HttpIntegrationCreatePayload
  httpIntegrationDestroy(
    """
    Parameters for HttpIntegrationDestroy
    """
    input: HttpIntegrationDestroyInput!
  ): HttpIntegrationDestroyPayload
  httpIntegrationResetToken(
    """
    Parameters for HttpIntegrationResetToken
    """
    input: HttpIntegrationResetTokenInput!
  ): HttpIntegrationResetTokenPayload
  httpIntegrationUpdate(
    """
    Parameters for HttpIntegrationUpdate
    """
    input: HttpIntegrationUpdateInput!
  ): HttpIntegrationUpdatePayload
  issueMove(
    """
    Parameters for IssueMove
    """
    input: IssueMoveInput!
  ): IssueMovePayload
  issueMoveList(
    """
    Parameters for IssueMoveList
    """
    input: IssueMoveListInput!
  ): IssueMoveListPayload
  issueSetAssignees(
    """
    Parameters for IssueSetAssignees
    """
    input: IssueSetAssigneesInput!
  ): IssueSetAssigneesPayload
  issueSetConfidential(
    """
    Parameters for IssueSetConfidential
    """
    input: IssueSetConfidentialInput!
  ): IssueSetConfidentialPayload
  issueSetCrmContacts(
    """
    Parameters for IssueSetCrmContacts
    """
    input: IssueSetCrmContactsInput!
  ): IssueSetCrmContactsPayload
  issueSetDueDate(
    """
    Parameters for IssueSetDueDate
    """
    input: IssueSetDueDateInput!
  ): IssueSetDueDatePayload
  issueSetEscalationStatus(
    """
    Parameters for IssueSetEscalationStatus
    """
    input: IssueSetEscalationStatusInput!
  ): IssueSetEscalationStatusPayload
  issueSetLocked(
    """
    Parameters for IssueSetLocked
    """
    input: IssueSetLockedInput!
  ): IssueSetLockedPayload
  issueSetSeverity(
    """
    Parameters for IssueSetSeverity
    """
    input: IssueSetSeverityInput!
  ): IssueSetSeverityPayload
  issueSetSubscription(
    """
    Parameters for IssueSetSubscription
    """
    input: IssueSetSubscriptionInput!
  ): IssueSetSubscriptionPayload
  jiraImportStart(
    """
    Parameters for JiraImportStart
    """
    input: JiraImportStartInput!
  ): JiraImportStartPayload
  jiraImportUsers(
    """
    Parameters for JiraImportUsers
    """
    input: JiraImportUsersInput!
  ): JiraImportUsersPayload
  jobCancel(
    """
    Parameters for JobCancel
    """
    input: JobCancelInput!
  ): JobCancelPayload
  jobPlay(
    """
    Parameters for JobPlay
    """
    input: JobPlayInput!
  ): JobPlayPayload
  jobRetry(
    """
    Parameters for JobRetry
    """
    input: JobRetryInput!
  ): JobRetryPayload
  jobUnschedule(
    """
    Parameters for JobUnschedule
    """
    input: JobUnscheduleInput!
  ): JobUnschedulePayload
  labelCreate(
    """
    Parameters for LabelCreate
    """
    input: LabelCreateInput!
  ): LabelCreatePayload
  markAsSpamSnippet(
    """
    Parameters for MarkAsSpamSnippet
    """
    input: MarkAsSpamSnippetInput!
  ): MarkAsSpamSnippetPayload

  """
  Accepts a merge request.
  When accepted, the source branch will be merged into the target branch, either
  immediately if possible, or using one of the automatic merge strategies.
  """
  mergeRequestAccept(
    """
    Parameters for MergeRequestAccept
    """
    input: MergeRequestAcceptInput!
  ): MergeRequestAcceptPayload
  mergeRequestCreate(
    """
    Parameters for MergeRequestCreate
    """
    input: MergeRequestCreateInput!
  ): MergeRequestCreatePayload
  mergeRequestReviewerRereview(
    """
    Parameters for MergeRequestReviewerRereview
    """
    input: MergeRequestReviewerRereviewInput!
  ): MergeRequestReviewerRereviewPayload
  mergeRequestSetAssignees(
    """
    Parameters for MergeRequestSetAssignees
    """
    input: MergeRequestSetAssigneesInput!
  ): MergeRequestSetAssigneesPayload
  mergeRequestSetDraft(
    """
    Parameters for MergeRequestSetDraft
    """
    input: MergeRequestSetDraftInput!
  ): MergeRequestSetDraftPayload
  mergeRequestSetLabels(
    """
    Parameters for MergeRequestSetLabels
    """
    input: MergeRequestSetLabelsInput!
  ): MergeRequestSetLabelsPayload
  mergeRequestSetLocked(
    """
    Parameters for MergeRequestSetLocked
    """
    input: MergeRequestSetLockedInput!
  ): MergeRequestSetLockedPayload
  mergeRequestSetMilestone(
    """
    Parameters for MergeRequestSetMilestone
    """
    input: MergeRequestSetMilestoneInput!
  ): MergeRequestSetMilestonePayload
  mergeRequestSetSubscription(
    """
    Parameters for MergeRequestSetSubscription
    """
    input: MergeRequestSetSubscriptionInput!
  ): MergeRequestSetSubscriptionPayload

  """
  Update attributes of a merge request
  """
  mergeRequestUpdate(
    """
    Parameters for MergeRequestUpdate
    """
    input: MergeRequestUpdateInput!
  ): MergeRequestUpdatePayload
  pagesMarkOnboardingComplete(
    """
    Parameters for PagesMarkOnboardingComplete
    """
    input: PagesMarkOnboardingCompleteInput!
  ): PagesMarkOnboardingCompletePayload
  pipelineCancel(
    """
    Parameters for PipelineCancel
    """
    input: PipelineCancelInput!
  ): PipelineCancelPayload
  pipelineDestroy(
    """
    Parameters for PipelineDestroy
    """
    input: PipelineDestroyInput!
  ): PipelineDestroyPayload
  pipelineRetry(
    """
    Parameters for PipelineRetry
    """
    input: PipelineRetryInput!
  ): PipelineRetryPayload
  projectCiCdSettingsUpdate(
    """
    Parameters for ProjectCiCdSettingsUpdate
    """
    input: ProjectCiCdSettingsUpdateInput!
  ): ProjectCiCdSettingsUpdatePayload
  prometheusIntegrationCreate(
    """
    Parameters for PrometheusIntegrationCreate
    """
    input: PrometheusIntegrationCreateInput!
  ): PrometheusIntegrationCreatePayload
  prometheusIntegrationResetToken(
    """
    Parameters for PrometheusIntegrationResetToken
    """
    input: PrometheusIntegrationResetTokenInput!
  ): PrometheusIntegrationResetTokenPayload
  prometheusIntegrationUpdate(
    """
    Parameters for PrometheusIntegrationUpdate
    """
    input: PrometheusIntegrationUpdateInput!
  ): PrometheusIntegrationUpdatePayload
  releaseAssetLinkCreate(
    """
    Parameters for ReleaseAssetLinkCreate
    """
    input: ReleaseAssetLinkCreateInput!
  ): ReleaseAssetLinkCreatePayload
  releaseAssetLinkDelete(
    """
    Parameters for ReleaseAssetLinkDelete
    """
    input: ReleaseAssetLinkDeleteInput!
  ): ReleaseAssetLinkDeletePayload
  releaseAssetLinkUpdate(
    """
    Parameters for ReleaseAssetLinkUpdate
    """
    input: ReleaseAssetLinkUpdateInput!
  ): ReleaseAssetLinkUpdatePayload
  releaseCreate(
    """
    Parameters for ReleaseCreate
    """
    input: ReleaseCreateInput!
  ): ReleaseCreatePayload
  releaseDelete(
    """
    Parameters for ReleaseDelete
    """
    input: ReleaseDeleteInput!
  ): ReleaseDeletePayload
  releaseUpdate(
    """
    Parameters for ReleaseUpdate
    """
    input: ReleaseUpdateInput!
  ): ReleaseUpdatePayload

  """
  Repositions a DiffNote on an image (a `Note` where the `position.positionType` is `"image"`)
  """
  repositionImageDiffNote(
    """
    Parameters for RepositionImageDiffNote
    """
    input: RepositionImageDiffNoteInput!
  ): RepositionImageDiffNotePayload
  runnerDelete(
    """
    Parameters for RunnerDelete
    """
    input: RunnerDeleteInput!
  ): RunnerDeletePayload
  runnerUpdate(
    """
    Parameters for RunnerUpdate
    """
    input: RunnerUpdateInput!
  ): RunnerUpdatePayload
  runnersRegistrationTokenReset(
    """
    Parameters for RunnersRegistrationTokenReset
    """
    input: RunnersRegistrationTokenResetInput!
  ): RunnersRegistrationTokenResetPayload
  savedReplyCreate(
    """
    Parameters for SavedReplyCreate
    """
    input: SavedReplyCreateInput!
  ): SavedReplyCreatePayload
  savedReplyDestroy(
    """
    Parameters for SavedReplyDestroy
    """
    input: SavedReplyDestroyInput!
  ): SavedReplyDestroyPayload
  savedReplyUpdate(
    """
    Parameters for SavedReplyUpdate
    """
    input: SavedReplyUpdateInput!
  ): SavedReplyUpdatePayload
  terraformStateDelete(
    """
    Parameters for TerraformStateDelete
    """
    input: TerraformStateDeleteInput!
  ): TerraformStateDeletePayload
  terraformStateLock(
    """
    Parameters for TerraformStateLock
    """
    input: TerraformStateLockInput!
  ): TerraformStateLockPayload
  terraformStateUnlock(
    """
    Parameters for TerraformStateUnlock
    """
    input: TerraformStateUnlockInput!
  ): TerraformStateUnlockPayload
  timelineEventCreate(
    """
    Parameters for TimelineEventCreate
    """
    input: TimelineEventCreateInput!
  ): TimelineEventCreatePayload
  timelineEventDestroy(
    """
    Parameters for TimelineEventDestroy
    """
    input: TimelineEventDestroyInput!
  ): TimelineEventDestroyPayload
  timelineEventPromoteFromNote(
    """
    Parameters for TimelineEventPromoteFromNote
    """
    input: TimelineEventPromoteFromNoteInput!
  ): TimelineEventPromoteFromNotePayload
  timelineEventUpdate(
    """
    Parameters for TimelineEventUpdate
    """
    input: TimelineEventUpdateInput!
  ): TimelineEventUpdatePayload
  timelogCreate(
    """
    Parameters for TimelogCreate
    """
    input: TimelogCreateInput!
  ): TimelogCreatePayload
  timelogDelete(
    """
    Parameters for TimelogDelete
    """
    input: TimelogDeleteInput!
  ): TimelogDeletePayload
  todoCreate(
    """
    Parameters for TodoCreate
    """
    input: TodoCreateInput!
  ): TodoCreatePayload
  todoMarkDone(
    """
    Parameters for TodoMarkDone
    """
    input: TodoMarkDoneInput!
  ): TodoMarkDonePayload
  todoRestore(
    """
    Parameters for TodoRestore
    """
    input: TodoRestoreInput!
  ): TodoRestorePayload
  todoRestoreMany(
    """
    Parameters for TodoRestoreMany
    """
    input: TodoRestoreManyInput!
  ): TodoRestoreManyPayload
  todosMarkAllDone(
    """
    Parameters for TodosMarkAllDone
    """
    input: TodosMarkAllDoneInput!
  ): TodosMarkAllDonePayload
  updateAlertStatus(
    """
    Parameters for UpdateAlertStatus
    """
    input: UpdateAlertStatusInput!
  ): UpdateAlertStatusPayload
  updateBoard(
    """
    Parameters for UpdateBoard
    """
    input: UpdateBoardInput!
  ): UpdateBoardPayload
  updateBoardList(
    """
    Parameters for UpdateBoardList
    """
    input: UpdateBoardListInput!
  ): UpdateBoardListPayload
  updateContainerExpirationPolicy(
    """
    Parameters for UpdateContainerExpirationPolicy
    """
    input: UpdateContainerExpirationPolicyInput!
  ): UpdateContainerExpirationPolicyPayload
  updateDependencyProxyImageTtlGroupPolicy(
    """
    Parameters for UpdateDependencyProxyImageTtlGroupPolicy
    """
    input: UpdateDependencyProxyImageTtlGroupPolicyInput!
  ): UpdateDependencyProxyImageTtlGroupPolicyPayload
  updateDependencyProxySettings(
    """
    Parameters for UpdateDependencyProxySettings
    """
    input: UpdateDependencyProxySettingsInput!
  ): UpdateDependencyProxySettingsPayload

  """
  Updates a DiffNote on an image (a `Note` where the `position.positionType` is `"image"`).
  If the body of the Note contains only quick actions,
  the Note will be destroyed during an update, and no Note will be
  returned.
  """
  updateImageDiffNote(
    """
    Parameters for UpdateImageDiffNote
    """
    input: UpdateImageDiffNoteInput!
  ): UpdateImageDiffNotePayload
  updateIssue(
    """
    Parameters for UpdateIssue
    """
    input: UpdateIssueInput!
  ): UpdateIssuePayload
  updateNamespacePackageSettings(
    """
    Parameters for UpdateNamespacePackageSettings
    """
    input: UpdateNamespacePackageSettingsInput!
  ): UpdateNamespacePackageSettingsPayload

  """
  Updates a Note.
  If the body of the Note contains only quick actions,
  the Note will be destroyed during an update, and no Note will be
  returned.
  """
  updateNote(
    """
    Parameters for UpdateNote
    """
    input: UpdateNoteInput!
  ): UpdateNotePayload
  updatePackagesCleanupPolicy(
    """
    Parameters for UpdatePackagesCleanupPolicy
    """
    input: UpdatePackagesCleanupPolicyInput!
  ): UpdatePackagesCleanupPolicyPayload
  updateSnippet(
    """
    Parameters for UpdateSnippet
    """
    input: UpdateSnippetInput!
  ): UpdateSnippetPayload

  """
  Deletes an upload.
  """
  uploadDelete(
    """
    Parameters for UploadDelete
    """
    input: UploadDeleteInput!
  ): UploadDeletePayload
  userCalloutCreate(
    """
    Parameters for UserCalloutCreate
    """
    input: UserCalloutCreateInput!
  ): UserCalloutCreatePayload
  userPreferencesUpdate(
    """
    Parameters for UserPreferencesUpdate
    """
    input: UserPreferencesUpdateInput!
  ): UserPreferencesUpdatePayload

  """
  Creates a work item. Available only when feature flag `work_items` is enabled.
  Introduced in 15.1: This feature is in Alpha. It can be changed or removed at any time.
  """
  workItemCreate(
    """
    Parameters for WorkItemCreate
    """
    input: WorkItemCreateInput!
  ): WorkItemCreatePayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")

  """
  Creates a work item from a task in another work item's description. Available
  only when feature flag `work_items` is enabled. Introduced in 15.1: This
  feature is in Alpha. It can be changed or removed at any time.
  """
  workItemCreateFromTask(
    """
    Parameters for WorkItemCreateFromTask
    """
    input: WorkItemCreateFromTaskInput!
  ): WorkItemCreateFromTaskPayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")

  """
  Deletes a work item. Available only when feature flag `work_items` is enabled.
  Introduced in 15.1: This feature is in Alpha. It can be changed or removed at any time.
  """
  workItemDelete(
    """
    Parameters for WorkItemDelete
    """
    input: WorkItemDeleteInput!
  ): WorkItemDeletePayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")

  """
  Deletes a task in a work item's description. Available only when feature flag
  `work_items` is enabled. Introduced in 15.1: This feature is in Alpha. It can
  be changed or removed at any time.
  """
  workItemDeleteTask(
    """
    Parameters for WorkItemDeleteTask
    """
    input: WorkItemDeleteTaskInput!
  ): WorkItemDeleteTaskPayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")

  """
  Updates a work item by Global ID. Available only when feature flag
  `work_items` is enabled. Introduced in 15.1: This feature is in Alpha. It can
  be changed or removed at any time.
  """
  workItemUpdate(
    """
    Parameters for WorkItemUpdate
    """
    input: WorkItemUpdateInput!
  ): WorkItemUpdatePayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")

  """
  Updates a work item's task by Global ID. Available only when feature flag
  `work_items` is enabled. Introduced in 15.1: This feature is in Alpha. It can
  be changed or removed at any time.
  """
  workItemUpdateTask(
    """
    Parameters for WorkItemUpdateTask
    """
    input: WorkItemUpdateTaskInput!
  ): WorkItemUpdateTaskPayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")

  """
  Updates the attributes of a work item's widgets by global ID. Available only
  when feature flag `work_items` is enabled. Introduced in 15.1: This feature is
  in Alpha. It can be changed or removed at any time.
  """
  workItemUpdateWidgets(
    """
    Parameters for WorkItemUpdateWidgets
    """
    input: WorkItemUpdateWidgetsInput!
  ): WorkItemUpdateWidgetsPayload @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")
}

"""
Different toggles for changing mutator behavior
"""
enum MutationOperationMode {
  """
  Performs an append operation.
  """
  APPEND

  """
  Performs a removal operation.
  """
  REMOVE

  """
  Performs a replace operation.
  """
  REPLACE
}

type Namespace {
  """
  Indicates if the cross_project_pipeline feature is available for the namespace.
  """
  crossProjectPipelineAvailable: Boolean!

  """
  Description of the namespace.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  ID of the namespace.
  """
  id: ID!

  """
  Indicates if Large File Storage (LFS) is enabled for namespace.
  """
  lfsEnabled: Boolean

  """
  Name of the namespace.
  """
  name: String!

  """
  Package settings for the namespace.
  """
  packageSettings: PackageSettings

  """
  Path of the namespace.
  """
  path: String!

  """
  Projects within this namespace.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter projects by IDs.
    """
    ids: [ID!] = null

    """
    Include also subgroup projects.
    """
    includeSubgroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search project with most similar names or paths.
    """
    search: String = null

    """
    Sort projects by this criteria.
    """
    sort: NamespaceProjectSort = null
  ): ProjectConnection!

  """
  Indicates if users can request access to namespace.
  """
  requestAccessEnabled: Boolean

  """
  Aggregated storage statistics of the namespace. Only available for root namespaces.
  """
  rootStorageStatistics: RootStorageStatistics

  """
  Shared runners availability for the namespace and its descendants.
  """
  sharedRunnersSetting: SharedRunnersSetting

  """
  Timelog categories for the namespace. Available only when feature flag
  `timelog_categories` is enabled. This flag is disabled by default, because the
  feature is experimental and is subject to change without notice.
  """
  timelogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeTrackingTimelogCategoryConnection

  """
  Visibility of the namespace.
  """
  visibility: String
}

"""
Values for sorting projects
"""
enum NamespaceProjectSort {
  """
  Most similar to the search query.
  """
  SIMILARITY

  """
  Sort by storage size.
  """
  STORAGE
}

input NegatedBoardIssueInput {
  """
  Filter by assignee username.
  """
  assigneeUsername: [String]

  """
  Filter by author username.
  """
  authorUsername: String

  """
  List of IIDs of issues. For example `["1", "2"]`.
  """
  iids: [String!]

  """
  Filter by label name.
  """
  labelName: [String]

  """
  Filter by milestone title.
  """
  milestoneTitle: String

  """
  Filter by milestone ID wildcard.
  """
  milestoneWildcardId: MilestoneWildcardId

  """
  Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
  """
  myReactionEmoji: String

  """
  Filter by release tag.
  """
  releaseTag: String

  """
  Filter by the given issue types.
  """
  types: [IssueType!]
}

input NegatedIssueFilterInput {
  """
  ID of a user not assigned to the issues.
  """
  assigneeId: String

  """
  Usernames of users not assigned to the issue.
  """
  assigneeUsernames: [String!]

  """
  Username of a user who didn't author the issue.
  """
  authorUsername: String

  """
  List of IIDs of issues to exclude. For example, `[1, 2]`.
  """
  iids: [String!]

  """
  Labels not applied to this issue.
  """
  labelName: [String!]

  """
  Milestone not applied to this issue.
  """
  milestoneTitle: [String!]

  """
  Filter by negated milestone wildcard values.
  """
  milestoneWildcardId: NegatedMilestoneWildcardId

  """
  Filter by reaction emoji applied by the current user.
  """
  myReactionEmoji: String

  """
  Release tag not associated with the issue's milestone. Ignored when parent is a group.
  """
  releaseTag: [String!]

  """
  Filters out issues by the given issue types.
  """
  types: [IssueType!]
}

"""
Negated Milestone ID wildcard values
"""
enum NegatedMilestoneWildcardId {
  """
  Milestone assigned is open and yet to be started (start date > today).
  """
  STARTED

  """
  Milestone assigned is open but due in the past (due date <= today).
  """
  UPCOMING
}

type Note implements ResolvableInterface {
  """
  User who wrote this note.
  """
  author: UserCore!

  """
  Content of the note.
  """
  body: String!

  """
  The GitLab Flavored Markdown rendering of `note`
  """
  bodyHtml: String

  """
  Indicates if this note is confidential.
  """
  confidential: Boolean

  """
  Timestamp of the note creation.
  """
  createdAt: Time!

  """
  Discussion this note is a part of.
  """
  discussion: Discussion

  """
  ID of the note.
  """
  id: NoteID!

  """
  Position of this note on a diff.
  """
  position: DiffPosition

  """
  Project associated with the note.
  """
  project: Project

  """
  Indicates if the object can be resolved.
  """
  resolvable: Boolean!

  """
  Indicates if the object is resolved.
  """
  resolved: Boolean!

  """
  Timestamp of when the object was resolved.
  """
  resolvedAt: Time

  """
  User who resolved the object.
  """
  resolvedBy: UserCore

  """
  Indicates whether this note was created by the system or by a user.
  """
  system: Boolean!

  """
  Name of the icon corresponding to a system note.
  """
  systemNoteIconName: String

  """
  Timestamp of the note's last activity.
  """
  updatedAt: Time!

  """
  URL to view this Note in the Web UI.
  """
  url: String

  """
  Permissions for the current user on the resource
  """
  userPermissions: NotePermissions!
}

"""
The connection type for Note.
"""
type NoteConnection {
  """
  A list of edges.
  """
  edges: [NoteEdge]

  """
  A list of nodes.
  """
  nodes: [Note]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NoteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Note
}

"""
A `NoteID` is a global ID. It is encoded as a string.

An example `NoteID` is: `"gid://gitlab/Note/1"`.
"""
scalar NoteID

type NotePermissions {
  """
  Indicates the user can perform `admin_note` on this resource
  """
  adminNote: Boolean!

  """
  Indicates the user can perform `award_emoji` on this resource
  """
  awardEmoji: Boolean!

  """
  Indicates the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  Indicates the user can perform `read_note` on this resource
  """
  readNote: Boolean!

  """
  Indicates the user can perform `reposition_note` on this resource
  """
  repositionNote: Boolean!

  """
  Indicates the user can perform `resolve_note` on this resource
  """
  resolveNote: Boolean!
}

"""
A `NoteableID` is a global ID. It is encoded as a string.

An example `NoteableID` is: `"gid://gitlab/Noteable/1"`.
"""
scalar NoteableID

interface NoteableInterface {
  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  All notes on this noteable.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
}

"""
Represents an object that supports notes.
"""
union NoteableType = Design | Issue | MergeRequest

"""
Nuget dependency link metadata
"""
type NugetDependencyLinkMetadata {
  """
  ID of the metadatum.
  """
  id: PackagesNugetDependencyLinkMetadatumID!

  """
  Target framework of the dependency link package.
  """
  targetFramework: String!
}

"""
Nuget metadata
"""
type NugetMetadata {
  """
  Icon URL of the Nuget package.
  """
  iconUrl: String

  """
  ID of the metadatum.
  """
  id: PackagesNugetMetadatumID!

  """
  License URL of the Nuget package.
  """
  licenseUrl: String

  """
  Project URL of the Nuget package.
  """
  projectUrl: String
}

"""
Represents a package with pipelines in the Package Registry
"""
type Package {
  """
  Whether the user can destroy the package.
  """
  canDestroy: Boolean!

  """
  Date of creation.
  """
  createdAt: Time!

  """
  ID of the package.
  """
  id: PackagesPackageID!

  """
  Package metadata.
  """
  metadata: PackageMetadata

  """
  Name of the package.
  """
  name: String!

  """
  Package type.
  """
  packageType: PackageTypeEnum!

  """
                Pipelines that built the package. Max page size 20.
  """
  pipelines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineConnection

  """
  Project where the package is stored.
  """
  project: Project!

  """
  Package status.
  """
  status: PackageStatus!

  """
  Package tags.
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageTagConnection

  """
  Date of most recent update.
  """
  updatedAt: Time!

  """
  Version string.
  """
  version: String
}

"""
Represents a package in the Package Registry
"""
type PackageBase {
  """
  Whether the user can destroy the package.
  """
  canDestroy: Boolean!

  """
  Date of creation.
  """
  createdAt: Time!

  """
  ID of the package.
  """
  id: PackagesPackageID!

  """
  Package metadata.
  """
  metadata: PackageMetadata

  """
  Name of the package.
  """
  name: String!

  """
  Package type.
  """
  packageType: PackageTypeEnum!

  """
  Project where the package is stored.
  """
  project: Project!

  """
  Package status.
  """
  status: PackageStatus!

  """
  Package tags.
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageTagConnection

  """
  Date of most recent update.
  """
  updatedAt: Time!

  """
  Version string.
  """
  version: String
}

"""
The connection type for PackageBase.
"""
type PackageBaseConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [PackageBaseEdge]

  """
  A list of nodes.
  """
  nodes: [PackageBase]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PackageBaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageBase
}

"""
Represents a composer JSON file
"""
type PackageComposerJsonType {
  """
  License set in the Composer JSON file.
  """
  license: String

  """
  Name set in the Composer JSON file.
  """
  name: String

  """
  Type set in the Composer JSON file.
  """
  type: String

  """
  Version set in the Composer JSON file.
  """
  version: String
}

"""
The connection type for Package.
"""
type PackageConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [PackageEdge]

  """
  A list of nodes.
  """
  nodes: [Package]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents a package dependency.
"""
type PackageDependency {
  """
  ID of the dependency.
  """
  id: PackagesDependencyID!

  """
  Name of the dependency.
  """
  name: String!

  """
  Version pattern of the dependency.
  """
  versionPattern: String!
}

"""
Represents a package dependency link
"""
type PackageDependencyLink {
  """
  Dependency.
  """
  dependency: PackageDependency

  """
  Dependency type.
  """
  dependencyType: PackageDependencyType!

  """
  ID of the dependency link.
  """
  id: PackagesDependencyLinkID!

  """
  Dependency link metadata.
  """
  metadata: DependencyLinkMetadata
}

"""
The connection type for PackageDependencyLink.
"""
type PackageDependencyLinkConnection {
  """
  A list of edges.
  """
  edges: [PackageDependencyLinkEdge]

  """
  A list of nodes.
  """
  nodes: [PackageDependencyLink]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PackageDependencyLinkEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageDependencyLink
}

enum PackageDependencyType {
  """
  bundleDependencies dependency type
  """
  BUNDLE_DEPENDENCIES

  """
  dependencies dependency type
  """
  DEPENDENCIES

  """
  devDependencies dependency type
  """
  DEV_DEPENDENCIES

  """
  peerDependencies dependency type
  """
  PEER_DEPENDENCIES
}

"""
Represents a package details in the Package Registry
"""
type PackageDetailsType {
  """
  Whether the user can destroy the package.
  """
  canDestroy: Boolean!

  """
  Url of the Composer setup endpoint.
  """
  composerConfigRepositoryUrl: String

  """
  Url of the Composer endpoint.
  """
  composerUrl: String

  """
  Url of the Conan project endpoint.
  """
  conanUrl: String

  """
  Date of creation.
  """
  createdAt: Time!

  """
  Dependency link.
  """
  dependencyLinks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageDependencyLinkConnection

  """
  ID of the package.
  """
  id: PackagesPackageID!

  """
  Url of the Maven project endpoint.
  """
  mavenUrl: String

  """
  Package metadata.
  """
  metadata: PackageMetadata

  """
  Name of the package.
  """
  name: String!

  """
  Url of the NPM project endpoint.
  """
  npmUrl: String

  """
  Url of the Nuget project endpoint.
  """
  nugetUrl: String

  """
  Package files.
  """
  packageFiles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageFileConnection

  """
  Package type.
  """
  packageType: PackageTypeEnum!

  """
                Pipelines that built the package. Max page size 20.
  """
  pipelines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineConnection

  """
  Project where the package is stored.
  """
  project: Project!

  """
  Url of the PyPi project setup endpoint.
  """
  pypiSetupUrl: String

  """
  Url of the PyPi project endpoint.
  """
  pypiUrl: String

  """
  Package status.
  """
  status: PackageStatus!

  """
  Package tags.
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageTagConnection

  """
  Date of most recent update.
  """
  updatedAt: Time!

  """
  Version string.
  """
  version: String

  """
  Other versions of the package.
  """
  versions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PackageBaseConnection
}

"""
An edge in a connection.
"""
type PackageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Package
}

"""
Represents a package file
"""
type PackageFile {
  """
  Created date.
  """
  createdAt: Time!

  """
  Download path of the package file.
  """
  downloadPath: String!

  """
  Md5 of the package file.
  """
  fileMd5: String

  """
  File metadata.
  """
  fileMetadata: PackageFileMetadata

  """
  Name of the package file.
  """
  fileName: String!

  """
  Sha1 of the package file.
  """
  fileSha1: String

  """
  Sha256 of the package file.
  """
  fileSha256: String

  """
  ID of the file.
  """
  id: PackagesPackageFileID!

  """
  Size of the package file.
  """
  size: String!

  """
  Updated date.
  """
  updatedAt: Time!
}

"""
The connection type for PackageFile.
"""
type PackageFileConnection {
  """
  A list of edges.
  """
  edges: [PackageFileEdge]

  """
  A list of nodes.
  """
  nodes: [PackageFile]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PackageFileEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageFile
}

"""
Represents metadata associated with a Package file
"""
interface PackageFileMetadata {
  """
  Date of creation.
  """
  createdAt: Time!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
Values for sorting group packages
"""
enum PackageGroupSort {
  """
  Ordered by created_at in ascending order.
  """
  CREATED_ASC

  """
  Ordered by created_at in descending order.
  """
  CREATED_DESC

  """
  Ordered by name in ascending order.
  """
  NAME_ASC

  """
  Ordered by name in descending order.
  """
  NAME_DESC

  """
  Ordered by project path in ascending order.
  """
  PROJECT_PATH_ASC

  """
  Ordered by project path in descending order.
  """
  PROJECT_PATH_DESC

  """
  Ordered by type in ascending order.
  """
  TYPE_ASC

  """
  Ordered by type in descending order.
  """
  TYPE_DESC

  """
  Ordered by version in ascending order.
  """
  VERSION_ASC

  """
  Ordered by version in descending order.
  """
  VERSION_DESC
}

"""
Represents a Helm dependency
"""
type PackageHelmDependencyType {
  """
  Alias of the dependency.
  """
  alias: String

  """
  Condition of the dependency.
  """
  condition: String

  """
  Indicates the dependency is enabled.
  """
  enabled: Boolean

  """
  Import-values of the dependency.
  """
  importValues: [JSON!]

  """
  Name of the dependency.
  """
  name: String

  """
  Repository of the dependency.
  """
  repository: String

  """
  Tags of the dependency.
  """
  tags: [String!]

  """
  Version of the dependency.
  """
  version: String
}

"""
Represents a Helm maintainer
"""
type PackageHelmMaintainerType {
  """
  Email of the maintainer.
  """
  email: String

  """
  Name of the maintainer.
  """
  name: String

  """
  URL of the maintainer.
  """
  url: String
}

"""
Represents the contents of a Helm Chart.yml file
"""
type PackageHelmMetadataType {
  """
  Annotations for the chart.
  """
  annotations: JSON

  """
  API version of the chart.
  """
  apiVersion: String!

  """
  App version of the chart.
  """
  appVersion: String

  """
  Condition for the chart.
  """
  condition: String

  """
  Dependencies of the chart.
  """
  dependencies: [PackageHelmDependencyType!]

  """
  Indicates if the chart is deprecated.
  """
  deprecated: Boolean

  """
  Description of the chart.
  """
  description: String

  """
  URL of the home page.
  """
  home: String

  """
  URL to an SVG or PNG image for the chart.
  """
  icon: String

  """
  Keywords for the chart.
  """
  keywords: [String!]

  """
  Kubernetes versions for the chart.
  """
  kubeVersion: String

  """
  Maintainers of the chart.
  """
  maintainers: [PackageHelmMaintainerType!]

  """
  Name of the chart.
  """
  name: String!

  """
  URLs of the source code for the chart.
  """
  sources: [String!]

  """
  Tags for the chart.
  """
  tags: String

  """
  Type of the chart.
  """
  type: String

  """
  Version of the chart.
  """
  version: String!
}

"""
Represents metadata associated with a Package
"""
union PackageMetadata = ComposerMetadata | ConanMetadata | MavenMetadata | NugetMetadata | PypiMetadata

"""
Namespace-level Package Registry settings
"""
type PackageSettings {
  """
  When generic_duplicates_allowed is false, you can publish duplicate packages
  with names that match this regex. Otherwise, this setting has no effect.
  """
  genericDuplicateExceptionRegex: UntrustedRegexp

  """
  Indicates whether duplicate generic packages are allowed for this namespace.
  """
  genericDuplicatesAllowed: Boolean!

  """
  When maven_duplicates_allowed is false, you can publish duplicate packages
  with names that match this regex. Otherwise, this setting has no effect.
  """
  mavenDuplicateExceptionRegex: UntrustedRegexp

  """
  Indicates whether duplicate Maven packages are allowed for this namespace.
  """
  mavenDuplicatesAllowed: Boolean!
}

"""
Values for sorting package
"""
enum PackageSort {
  """
  Ordered by created_at in ascending order.
  """
  CREATED_ASC

  """
  Ordered by created_at in descending order.
  """
  CREATED_DESC

  """
  Ordered by name in ascending order.
  """
  NAME_ASC

  """
  Ordered by name in descending order.
  """
  NAME_DESC

  """
  Ordered by type in ascending order.
  """
  TYPE_ASC

  """
  Ordered by type in descending order.
  """
  TYPE_DESC

  """
  Ordered by version in ascending order.
  """
  VERSION_ASC

  """
  Ordered by version in descending order.
  """
  VERSION_DESC
}

enum PackageStatus {
  """
  Packages with a default status
  """
  DEFAULT

  """
  Packages with a error status
  """
  ERROR

  """
  Packages with a hidden status
  """
  HIDDEN

  """
  Packages with a pending_destruction status
  """
  PENDING_DESTRUCTION

  """
  Packages with a processing status
  """
  PROCESSING
}

"""
Represents a package tag
"""
type PackageTag {
  """
  Created date.
  """
  createdAt: Time!

  """
  ID of the tag.
  """
  id: ID!

  """
  Name of the tag.
  """
  name: String!

  """
  Updated date.
  """
  updatedAt: Time!
}

"""
The connection type for PackageTag.
"""
type PackageTagConnection {
  """
  A list of edges.
  """
  edges: [PackageTagEdge]

  """
  A list of nodes.
  """
  nodes: [PackageTag]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PackageTagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PackageTag
}

enum PackageTypeEnum {
  """
  Packages from the Composer package manager
  """
  COMPOSER

  """
  Packages from the Conan package manager
  """
  CONAN

  """
  Packages from the Debian package manager
  """
  DEBIAN

  """
  Packages from the Generic package manager
  """
  GENERIC

  """
  Packages from the Golang package manager
  """
  GOLANG

  """
  Packages from the Helm package manager
  """
  HELM

  """
  Packages from the Maven package manager
  """
  MAVEN

  """
  Packages from the npm package manager
  """
  NPM

  """
  Packages from the Nuget package manager
  """
  NUGET

  """
  Packages from the PyPI package manager
  """
  PYPI

  """
  Packages from the Rubygems package manager
  """
  RUBYGEMS

  """
  Packages from the Terraform Module package manager
  """
  TERRAFORM_MODULE
}

enum PackagesCleanupKeepDuplicatedPackageFilesEnum {
  """
  Value to keep all package files
  """
  ALL_PACKAGE_FILES

  """
  Value to keep 50 package files
  """
  FIFTY_PACKAGE_FILES

  """
  Value to keep 40 package files
  """
  FORTY_PACKAGE_FILES

  """
  Value to keep 1 package files
  """
  ONE_PACKAGE_FILE

  """
  Value to keep 10 package files
  """
  TEN_PACKAGE_FILES

  """
  Value to keep 30 package files
  """
  THIRTY_PACKAGE_FILES

  """
  Value to keep 20 package files
  """
  TWENTY_PACKAGE_FILES
}

"""
A packages cleanup policy designed to keep only packages and packages assets that matter most
"""
type PackagesCleanupPolicy {
  """
  Number of duplicated package files to retain.
  """
  keepNDuplicatedPackageFiles: PackagesCleanupKeepDuplicatedPackageFilesEnum!

  """
  Next time that this packages cleanup policy will be executed.
  """
  nextRunAt: Time
}

"""
A `PackagesConanFileMetadatumID` is a global ID. It is encoded as a string.

An example `PackagesConanFileMetadatumID` is: `"gid://gitlab/Packages::Conan::FileMetadatum/1"`.
"""
scalar PackagesConanFileMetadatumID

"""
A `PackagesConanMetadatumID` is a global ID. It is encoded as a string.

An example `PackagesConanMetadatumID` is: `"gid://gitlab/Packages::Conan::Metadatum/1"`.
"""
scalar PackagesConanMetadatumID

"""
A `PackagesDependencyID` is a global ID. It is encoded as a string.

An example `PackagesDependencyID` is: `"gid://gitlab/Packages::Dependency/1"`.
"""
scalar PackagesDependencyID

"""
A `PackagesDependencyLinkID` is a global ID. It is encoded as a string.

An example `PackagesDependencyLinkID` is: `"gid://gitlab/Packages::DependencyLink/1"`.
"""
scalar PackagesDependencyLinkID

"""
A `PackagesMavenMetadatumID` is a global ID. It is encoded as a string.

An example `PackagesMavenMetadatumID` is: `"gid://gitlab/Packages::Maven::Metadatum/1"`.
"""
scalar PackagesMavenMetadatumID

"""
A `PackagesNugetDependencyLinkMetadatumID` is a global ID. It is encoded as a string.

An example `PackagesNugetDependencyLinkMetadatumID` is: `"gid://gitlab/Packages::Nuget::DependencyLinkMetadatum/1"`.
"""
scalar PackagesNugetDependencyLinkMetadatumID

"""
A `PackagesNugetMetadatumID` is a global ID. It is encoded as a string.

An example `PackagesNugetMetadatumID` is: `"gid://gitlab/Packages::Nuget::Metadatum/1"`.
"""
scalar PackagesNugetMetadatumID

"""
A `PackagesPackageFileID` is a global ID. It is encoded as a string.

An example `PackagesPackageFileID` is: `"gid://gitlab/Packages::PackageFile/1"`.
"""
scalar PackagesPackageFileID

"""
A `PackagesPackageID` is a global ID. It is encoded as a string.

An example `PackagesPackageID` is: `"gid://gitlab/Packages::Package/1"`.
"""
scalar PackagesPackageID

"""
A `PackagesPypiMetadatumID` is a global ID. It is encoded as a string.

An example `PackagesPypiMetadatumID` is: `"gid://gitlab/Packages::Pypi::Metadatum/1"`.
"""
scalar PackagesPypiMetadatumID

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Autogenerated input type of PagesMarkOnboardingComplete
"""
input PagesMarkOnboardingCompleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project.
  """
  projectPath: ID!
}

"""
Autogenerated return type of PagesMarkOnboardingComplete
"""
type PagesMarkOnboardingCompletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Indicates the new onboarding_complete state of the project's Pages metadata.
  """
  onboardingComplete: Boolean!
}

type Pipeline {
  """
  Indicates if the pipeline is active.
  """
  active: Boolean!

  """
  Base SHA of the source branch.
  """
  beforeSha: String

  """
  Specifies if a pipeline can be canceled.
  """
  cancelable: Boolean!

  """
  Git commit of the pipeline.
  """
  commit: Commit

  """
  Path to the commit that triggered the pipeline.
  """
  commitPath: String

  """
  Timestamp of the pipeline's commit.
  """
  committedAt: Time

  """
  Indicates if a pipeline is complete.
  """
  complete: Boolean!

  """
  Configuration source of the pipeline (UNKNOWN_SOURCE, REPOSITORY_SOURCE,
  AUTO_DEVOPS_SOURCE, WEBIDE_SOURCE, REMOTE_SOURCE, EXTERNAL_PROJECT_SOURCE,
  BRIDGE_SOURCE, PARAMETER_SOURCE, COMPLIANCE_SOURCE)
  """
  configSource: PipelineConfigSourceEnum

  """
  Coverage percentage.
  """
  coverage: Float

  """
  Timestamp of the pipeline's creation.
  """
  createdAt: Time!

  """
  Detailed status of the pipeline.
  """
  detailedStatus: DetailedStatus!

  """
  Pipelines this pipeline will trigger.
  """
  downstream(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PipelineConnection

  """
  Duration of the pipeline in seconds.
  """
  duration: Int

  """
  Timestamp of the pipeline's completion.
  """
  finishedAt: Time

  """
  ID of the pipeline.
  """
  id: ID!

  """
  Internal ID of the pipeline.
  """
  iid: String!

  """
  Specific job in this pipeline, either by name or ID.
  """
  job(
    """
    ID of the job.
    """
    id: JobID

    """
    Name of the job.
    """
    name: String
  ): CiJob

  """
  Job artifacts of the pipeline.
  """
  jobArtifacts: [CiJobArtifact!]

  """
  Jobs belonging to the pipeline.
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter jobs by retry-status.
    """
    retried: Boolean

    """
    Filter jobs by the type of security report they produce.
    """
    securityReportTypes: [SecurityReportTypeEnum!]

    """
    Filter jobs by status.
    """
    statuses: [CiJobStatus!]
  ): CiJobConnection

  """
  Event type of the pipeline associated with a merge request.
  """
  mergeRequestEventType: PipelineMergeRequestEventType

  """
  Relative path to the pipeline's page.
  """
  path: String

  """
  Project the pipeline belongs to.
  """
  project: Project

  """
  How long the pipeline was queued before starting.
  """
  queuedDuration: Duration

  """
  Reference to the branch from which the pipeline was triggered.
  """
  ref: String

  """
  Reference path to the branch from which the pipeline was triggered.
  """
  refPath: String

  """
  Specifies if a pipeline can be retried.
  """
  retryable: Boolean!

  """
  SHA of the pipeline's commit.
  """
  sha(
    """
    Format of the SHA.
    """
    format: ShaFormat
  ): String

  """
  Job where pipeline was triggered from.
  """
  sourceJob: CiJob

  """
  Stages of the pipeline.
  """
  stages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiStageConnection

  """
  Timestamp when the pipeline was started.
  """
  startedAt: Time

  """
  Status of the pipeline (CREATED, WAITING_FOR_RESOURCE, PREPARING, PENDING,
  RUNNING, FAILED, SUCCESS, CANCELED, SKIPPED, MANUAL, SCHEDULED)
  """
  status: PipelineStatusEnum!

  """
  Summary of the test report generated by the pipeline.
  """
  testReportSummary: TestReportSummary!

  """
  A specific test suite in a pipeline test report.
  """
  testSuite(
    """
    IDs of the builds used to run the test suite.
    """
    buildIds: [ID!]!
  ): TestSuite

  """
  Timestamp of the pipeline's last activity.
  """
  updatedAt: Time!

  """
  Pipeline that triggered the pipeline.
  """
  upstream: Pipeline

  """
  Pipeline user.
  """
  user: UserCore

  """
  Permissions for the current user on the resource
  """
  userPermissions: PipelinePermissions!

  """
  Indicates if the pipeline has jobs with `needs` dependencies.
  """
  usesNeeds: Boolean

  """
  Pipeline warning messages.
  """
  warningMessages: [PipelineMessage!]

  """
  Indicates if a pipeline has warnings.
  """
  warnings: Boolean!
}

type PipelineAnalytics {
  """
  Labels for the monthly pipeline count.
  """
  monthPipelinesLabels: [String!]

  """
  Total monthly successful pipeline count.
  """
  monthPipelinesSuccessful: [Int!]

  """
  Total monthly pipeline count.
  """
  monthPipelinesTotals: [Int!]

  """
  Pipeline times labels.
  """
  pipelineTimesLabels: [String!]

  """
  Pipeline times.
  """
  pipelineTimesValues: [Int!]

  """
  Labels for the weekly pipeline count.
  """
  weekPipelinesLabels: [String!]

  """
  Total weekly successful pipeline count.
  """
  weekPipelinesSuccessful: [Int!]

  """
  Total weekly pipeline count.
  """
  weekPipelinesTotals: [Int!]

  """
  Labels for the yearly pipeline count.
  """
  yearPipelinesLabels: [String!]

  """
  Total yearly successful pipeline count.
  """
  yearPipelinesSuccessful: [Int!]

  """
  Total yearly pipeline count.
  """
  yearPipelinesTotals: [Int!]
}

"""
Autogenerated input type of PipelineCancel
"""
input PipelineCancelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pipeline to mutate.
  """
  id: CiPipelineID!
}

"""
Autogenerated return type of PipelineCancel
"""
type PipelineCancelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

enum PipelineConfigSourceEnum {
  """
  Auto DevOps source.
  """
  AUTO_DEVOPS_SOURCE

  """
  Bridge source.
  """
  BRIDGE_SOURCE

  """
  Compliance source.
  """
  COMPLIANCE_SOURCE

  """
  External project source.
  """
  EXTERNAL_PROJECT_SOURCE

  """
  Parameter source.
  """
  PARAMETER_SOURCE

  """
  Remote source.
  """
  REMOTE_SOURCE

  """
  Repository source.
  """
  REPOSITORY_SOURCE

  """
  Unknown source.
  """
  UNKNOWN_SOURCE

  """
  Webide source.
  """
  WEBIDE_SOURCE
}

"""
The connection type for Pipeline.
"""
type PipelineConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [PipelineEdge]

  """
  A list of nodes.
  """
  nodes: [Pipeline]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents pipeline counts for the project
"""
type PipelineCounts {
  """
  Total number of pipelines for the project.
  """
  all: Int

  """
  Number of pipelines with scope FINISHED for the project
  """
  finished: Int

  """
  Number of pipelines with scope PENDING for the project
  """
  pending: Int

  """
  Number of pipelines with scope RUNNING for the project
  """
  running: Int
}

"""
Autogenerated input type of PipelineDestroy
"""
input PipelineDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pipeline to mutate.
  """
  id: CiPipelineID!
}

"""
Autogenerated return type of PipelineDestroy
"""
type PipelineDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
An edge in a connection.
"""
type PipelineEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Pipeline
}

"""
Event type of the pipeline associated with a merge request
"""
enum PipelineMergeRequestEventType {
  """
  Pipeline run on the changes in the merge request source branch.
  """
  DETACHED

  """
  Pipeline run on the changes from the source branch combined with the target branch.
  """
  MERGED_RESULT
}

type PipelineMessage {
  """
  Content of the pipeline message.
  """
  content: String!

  """
  ID of the pipeline message.
  """
  id: ID!
}

type PipelinePermissions {
  """
  Indicates the user can perform `admin_pipeline` on this resource
  """
  adminPipeline: Boolean!

  """
  Indicates the user can perform `destroy_pipeline` on this resource
  """
  destroyPipeline: Boolean!

  """
  Indicates the user can perform `update_pipeline` on this resource
  """
  updatePipeline: Boolean!
}

"""
Autogenerated input type of PipelineRetry
"""
input PipelineRetryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the pipeline to mutate.
  """
  id: CiPipelineID!
}

"""
Autogenerated return type of PipelineRetry
"""
type PipelineRetryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Pipeline after mutation.
  """
  pipeline: Pipeline
}

enum PipelineScopeEnum {
  """
  Branches.
  """
  BRANCHES

  """
  Pipeline has completed.
  """
  FINISHED

  """
  Pipeline has not started running yet.
  """
  PENDING

  """
  Pipeline is running.
  """
  RUNNING

  """
  Tags.
  """
  TAGS
}

enum PipelineStatusEnum {
  """
  Pipeline was canceled before completion.
  """
  CANCELED

  """
  Pipeline has been created.
  """
  CREATED

  """
  At least one stage of the pipeline failed.
  """
  FAILED

  """
  Pipeline needs to be manually started.
  """
  MANUAL

  """
  Pipeline has not started running yet.
  """
  PENDING

  """
  Pipeline is preparing to run.
  """
  PREPARING

  """
  Pipeline is running.
  """
  RUNNING

  """
  Pipeline is scheduled to run.
  """
  SCHEDULED

  """
  Pipeline was skipped.
  """
  SKIPPED

  """
  Pipeline completed successfully.
  """
  SUCCESS

  """
  A resource (for example, a runner) that the pipeline requires to run is unavailable.
  """
  WAITING_FOR_RESOURCE
}

type Project {
  """
  Agent configurations defined by the project
  """
  agentConfigurations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AgentConfigurationConnection

  """
  A single Alert Management alert of the project.
  """
  alertManagementAlert(
    """
    Username of a user assigned to the issue.
    """
    assigneeUsername: String

    """
    Filter query for given domain.
    """
    domain: AlertManagementDomainFilter! = operations

    """
    IID of the alert. For example, "1".
    """
    iid: String

    """
    Search query for title, description, service, or monitoring_tool.
    """
    search: String

    """
    Sort alerts by this criteria.
    """
    sort: AlertManagementAlertSort

    """
    Alerts with the specified statues. For example, `[TRIGGERED]`.
    """
    statuses: [AlertManagementStatus!]
  ): AlertManagementAlert

  """
  Counts of alerts by status for the project.
  """
  alertManagementAlertStatusCounts(
    """
    Username of a user assigned to the issue.
    """
    assigneeUsername: String

    """
    Search query for title, description, service, or monitoring_tool.
    """
    search: String
  ): AlertManagementAlertStatusCountsType

  """
  Alert Management alerts of the project.
  """
  alertManagementAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of a user assigned to the issue.
    """
    assigneeUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter query for given domain.
    """
    domain: AlertManagementDomainFilter! = operations

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    IID of the alert. For example, "1".
    """
    iid: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query for title, description, service, or monitoring_tool.
    """
    search: String

    """
    Sort alerts by this criteria.
    """
    sort: AlertManagementAlertSort

    """
    Alerts with the specified statues. For example, `[TRIGGERED]`.
    """
    statuses: [AlertManagementStatus!]
  ): AlertManagementAlertConnection

  """
  HTTP Integrations which can receive alerts for the project.
  """
  alertManagementHttpIntegrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of the integration.
    """
    id: AlertManagementHttpIntegrationID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AlertManagementHttpIntegrationConnection

  """
  Integrations which can receive alerts for the project.
  """
  alertManagementIntegrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of the integration.
    """
    id: GlobalID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AlertManagementIntegrationConnection

  """
  If `only_allow_merge_if_pipeline_succeeds` is true, indicates if merge
  requests of the project can also be merged with skipped jobs.
  """
  allowMergeOnSkippedPipeline: Boolean

  """
  Indicates the archived status of the project.
  """
  archived: Boolean

  """
  Indicates if issues referenced by merge requests and commits within the default branch are closed automatically.
  """
  autocloseReferencedIssues: Boolean

  """
  URL to avatar image file of the project.
  """
  avatarUrl: String

  """
  A single board of the project.
  """
  board(
    """
    ID of the board.
    """
    id: BoardID!
  ): Board

  """
  Boards of the project.
  """
  boards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Find a board by its ID.
    """
    id: BoardID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  CI/CD settings for the project.
  """
  ciCdSettings: ProjectCiCdSetting

  """
  Path of the CI configuration file.
  """
  ciConfigPathOrDefault: String!

  """
  The CI Job Tokens scope of access.
  """
  ciJobTokenScope: CiJobTokenScopeType

  """
  Find a single CI/CD template by name.
  """
  ciTemplate(
    """
    Name of the CI/CD template to search for. Template must be formatted as `Name.gitlab-ci.yml`.
    """
    name: String!
  ): CiTemplate

  """
  List of the project's CI/CD variables.
  """
  ciVariables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiProjectVariableConnection

  """
  Find a single cluster agent by name.
  """
  clusterAgent(
    """
    Name of the cluster agent.
    """
    name: String!
  ): ClusterAgent

  """
  Cluster agents associated with the project.
  """
  clusterAgents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ClusterAgentConnection

  """
  Container expiration policy of the project.
  """
  containerExpirationPolicy: ContainerExpirationPolicy

  """
  Indicates if Container Registry is enabled for the current user
  """
  containerRegistryEnabled: Boolean

  """
  Container repositories of the project.
  """
  containerRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the container repositories by their name.
    """
    name: String

    """
    Sort container repositories by this criteria.
    """
    sort: ContainerRepositorySort = created_desc
  ): ContainerRepositoryConnection

  """
  Number of container repositories in the project.
  """
  containerRepositoriesCount: Int!

  """
  Timestamp of the project creation.
  """
  createdAt: Time

  """
  Short description of the project.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  A single environment of the project.
  """
  environment(
    """
    Name of the environment.
    """
    name: String

    """
    Search query for environment name.
    """
    search: String

    """
    States of environments that should be included in result.
    """
    states: [String!]
  ): Environment

  """
  Environments of the project.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Name of the environment.
    """
    name: String

    """
    Search query for environment name.
    """
    search: String

    """
    States of environments that should be included in result.
    """
    states: [String!]
  ): EnvironmentConnection

  """
  Number of times the project has been forked.
  """
  forksCount: Int!

  """
  Full path of the project.
  """
  fullPath: ID!

  """
  Grafana integration details for the project.
  """
  grafanaIntegration: GrafanaIntegration

  """
  Group of the project.
  """
  group: Group

  """
  URL to connect to the project via HTTPS.
  """
  httpUrlToRepo: String

  """
  ID of the project.
  """
  id: ID!

  """
  Status of import background job of the project.
  """
  importStatus: String

  """
  Incident Management Timeline event associated with the incident.
  """
  incidentManagementTimelineEvent(
    """
    ID of the timeline event.
    """
    id: IncidentManagementTimelineEventID!

    """
    ID of the incident.
    """
    incidentId: IssueID!
  ): TimelineEventType

  """
  Incident Management Timeline events associated with the incident.
  """
  incidentManagementTimelineEvents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of the incident.
    """
    incidentId: IssueID!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelineEventTypeConnection

  """
  A single issue of the project.
  """
  issue(
    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Username of a user assigned to the issue. Deprecated in 13.11: Use `assigneeUsernames`.
    """
    assigneeUsername: String @deprecated(reason: "Use `assigneeUsernames`. Deprecated in 13.11.")

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Issues closed after this date.
    """
    closedAfter: Time

    """
    Issues closed before this date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after this date.
    """
    createdAfter: Time

    """
    Issues created before this date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to this issue.
    """
    labelName: [String]

    """
    Milestone applied to this issue.
    """
    milestoneTitle: [String]

    """
    Filter issues by milestone ID wildcard.
    """
    milestoneWildcardId: MilestoneWildcardId

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    Negated arguments.
    """
    not: NegatedIssueFilterInput

    """
    Release tag associated with the issue's milestone.
    """
    releaseTag: [String!]

    """
    Filter issues by release tag ID wildcard.
    """
    releaseTagWildcardId: ReleaseTagWildcardId

    """
    Search query for title or description.
    """
    search: String

    """
    Sort issues by this criteria.
    """
    sort: IssueSort = created_desc

    """
    Current state of this issue.
    """
    state: IssuableState

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after this date.
    """
    updatedAfter: Time

    """
    Issues updated before this date.
    """
    updatedBefore: Time
  ): Issue

  """
  Counts of issues by status for the project.
  """
  issueStatusCounts(
    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Username of a user assigned to the issue. Deprecated in 13.11: Use `assigneeUsernames`.
    """
    assigneeUsername: String @deprecated(reason: "Use `assigneeUsernames`. Deprecated in 13.11.")

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Issues closed after this date.
    """
    closedAfter: Time

    """
    Issues closed before this date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after this date.
    """
    createdAfter: Time

    """
    Issues created before this date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to this issue.
    """
    labelName: [String]

    """
    Milestone applied to this issue.
    """
    milestoneTitle: [String]

    """
    Filter issues by milestone ID wildcard.
    """
    milestoneWildcardId: MilestoneWildcardId

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    Negated arguments.
    """
    not: NegatedIssueFilterInput

    """
    Release tag associated with the issue's milestone.
    """
    releaseTag: [String!]

    """
    Filter issues by release tag ID wildcard.
    """
    releaseTagWildcardId: ReleaseTagWildcardId

    """
    Search query for title or description.
    """
    search: String

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after this date.
    """
    updatedAfter: Time

    """
    Issues updated before this date.
    """
    updatedBefore: Time
  ): IssueStatusCountsType

  """
  Issues of the project.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Username of a user assigned to the issue. Deprecated in 13.11: Use `assigneeUsernames`.
    """
    assigneeUsername: String @deprecated(reason: "Use `assigneeUsernames`. Deprecated in 13.11.")

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Issues closed after this date.
    """
    closedAfter: Time

    """
    Issues closed before this date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after this date.
    """
    createdAfter: Time

    """
    Issues created before this date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to this issue.
    """
    labelName: [String]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Milestone applied to this issue.
    """
    milestoneTitle: [String]

    """
    Filter issues by milestone ID wildcard.
    """
    milestoneWildcardId: MilestoneWildcardId

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    Negated arguments.
    """
    not: NegatedIssueFilterInput

    """
    Release tag associated with the issue's milestone.
    """
    releaseTag: [String!]

    """
    Filter issues by release tag ID wildcard.
    """
    releaseTagWildcardId: ReleaseTagWildcardId

    """
    Search query for title or description.
    """
    search: String

    """
    Sort issues by this criteria.
    """
    sort: IssueSort = created_desc

    """
    Current state of this issue.
    """
    state: IssuableState

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after this date.
    """
    updatedAfter: Time

    """
    Issues updated before this date.
    """
    updatedBefore: Time
  ): IssueConnection

  """
  Indicates if Issues are enabled for the current user
  """
  issuesEnabled: Boolean

  """
  Status of Jira import background job of the project.
  """
  jiraImportStatus: String

  """
  Jira imports into the project.
  """
  jiraImports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JiraImportConnection

  """
  Jobs of a project. This field can only be resolved for one project in any single request.
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter jobs by status.
    """
    statuses: [CiJobStatus!]
  ): CiJobConnection

  """
  Indicates if CI/CD pipeline jobs are enabled for the current user.
  """
  jobsEnabled: Boolean

  """
  Label available on this project.
  """
  label(
    """
    Title of the label.
    """
    title: String!
  ): Label

  """
  Labels available on this project.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include labels from ancestor groups.
    """
    includeAncestorGroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search term to find labels with.
    """
    searchTerm: String
  ): LabelConnection

  """
  Timestamp of the project last activity.
  """
  lastActivityAt: Time

  """
  Indicates if the project has Large File Storage (LFS) enabled.
  """
  lfsEnabled: Boolean

  """
  Template used to create merge commit message in merge requests.
  """
  mergeCommitTemplate: String

  """
  A single merge request of the project.
  """
  mergeRequest(
    """
    IID of the merge request, for example `1`.
    """
    iid: String!
  ): MergeRequest

  """
  Merge requests of the project.
  """
  mergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Indicates if Merge Requests are enabled for the current user
  """
  mergeRequestsEnabled: Boolean

  """
  Indicates if no merge commits should be created and all merges should instead
  be fast-forwarded, which means that merging is only allowed if the branch
  could be fast-forwarded.
  """
  mergeRequestsFfOnlyEnabled: Boolean

  """
  Milestones of the project.
  """
  milestones(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Date the milestone contains.
    """
    containingDate: Time

    """
    List items overlapping a time frame defined by startDate..endDate (if one
    date is provided, both must be present) Deprecated in 13.5: Use timeframe.end.
    """
    endDate: Time @deprecated(reason: "Use timeframe.end. Deprecated in 13.5.")

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global milestone IDs, e.g., `"gid://gitlab/Milestone/1"`.
    """
    ids: [ID!]

    """
    Also return milestones in the project's parent group and its ancestors.
    """
    includeAncestors: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search string for the title.
    """
    searchTitle: String

    """
    Sort milestones by this criteria.
    """
    sort: MilestoneSort = DUE_DATE_ASC

    """
    List items overlapping a time frame defined by startDate..endDate (if one
    date is provided, both must be present) Deprecated in 13.5: Use
    timeframe.start.
    """
    startDate: Time @deprecated(reason: "Use timeframe.start. Deprecated in 13.5.")

    """
    Filter milestones by state.
    """
    state: MilestoneStateEnum

    """
    List items overlapping the given timeframe.
    """
    timeframe: Timeframe

    """
    Title of the milestone.
    """
    title: String
  ): MilestoneConnection

  """
  Name of the project (without namespace).
  """
  name: String!

  """
  Full name of the project with its namespace.
  """
  nameWithNamespace: String!

  """
  Namespace of the project.
  """
  namespace: Namespace

  """
  Indicates if merge requests of the project can only be merged when all the discussions are resolved.
  """
  onlyAllowMergeIfAllDiscussionsAreResolved: Boolean

  """
  Indicates if merge requests of the project can only be merged with successful jobs.
  """
  onlyAllowMergeIfPipelineSucceeds: Boolean

  """
  Number of open issues for the project.
  """
  openIssuesCount: Int

  """
  Packages of the project.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include versionless packages.
    """
    includeVersionless: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search a package by name.
    """
    packageName: String = null

    """
    Filter a package by type.
    """
    packageType: PackageTypeEnum = null

    """
    Sort packages by this criteria.
    """
    sort: PackageSort = CREATED_DESC

    """
    Filter a package by status.
    """
    status: PackageStatus = null
  ): PackageConnection

  """
  Packages cleanup policy for the project.
  """
  packagesCleanupPolicy: PackagesCleanupPolicy

  """
  Path of the project.
  """
  path: String!

  """
  Build pipeline of the project.
  """
  pipeline(
    """
    IID of the Pipeline. For example, "1".
    """
    iid: ID

    """
    SHA of the Pipeline. For example, "dyd0f15ay83993f5ab66k927w28673882x99100b".
    """
    sha: String
  ): Pipeline

  """
  Pipeline analytics.
  """
  pipelineAnalytics: PipelineAnalytics

  """
  Build pipeline counts of the project.
  """
  pipelineCounts(
    """
    Filter pipelines by the ref they are run for.
    """
    ref: String

    """
    Filter pipelines by the SHA of the commit they are run for.
    """
    sha: String

    """
    Filter pipelines by their source.
    """
    source: String
  ): PipelineCounts

  """
  Build pipelines of the project.
  """
  pipelines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter pipelines by the ref they are run for.
    """
    ref: String

    """
    Filter pipelines by scope.
    """
    scope: PipelineScopeEnum

    """
    Filter pipelines by the sha of the commit they are run for.
    """
    sha: String

    """
    Filter pipelines by their source.
    """
    source: String

    """
    Filter pipelines by their status.
    """
    status: PipelineStatusEnum

    """
    Pipelines updated after this date.
    """
    updatedAfter: Time

    """
    Pipelines updated before this date.
    """
    updatedBefore: Time

    """
    Filter pipelines by the user that triggered the pipeline.
    """
    username: String
  ): PipelineConnection

  """
  Indicates if a link to create or view a merge request should display after a
  push to Git repositories of the project from the command line.
  """
  printingMergeRequestLinkEnabled: Boolean

  """
  Members of the project.
  """
  projectMembers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter members by the given member relations.
    """
    relations: [ProjectMemberRelation!] = [DIRECT, INHERITED]

    """
    Search query.
    """
    search: String
  ): MemberInterfaceConnection

  """
  Indicates if there is public access to pipelines and job details of the project, including output logs and artifacts.
  """
  publicJobs: Boolean

  """
  List of recently visited boards of the project. Maximum size is 4.
  """
  recentIssueBoards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  A single release of the project.
  """
  release(
    """
    Name of the tag associated to the release.
    """
    tagName: String!
  ): Release

  """
  Releases of the project.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Sort releases by this criteria.
    """
    sort: ReleaseSort = RELEASED_AT_DESC
  ): ReleaseConnection

  """
  Indicates if `Delete source branch` option should be enabled by default for all new merge requests of the project.
  """
  removeSourceBranchAfterMerge: Boolean

  """
  Git repository of the project.
  """
  repository: Repository

  """
  Indicates if users can request member access to the project.
  """
  requestAccessEnabled: Boolean

  """
  SAST CI configuration for the project.
  """
  sastCiConfiguration: SastCiConfiguration

  """
  Detailed version of a Sentry error on the project.
  """
  sentryDetailedError(
    """
    ID of the Sentry issue.
    """
    id: GitlabErrorTrackingDetailedErrorID!
  ): SentryDetailedError

  """
  Paginated collection of Sentry errors on the project.
  """
  sentryErrors: SentryErrorCollection

  """
  E-mail address of the Service Desk.
  """
  serviceDeskAddress: String

  """
  Indicates if the project has Service Desk enabled.
  """
  serviceDeskEnabled: Boolean

  """
  Project services.
  """
  services(
    """
    Indicates if the integration is active.
    """
    active: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Type of integration.
    """
    type: ServiceType
  ): ServiceConnection

  """
  Indicates if shared runners are enabled for the project.
  """
  sharedRunnersEnabled: Boolean

  """
  Snippets of the project.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Indicates if Snippets are enabled for the current user
  """
  snippetsEnabled: Boolean

  """
  Template used to create squash commit message in merge requests.
  """
  squashCommitTemplate: String

  """
  Indicates if `squashReadOnly` is enabled.
  """
  squashReadOnly: Boolean!

  """
  URL to connect to the project via SSH.
  """
  sshUrlToRepo: String

  """
  Number of times the project has been starred.
  """
  starCount: Int!

  """
  Statistics of the project.
  """
  statistics: ProjectStatistics

  """
  Commit message used to apply merge request suggestions.
  """
  suggestionCommitMessage: String

  """
  List of project topics (not Git tags). Deprecated in 13.12: Use `topics`.
  """
  tagList: String @deprecated(reason: "Use `topics`. Deprecated in 13.12.")

  """
  Find a single Terraform state by name.
  """
  terraformState(
    """
    Name of the Terraform state.
    """
    name: String!
  ): TerraformState

  """
  Terraform states associated with the project.
  """
  terraformStates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TerraformStateConnection

  """
  Timelog categories for the project. Available only when feature flag
  `timelog_categories` is enabled. This flag is disabled by default, because the
  feature is experimental and is subject to change without notice.
  """
  timelogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeTrackingTimelogCategoryConnection

  """
  Time logged on issues and merge requests in the project.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  List of project topics.
  """
  topics: [String!]

  """
  Permissions for the current user on the resource
  """
  userPermissions: ProjectPermissions!

  """
  Visibility of the project.
  """
  visibility: String

  """
  Web URL of the project.
  """
  webUrl: String

  """
  Indicates if Wikis are enabled for the current user
  """
  wikiEnabled: Boolean

  """
  Work item types available to the project. Returns `null` if `work_items`
  feature flag is disabled. This flag is disabled by default, because the
  feature is experimental and is subject to change without notice.
  """
  workItemTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If `true`, only taskable work item types will be returned. Argument is
    experimental and can be removed in the future without notice.
    """
    taskable: Boolean
  ): WorkItemTypeConnection

  """
  Work items of the project. Introduced in 15.1: This feature is in Alpha. It can be changed or removed at any time.
  """
  workItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of work items. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query for title or description.
    """
    search: String

    """
    Sort work items by this criteria.
    """
    sort: WorkItemSort = created_desc

    """
    Current state of this work item.
    """
    state: IssuableState

    """
    Filter work items by the given work item types.
    """
    types: [IssueType!]
  ): WorkItemConnection @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")
}

type ProjectCiCdSetting {
  """
  Indicates CI job tokens generated in this project have restricted access to resources.
  """
  jobTokenScopeEnabled: Boolean

  """
  Whether to keep the latest builds artifacts.
  """
  keepLatestArtifact: Boolean

  """
  Whether merge pipelines are enabled.
  """
  mergePipelinesEnabled: Boolean

  """
  Whether merge trains are enabled.
  """
  mergeTrainsEnabled: Boolean

  """
  Project the CI/CD settings belong to.
  """
  project: Project
}

"""
Autogenerated input type of ProjectCiCdSettingsUpdate
"""
input ProjectCiCdSettingsUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full Path of the project the settings belong to.
  """
  fullPath: ID!

  """
  Indicates CI job tokens generated in this project have restricted access to resources.
  """
  jobTokenScopeEnabled: Boolean

  """
  Indicates if the latest artifact should be kept for this project.
  """
  keepLatestArtifact: Boolean
}

"""
Autogenerated return type of ProjectCiCdSettingsUpdate
"""
type ProjectCiCdSettingsUpdatePayload {
  """
  CI/CD settings after mutation.
  """
  ciCdSettings: ProjectCiCdSetting!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

"""
A `ProjectID` is a global ID. It is encoded as a string.

An example `ProjectID` is: `"gid://gitlab/Project/1"`.
"""
scalar ProjectID

"""
Represents a Project Membership
"""
type ProjectMember implements MemberInterface {
  """
  GitLab::Access level.
  """
  accessLevel: AccessLevel

  """
  Date and time the membership was created.
  """
  createdAt: Time

  """
  User that authorized membership.
  """
  createdBy: UserCore

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  ID of the member.
  """
  id: ID!

  """
  Find a merge request.
  """
  mergeRequestInteraction(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): UserMergeRequestInteraction

  """
  Project that User is a member of.
  """
  project: Project

  """
  Date and time the membership was last updated.
  """
  updatedAt: Time

  """
  User that is associated with the member object.
  """
  user: UserCore

  """
  Permissions for the current user on the resource
  """
  userPermissions: ProjectPermissions!
}

"""
The connection type for ProjectMember.
"""
type ProjectMemberConnection {
  """
  A list of edges.
  """
  edges: [ProjectMemberEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProjectMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectMember
}

"""
Project member relation
"""
enum ProjectMemberRelation {
  """
  Descendants members
  """
  DESCENDANTS

  """
  Direct members
  """
  DIRECT

  """
  Inherited members
  """
  INHERITED

  """
  Invited Groups members
  """
  INVITED_GROUPS
}

type ProjectPermissions {
  """
  Indicates the user can perform `admin_operations` on this resource
  """
  adminOperations: Boolean!

  """
  Indicates the user can perform `admin_project` on this resource
  """
  adminProject: Boolean!

  """
  Indicates the user can perform `admin_remote_mirror` on this resource
  """
  adminRemoteMirror: Boolean!

  """
  Indicates the user can perform `admin_wiki` on this resource
  """
  adminWiki: Boolean!

  """
  Indicates the user can perform `archive_project` on this resource
  """
  archiveProject: Boolean!

  """
  Indicates the user can perform `change_namespace` on this resource
  """
  changeNamespace: Boolean!

  """
  Indicates the user can perform `change_visibility_level` on this resource
  """
  changeVisibilityLevel: Boolean!

  """
  Indicates the user can perform `create_deployment` on this resource
  """
  createDeployment: Boolean!

  """
  Indicates the user can perform `create_design` on this resource
  """
  createDesign: Boolean!

  """
  Indicates the user can perform `create_issue` on this resource
  """
  createIssue: Boolean!

  """
  Indicates the user can perform `create_label` on this resource
  """
  createLabel: Boolean!

  """
  Indicates the user can perform `create_merge_request_from` on this resource
  """
  createMergeRequestFrom: Boolean!

  """
  Indicates the user can perform `create_merge_request_in` on this resource
  """
  createMergeRequestIn: Boolean!

  """
  Indicates the user can perform `create_pages` on this resource
  """
  createPages: Boolean!

  """
  Indicates the user can perform `create_pipeline` on this resource
  """
  createPipeline: Boolean!

  """
  Indicates the user can perform `create_pipeline_schedule` on this resource
  """
  createPipelineSchedule: Boolean!

  """
  Indicates the user can perform `create_snippet` on this resource
  """
  createSnippet: Boolean!

  """
  Indicates the user can perform `create_wiki` on this resource
  """
  createWiki: Boolean!

  """
  Indicates the user can perform `destroy_design` on this resource
  """
  destroyDesign: Boolean!

  """
  Indicates the user can perform `destroy_pages` on this resource
  """
  destroyPages: Boolean!

  """
  Indicates the user can perform `destroy_wiki` on this resource
  """
  destroyWiki: Boolean!

  """
  Indicates the user can perform `download_code` on this resource
  """
  downloadCode: Boolean!

  """
  Indicates the user can perform `download_wiki_code` on this resource
  """
  downloadWikiCode: Boolean!

  """
  Indicates the user can perform `fork_project` on this resource
  """
  forkProject: Boolean!

  """
  Indicates the user can perform `push_code` on this resource
  """
  pushCode: Boolean!

  """
  Indicates the user can perform `push_to_delete_protected_branch` on this resource
  """
  pushToDeleteProtectedBranch: Boolean!

  """
  Indicates the user can perform `read_commit_status` on this resource
  """
  readCommitStatus: Boolean!

  """
  Indicates the user can perform `read_cycle_analytics` on this resource
  """
  readCycleAnalytics: Boolean!

  """
  Indicates the user can perform `read_design` on this resource
  """
  readDesign: Boolean!

  """
  Indicates the user can perform `read_merge_request` on this resource
  """
  readMergeRequest: Boolean!

  """
  Indicates the user can perform `read_pages_content` on this resource
  """
  readPagesContent: Boolean!

  """
  Indicates the user can perform `read_project` on this resource
  """
  readProject: Boolean!

  """
  Indicates the user can perform `read_project_member` on this resource
  """
  readProjectMember: Boolean!

  """
  Indicates the user can perform `read_wiki` on this resource
  """
  readWiki: Boolean!

  """
  Indicates the user can perform `remove_fork_project` on this resource
  """
  removeForkProject: Boolean!

  """
  Indicates the user can perform `remove_pages` on this resource
  """
  removePages: Boolean!

  """
  Indicates the user can perform `remove_project` on this resource
  """
  removeProject: Boolean!

  """
  Indicates the user can perform `rename_project` on this resource
  """
  renameProject: Boolean!

  """
  Indicates the user can perform `request_access` on this resource
  """
  requestAccess: Boolean!

  """
  Indicates the user can perform `update_pages` on this resource
  """
  updatePages: Boolean!

  """
  Indicates the user can perform `update_wiki` on this resource
  """
  updateWiki: Boolean!

  """
  Indicates the user can perform `upload_file` on this resource
  """
  uploadFile: Boolean!
}

type ProjectStatistics {
  """
  Build artifacts size of the project in bytes.
  """
  buildArtifactsSize: Float!

  """
  Commit count of the project.
  """
  commitCount: Float!

  """
  Container Registry size of the project in bytes.
  """
  containerRegistrySize: Float

  """
  Large File Storage (LFS) object size of the project in bytes.
  """
  lfsObjectsSize: Float!

  """
  Packages size of the project in bytes.
  """
  packagesSize: Float!

  """
  CI Pipeline artifacts size in bytes.
  """
  pipelineArtifactsSize: Float

  """
  Repository size of the project in bytes.
  """
  repositorySize: Float!

  """
  Snippets size of the project in bytes.
  """
  snippetsSize: Float

  """
  Storage size of the project in bytes.
  """
  storageSize: Float!

  """
  Uploads size of the project in bytes.
  """
  uploadsSize: Float

  """
  Wiki size of the project in bytes.
  """
  wikiSize: Float
}

"""
The alert condition for Prometheus
"""
type PrometheusAlert {
  """
  Human-readable text of the alert condition.
  """
  humanizedText: String!

  """
  ID of the alert condition.
  """
  id: ID!
}

"""
Autogenerated input type of PrometheusIntegrationCreate
"""
input PrometheusIntegrationCreateInput {
  """
  Whether the integration is receiving alerts.
  """
  active: Boolean!

  """
  Endpoint at which Prometheus can be queried.
  """
  apiUrl: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project to create the integration in.
  """
  projectPath: ID!
}

"""
Autogenerated return type of PrometheusIntegrationCreate
"""
type PrometheusIntegrationCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Newly created integration.
  """
  integration: AlertManagementPrometheusIntegration
}

"""
Autogenerated input type of PrometheusIntegrationResetToken
"""
input PrometheusIntegrationResetTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the integration to mutate.
  """
  id: IntegrationsPrometheusID!
}

"""
Autogenerated return type of PrometheusIntegrationResetToken
"""
type PrometheusIntegrationResetTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Newly created integration.
  """
  integration: AlertManagementPrometheusIntegration
}

"""
Autogenerated input type of PrometheusIntegrationUpdate
"""
input PrometheusIntegrationUpdateInput {
  """
  Whether the integration is receiving alerts.
  """
  active: Boolean

  """
  Endpoint at which Prometheus can be queried.
  """
  apiUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the integration to mutate.
  """
  id: IntegrationsPrometheusID!
}

"""
Autogenerated return type of PrometheusIntegrationUpdate
"""
type PrometheusIntegrationUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Newly created integration.
  """
  integration: AlertManagementPrometheusIntegration
}

"""
Pypi metadata
"""
type PypiMetadata {
  """
  ID of the metadatum.
  """
  id: PackagesPypiMetadatumID!

  """
  Required Python version of the Pypi package.
  """
  requiredPython: String
}

type Query {
  """
  Find an issue board list.
  """
  boardList(
    """
    Global ID of the list.
    """
    id: ListID!

    """
    Filters applied when getting issue metadata in the board list.
    """
    issueFilters: BoardIssueInput
  ): BoardList

  """
  CI related settings that apply to the entire instance.
  """
  ciApplicationSettings: CiApplicationSettings

  """
  Linted and processed contents of a CI config.
  Should not be requested more than once per request.
  """
  ciConfig(
    """
    Contents of `.gitlab-ci.yml`.
    """
    content: String!

    """
    Run pipeline creation simulation, or only do static check.
    """
    dryRun: Boolean

    """
    Project of the CI config.
    """
    projectPath: ID!

    """
    Sha for the pipeline.
    """
    sha: String
  ): CiConfig

  """
  List of the instance's CI/CD variables.
  """
  ciVariables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CiInstanceVariableConnection

  """
  Find a container repository.
  """
  containerRepository(
    """
    Global ID of the container repository.
    """
    id: ContainerRepositoryID!
  ): ContainerRepositoryDetails

  """
  Get information about current user.
  """
  currentUser: UserCore

  """
  Fields related to design management.
  """
  designManagement: DesignManagement!

  """
  Testing endpoint to validate the API with
  """
  echo(
    """
    Text to echo back.
    """
    text: String!
  ): String!

  """
  Whether Gitpod is enabled in application settings.
  """
  gitpodEnabled: Boolean

  """
  Find a group.
  """
  group(
    """
    Full path of the project, group, or namespace. For example, `gitlab-org/gitlab-foss`.
    """
    fullPath: ID!
  ): Group

  """
  Find an issue.
  """
  issue(
    """
    Global ID of the issue.
    """
    id: IssueID!
  ): Issue

  """
  Find a merge request.
  """
  mergeRequest(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): MergeRequest

  """
  Metadata about GitLab.
  """
  metadata: Metadata

  """
  Find a milestone.
  """
  milestone(
    """
    Find a milestone by its ID.
    """
    id: MilestoneID!
  ): Milestone

  """
  Find a namespace.
  """
  namespace(
    """
    Full path of the project, group, or namespace. For example, `gitlab-org/gitlab-foss`.
    """
    fullPath: ID!
  ): Namespace

  """
  Find a package.
  """
  package(
    """
    Global ID of the package.
    """
    id: PackagesPackageID!
  ): PackageDetailsType

  """
  Find a project.
  """
  project(
    """
    Full path of the project, group, or namespace. For example, `gitlab-org/gitlab-foss`.
    """
    fullPath: ID!
  ): Project

  """
  Find projects visible to the current user.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter projects by IDs.
    """
    ids: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit projects that the current user is a member of.
    """
    membership: Boolean

    """
    Search query for project name, path, or description.
    """
    search: String

    """
    Include namespace in project search.
    """
    searchNamespaces: Boolean

    """
    Sort order of results.
    """
    sort: String

    """
    Filters projects by topics.
    """
    topics: [String!]
  ): ProjectConnection

  """
  Information about the complexity of the GraphQL query.
  """
  queryComplexity: QueryComplexity

  """
  Find a runner.
  """
  runner(
    """
    Runner ID.
    """
    id: CiRunnerID!
  ): CiRunner

  """
  Supported runner platforms.
  """
  runnerPlatforms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RunnerPlatformConnection

  """
  Runner setup instructions.
  """
  runnerSetup(
    """
    Architecture to generate the instructions for.
    """
    architecture: String!

    """
    Group to register the runner for. Deprecated in 13.11: No longer used.
    """
    groupId: GroupID @deprecated(reason: "No longer used. Deprecated in 13.11.")

    """
    Platform to generate the instructions for.
    """
    platform: String!

    """
    Project to register the runner for. Deprecated in 13.11: No longer used.
    """
    projectId: ProjectID @deprecated(reason: "No longer used. Deprecated in 13.11.")
  ): RunnerSetup

  """
  Find runners visible to the current user.
  """
  runners(
    """
    Filter runners by `active` (true) or `paused` (false) status. Deprecated in 14.8: This was renamed.
    """
    active: Boolean @deprecated(reason: "This was renamed. Please use `paused`. Deprecated in 14.8.")

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter runners by `paused` (true) or `active` (false) status.
    """
    paused: Boolean

    """
    Filter by full token or partial text in description field.
    """
    search: String

    """
    Sort order of results.
    """
    sort: CiRunnerSort

    """
    Filter runners by status.
    """
    status: CiRunnerStatus

    """
    Filter by tags associated with the runner (comma-separated or array).
    """
    tagList: [String!]

    """
    Filter runners by type.
    """
    type: CiRunnerType

    """
    Filter by upgrade status.
    """
    upgradeStatus: CiRunnerUpgradeStatus
  ): CiRunnerConnection

  """
  Find Snippets visible to the current user.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: UserID

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Explore personal snippets.
    """
    explore: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: ProjectID

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Find timelogs visible to the current user.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  Retrieve a single to-do item
  """
  todo(
    """
    ID of the to-do item.
    """
    id: TodoID!
  ): Todo

  """
  Find project topics.
  """
  topics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query for topic name.
    """
    search: String
  ): TopicConnection

  """
  Get statistics on the instance.
  """
  usageTrendsMeasurements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Type of measurement or statistics to retrieve.
    """
    identifier: MeasurementIdentifier!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Measurement recorded after this date.
    """
    recordedAfter: Time

    """
    Measurement recorded before this date.
    """
    recordedBefore: Time
  ): UsageTrendsMeasurementConnection

  """
  Find a user.
  """
  user(
    """
    ID of the User.
    """
    id: UserID

    """
    Username of the User.
    """
    username: String
  ): UserCore

  """
  Find users.
  """
  users(
    """
    Return only admin users.
    """
    admins: Boolean = false

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List of user Global IDs.
    """
    ids: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Query to search users by name, username, or primary email.
    """
    search: String

    """
    Sort users by this criteria.
    """
    sort: Sort = created_desc

    """
    List of usernames.
    """
    usernames: [String!]
  ): UserCoreConnection

  """
  Find a work item. Returns `null` if `work_items` feature flag is disabled.
  Introduced in 15.1: This feature is in Alpha. It can be changed or removed at any time.
  """
  workItem(
    """
    Global ID of the work item.
    """
    id: WorkItemID!
  ): WorkItem @deprecated(reason: "This feature is in Alpha. It can be changed or removed at any time. Introduced in 15.1.")
}

type QueryComplexity {
  """
  GraphQL query complexity limit.
  """
  limit: Int

  """
  GraphQL query complexity score.
  """
  score: Int
}

"""
Recent failure history of a test case.
"""
type RecentFailures {
  """
  Name of the base branch of the project.
  """
  baseBranch: String

  """
  Number of times the test case has failed in the past 14 days.
  """
  count: Int
}

"""
Represents a release
"""
type Release {
  """
  Assets of the release.
  """
  assets: ReleaseAssets

  """
  User that created the release.
  """
  author: UserCore

  """
  Commit associated with the release.
  """
  commit: Commit

  """
  Timestamp of when the release was created.
  """
  createdAt: Time

  """
  Description (also known as "release notes") of the release.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Evidence for the release.
  """
  evidences(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReleaseEvidenceConnection

  """
  Indicates the release is an historical release.
  """
  historicalRelease: Boolean

  """
  Global ID of the release.
  """
  id: ReleaseID!

  """
  Links of the release.
  """
  links: ReleaseLinks

  """
  Milestones associated to the release.
  """
  milestones(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MilestoneConnection

  """
  Name of the release.
  """
  name: String

  """
  Timestamp of when the release was released.
  """
  releasedAt: Time

  """
  Name of the tag associated with the release.
  """
  tagName: String

  """
  Relative web path to the tag associated with the release.
  """
  tagPath: String

  """
  Indicates the release is an upcoming release.
  """
  upcomingRelease: Boolean
}

"""
Represents an asset link associated with a release
"""
type ReleaseAssetLink {
  """
  Relative path for the direct asset link.
  """
  directAssetPath: String

  """
  Direct asset URL of the link.
  """
  directAssetUrl: String

  """
  Indicates the link points to an external resource.
  """
  external: Boolean

  """
  ID of the link.
  """
  id: ID!

  """
  Type of the link: `other`, `runbook`, `image`, `package`; defaults to `other`.
  """
  linkType: ReleaseAssetLinkType

  """
  Name of the link.
  """
  name: String

  """
  URL of the link.
  """
  url: String
}

"""
The connection type for ReleaseAssetLink.
"""
type ReleaseAssetLinkConnection {
  """
  A list of edges.
  """
  edges: [ReleaseAssetLinkEdge]

  """
  A list of nodes.
  """
  nodes: [ReleaseAssetLink]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of ReleaseAssetLinkCreate
"""
input ReleaseAssetLinkCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Relative path for a direct asset link.
  """
  directAssetPath: String

  """
  Type of the asset link.
  """
  linkType: ReleaseAssetLinkType = OTHER

  """
  Name of the asset link.
  """
  name: String!

  """
  Full path of the project the asset link is associated with.
  """
  projectPath: ID!

  """
  Name of the associated release's tag.
  """
  tagName: String!

  """
  URL of the asset link.
  """
  url: String!
}

"""
Autogenerated return type of ReleaseAssetLinkCreate
"""
type ReleaseAssetLinkCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Asset link after mutation.
  """
  link: ReleaseAssetLink
}

"""
Autogenerated input type of ReleaseAssetLinkDelete
"""
input ReleaseAssetLinkDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the release asset link to delete.
  """
  id: ReleasesLinkID!
}

"""
Autogenerated return type of ReleaseAssetLinkDelete
"""
type ReleaseAssetLinkDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Deleted release asset link.
  """
  link: ReleaseAssetLink
}

"""
An edge in a connection.
"""
type ReleaseAssetLinkEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReleaseAssetLink
}

"""
Fields that are available when modifying a release asset link
"""
input ReleaseAssetLinkInput {
  """
  Relative path for a direct asset link.
  """
  directAssetPath: String

  """
  Type of the asset link.
  """
  linkType: ReleaseAssetLinkType = OTHER

  """
  Name of the asset link.
  """
  name: String!

  """
  URL of the asset link.
  """
  url: String!
}

"""
Type of the link: `other`, `runbook`, `image`, `package`
"""
enum ReleaseAssetLinkType {
  """
  Image link type
  """
  IMAGE

  """
  Other link type
  """
  OTHER

  """
  Package link type
  """
  PACKAGE

  """
  Runbook link type
  """
  RUNBOOK
}

"""
Autogenerated input type of ReleaseAssetLinkUpdate
"""
input ReleaseAssetLinkUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Relative path for a direct asset link.
  """
  directAssetPath: String

  """
  ID of the release asset link to update.
  """
  id: ReleasesLinkID!

  """
  Type of the asset link.
  """
  linkType: ReleaseAssetLinkType

  """
  Name of the asset link.
  """
  name: String

  """
  URL of the asset link.
  """
  url: String
}

"""
Autogenerated return type of ReleaseAssetLinkUpdate
"""
type ReleaseAssetLinkUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Asset link after mutation.
  """
  link: ReleaseAssetLink
}

"""
A container for all assets associated with a release
"""
type ReleaseAssets {
  """
  Number of assets of the release.
  """
  count: Int

  """
  Asset links of the release.
  """
  links(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReleaseAssetLinkConnection

  """
  Sources of the release.
  """
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReleaseSourceConnection
}

"""
Fields that are available when modifying release assets
"""
input ReleaseAssetsInput {
  """
  List of asset links to associate to the release.
  """
  links: [ReleaseAssetLinkInput!]
}

"""
The connection type for Release.
"""
type ReleaseConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [ReleaseEdge]

  """
  A list of nodes.
  """
  nodes: [Release]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of ReleaseCreate
"""
input ReleaseCreateInput {
  """
  Assets associated to the release.
  """
  assets: ReleaseAssetsInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description (also known as "release notes") of the release.
  """
  description: String

  """
  Title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
  """
  milestones: [String!]

  """
  Name of the release.
  """
  name: String

  """
  Full path of the project the release is associated with.
  """
  projectPath: ID!

  """
  Commit SHA or branch name to use if creating a new tag.
  """
  ref: String

  """
  Date and time for the release. Defaults to the current date and time.
  """
  releasedAt: Time

  """
  Message to use if creating a new annotated tag.
  """
  tagMessage: String

  """
  Name of the tag to associate with the release.
  """
  tagName: String!
}

"""
Autogenerated return type of ReleaseCreate
"""
type ReleaseCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Release after mutation.
  """
  release: Release
}

"""
Autogenerated input type of ReleaseDelete
"""
input ReleaseDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project the release is associated with.
  """
  projectPath: ID!

  """
  Name of the tag associated with the release to delete.
  """
  tagName: String!
}

"""
Autogenerated return type of ReleaseDelete
"""
type ReleaseDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Deleted release.
  """
  release: Release
}

"""
An edge in a connection.
"""
type ReleaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Release
}

"""
Evidence for a release
"""
type ReleaseEvidence {
  """
  Timestamp when the evidence was collected.
  """
  collectedAt: Time

  """
  URL from where the evidence can be downloaded.
  """
  filepath: String

  """
  ID of the evidence.
  """
  id: ID!

  """
  SHA1 ID of the evidence hash.
  """
  sha: String
}

"""
The connection type for ReleaseEvidence.
"""
type ReleaseEvidenceConnection {
  """
  A list of edges.
  """
  edges: [ReleaseEvidenceEdge]

  """
  A list of nodes.
  """
  nodes: [ReleaseEvidence]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ReleaseEvidenceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReleaseEvidence
}

"""
A `ReleaseID` is a global ID. It is encoded as a string.

An example `ReleaseID` is: `"gid://gitlab/Release/1"`.
"""
scalar ReleaseID

type ReleaseLinks {
  """
  HTTP URL of the issues page, filtered by this release and `state=closed`.
  """
  closedIssuesUrl: String

  """
  HTTP URL of the merge request page , filtered by this release and `state=closed`.
  """
  closedMergeRequestsUrl: String

  """
  HTTP URL of the release's edit page.
  """
  editUrl: String

  """
  HTTP URL of the merge request page , filtered by this release and `state=merged`.
  """
  mergedMergeRequestsUrl: String

  """
  HTTP URL of the issues page, filtered by this release and `state=open`.
  """
  openedIssuesUrl: String

  """
  HTTP URL of the merge request page, filtered by this release and `state=open`.
  """
  openedMergeRequestsUrl: String

  """
  HTTP URL of the release.
  """
  selfUrl: String
}

"""
Values for sorting releases
"""
enum ReleaseSort {
  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Released at by ascending order.
  """
  RELEASED_AT_ASC

  """
  Released at by descending order.
  """
  RELEASED_AT_DESC
}

"""
Represents the source code attached to a release in a particular format
"""
type ReleaseSource {
  """
  Format of the source.
  """
  format: String

  """
  Download URL of the source.
  """
  url: String
}

"""
The connection type for ReleaseSource.
"""
type ReleaseSourceConnection {
  """
  A list of edges.
  """
  edges: [ReleaseSourceEdge]

  """
  A list of nodes.
  """
  nodes: [ReleaseSource]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ReleaseSourceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReleaseSource
}

"""
Release tag ID wildcard values
"""
enum ReleaseTagWildcardId {
  """
  Release tag is assigned.
  """
  ANY

  """
  No release tag is assigned.
  """
  NONE
}

"""
Autogenerated input type of ReleaseUpdate
"""
input ReleaseUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description (release notes) of the release.
  """
  description: String

  """
  Title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
  """
  milestones: [String!]

  """
  Name of the release.
  """
  name: String

  """
  Full path of the project the release is associated with.
  """
  projectPath: ID!

  """
  Release date.
  """
  releasedAt: Time

  """
  Name of the tag associated with the release.
  """
  tagName: String!
}

"""
Autogenerated return type of ReleaseUpdate
"""
type ReleaseUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Release after mutation.
  """
  release: Release
}

"""
A `ReleasesLinkID` is a global ID. It is encoded as a string.

An example `ReleasesLinkID` is: `"gid://gitlab/Releases::Link/1"`.
"""
scalar ReleasesLinkID

"""
Autogenerated input type of RepositionImageDiffNote
"""
input RepositionImageDiffNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the DiffNote to update.
  """
  id: DiffNoteID!

  """
  Position of this note on a diff.
  """
  position: UpdateDiffImagePositionInput!
}

"""
Autogenerated return type of RepositionImageDiffNote
"""
type RepositionImageDiffNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

type Repository {
  """
  Blobs contained within the repository
  """
  blobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Array of desired blob paths.
    """
    paths: [String!]!

    """
    Commit ref to get the blobs from. Default value is HEAD.
    """
    ref: String = null
  ): RepositoryBlobConnection

  """
  Names of branches available in this repository that match the search pattern.
  """
  branchNames(
    """
    Number of branch names to return.
    """
    limit: Int!

    """
    Number of branch names to skip.
    """
    offset: Int!

    """
    Pattern to search for branch names by.
    """
    searchPattern: String!
  ): [String!]

  """
  Shows a disk path of the repository.
  """
  diskPath: String

  """
  Indicates repository has no visible content.
  """
  empty: Boolean!

  """
  Indicates a corresponding Git repository exists on disk.
  """
  exists: Boolean!

  """
  Paginated tree of the repository.
  """
  paginatedTree(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Path to get the tree for. Default value is the root of the repository.
    """
    path: String = ""

    """
    Used to get a recursive tree. Default is false.
    """
    recursive: Boolean = false

    """
    Commit ref to get the tree for. Default value is HEAD.
    """
    ref: String
  ): TreeConnection

  """
  Default branch of the repository.
  """
  rootRef: String

  """
  Tree of the repository.
  """
  tree(
    """
    Path to get the tree for. Default value is the root of the repository.
    """
    path: String = ""

    """
    Used to get a recursive tree. Default is false.
    """
    recursive: Boolean = false

    """
    Commit ref to get the tree for. Default value is HEAD.
    """
    ref: String
  ): Tree
}

type RepositoryBlob {
  """
  Whether the current project is archived.
  """
  archived: Boolean

  """
  Web path to blob blame page.
  """
  blamePath: String

  """
  Whether the current user can push to the branch.
  """
  canCurrentUserPushToBranch: Boolean

  """
  Whether the current user can modify the blob.
  """
  canModifyBlob: Boolean

  """
  Web path for code navigation.
  """
  codeNavigationPath: String

  """
  Web path to edit the blob in the old-style editor.
  """
  editBlobPath: String

  """
  Web path to blob on an environment.
  """
  environmentExternalUrlForRouteMap: String

  """
  Environment on which the blob is available.
  """
  environmentFormattedExternalUrl: String

  """
  External storage being used, if enabled (for instance, 'LFS').
  """
  externalStorage: String

  """
  Web path to download the raw blob via external storage, if enabled.
  """
  externalStorageUrl: String

  """
  Expected format of the blob based on the extension.
  """
  fileType: String

  """
  Web path to find file.
  """
  findFilePath: String

  """
  Web path to edit this blob using a forked project.
  """
  forkAndEditPath: String

  """
  Web path to view this blob using a forked project.
  """
  forkAndViewPath: String

  """
  URL to the blob within Gitpod.
  """
  gitpodBlobUrl: String

  """
  Web path to blob history page.
  """
  historyPath: String

  """
  ID of the blob.
  """
  id: ID!

  """
  Web path to edit this blob in the Web IDE.
  """
  ideEditPath: String

  """
  Web path to edit this blob in the Web IDE using a forked project.
  """
  ideForkAndEditPath: String

  """
  Blob language.
  """
  language: String

  """
  LFS OID of the blob.
  """
  lfsOid: String

  """
  Blob mode.
  """
  mode: String

  """
  Blob name.
  """
  name: String

  """
  OID of the blob.
  """
  oid: String!

  """
  Path of the blob.
  """
  path: String!

  """
  Web path to blob permalink.
  """
  permalinkPath: String

  """
  Web path to edit .gitlab-ci.yml file.
  """
  pipelineEditorPath: String

  """
  Blob plain highlighted data.
  """
  plainData: String

  """
  Web path for the root of the blob.
  """
  projectBlobPathRoot: String

  """
  Raw content of the blob.
  """
  rawBlob: String

  """
  Web path to download the raw blob.
  """
  rawPath: String

  """
  Size (in bytes) of the blob, or the blob target if stored externally.
  """
  rawSize: Int

  """
  Raw content of the blob, if the blob is text data.
  """
  rawTextBlob: String

  """
  Web path to replace the blob content.
  """
  replacePath: String

  """
  Blob content rich viewer.
  """
  richViewer: BlobViewer

  """
  Blob content simple viewer.
  """
  simpleViewer: BlobViewer!

  """
  Size (in bytes) of the blob.
  """
  size: Int

  """
  Whether the blob's content is stored externally (for instance, in LFS).
  """
  storedExternally: Boolean

  """
  Web path of the blob.
  """
  webPath: String
}

"""
The connection type for RepositoryBlob.
"""
type RepositoryBlobConnection {
  """
  A list of edges.
  """
  edges: [RepositoryBlobEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryBlob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RepositoryBlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryBlob
}

interface ResolvableInterface {
  """
  Indicates if the object can be resolved.
  """
  resolvable: Boolean!

  """
  Indicates if the object is resolved.
  """
  resolved: Boolean!

  """
  Timestamp of when the object was resolved.
  """
  resolvedAt: Time

  """
  User who resolved the object.
  """
  resolvedBy: UserCore
}

type RootStorageStatistics {
  """
  CI artifacts size in bytes.
  """
  buildArtifactsSize: Float!

  """
  Container Registry size in bytes.
  """
  containerRegistrySize: Float!

  """
  Dependency Proxy sizes in bytes.
  """
  dependencyProxySize: Float!

  """
  LFS objects size in bytes.
  """
  lfsObjectsSize: Float!

  """
  Packages size in bytes.
  """
  packagesSize: Float!

  """
  CI pipeline artifacts size in bytes.
  """
  pipelineArtifactsSize: Float!

  """
  Git repository size in bytes.
  """
  repositorySize: Float!

  """
  Snippets size in bytes.
  """
  snippetsSize: Float!

  """
  Total storage in bytes.
  """
  storageSize: Float!

  """
  Uploads size in bytes.
  """
  uploadsSize: Float!

  """
  Wiki size in bytes.
  """
  wikiSize: Float!
}

type RunnerArchitecture {
  """
  Download location for the runner for the platform architecture.
  """
  downloadLocation: String!

  """
  Name of the runner platform architecture.
  """
  name: String!
}

"""
The connection type for RunnerArchitecture.
"""
type RunnerArchitectureConnection {
  """
  A list of edges.
  """
  edges: [RunnerArchitectureEdge]

  """
  A list of nodes.
  """
  nodes: [RunnerArchitecture]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RunnerArchitectureEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RunnerArchitecture
}

"""
Autogenerated input type of RunnerDelete
"""
input RunnerDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the runner to delete.
  """
  id: CiRunnerID!
}

"""
Autogenerated return type of RunnerDelete
"""
type RunnerDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Values for filtering runners in namespaces.
"""
enum RunnerMembershipFilter {
  """
  Include runners that have either a direct relationship or a relationship with
  descendants. These can be project runners or group runners (in the case where
  group is queried).
  """
  DESCENDANTS

  """
  Include runners that have a direct relationship.
  """
  DIRECT
}

type RunnerPermissions {
  """
  Indicates the user can perform `delete_runner` on this resource
  """
  deleteRunner: Boolean!

  """
  Indicates the user can perform `read_runner` on this resource
  """
  readRunner: Boolean!

  """
  Indicates the user can perform `update_runner` on this resource
  """
  updateRunner: Boolean!
}

type RunnerPlatform {
  """
  Runner architectures supported for the platform.
  """
  architectures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RunnerArchitectureConnection

  """
  Human readable name of the runner platform.
  """
  humanReadableName: String!

  """
  Name slug of the runner platform.
  """
  name: String!
}

"""
The connection type for RunnerPlatform.
"""
type RunnerPlatformConnection {
  """
  A list of edges.
  """
  edges: [RunnerPlatformEdge]

  """
  A list of nodes.
  """
  nodes: [RunnerPlatform]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RunnerPlatformEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RunnerPlatform
}

type RunnerSetup {
  """
  Instructions for installing the runner on the specified architecture.
  """
  installInstructions: String!

  """
  Instructions for registering the runner. The actual registration tokens are
  not included in the commands. Instead, a placeholder `$REGISTRATION_TOKEN` is shown.
  """
  registerInstructions: String
}

"""
Autogenerated input type of RunnerUpdate
"""
input RunnerUpdateInput {
  """
  Access level of the runner.
  """
  accessLevel: CiRunnerAccessLevel

  """
  Indicates the runner is allowed to receive jobs. Deprecated in 14.8: This was renamed.
  """
  active: Boolean @deprecated(reason: "This was renamed. Please use `paused`. Deprecated in 14.8.")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of the runner.
  """
  description: String

  """
  ID of the runner to update.
  """
  id: CiRunnerID!

  """
  Indicates the runner is locked.
  """
  locked: Boolean

  """
  Runner's maintenance notes.
  """
  maintenanceNote: String

  """
  Maximum timeout (in seconds) for jobs processed by the runner.
  """
  maximumTimeout: Int

  """
  Indicates the runner is not allowed to receive jobs.
  """
  paused: Boolean

  """
  Indicates the runner is able to run untagged jobs.
  """
  runUntagged: Boolean

  """
  Tags associated with the runner.
  """
  tagList: [String!]
}

"""
Autogenerated return type of RunnerUpdate
"""
type RunnerUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Runner after mutation.
  """
  runner: CiRunner
}

"""
Autogenerated input type of RunnersRegistrationTokenReset
"""
input RunnersRegistrationTokenResetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the project or group to reset the token for. Omit if resetting instance runner token.
  """
  id: ID

  """
  Scope of the object to reset the token for.
  """
  type: CiRunnerType!
}

"""
Autogenerated return type of RunnersRegistrationTokenReset
"""
type RunnersRegistrationTokenResetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Runner token after mutation.
  """
  token: String
}

"""
Represents a CI configuration of SAST
"""
type SastCiConfiguration {
  """
  List of analyzers entities attached to SAST configuration.
  """
  analyzers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SastCiConfigurationAnalyzersEntityConnection

  """
  List of global entities related to SAST configuration.
  """
  global(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SastCiConfigurationEntityConnection

  """
  List of pipeline entities related to SAST configuration.
  """
  pipeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SastCiConfigurationEntityConnection
}

"""
Represents an analyzer entity in SAST CI configuration
"""
type SastCiConfigurationAnalyzersEntity {
  """
  Analyzer description that is displayed on the form.
  """
  description: String

  """
  Indicates whether an analyzer is enabled.
  """
  enabled: Boolean

  """
  Analyzer label used in the config UI.
  """
  label: String

  """
  Name of the analyzer.
  """
  name: String

  """
  List of supported variables.
  """
  variables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SastCiConfigurationEntityConnection
}

"""
The connection type for SastCiConfigurationAnalyzersEntity.
"""
type SastCiConfigurationAnalyzersEntityConnection {
  """
  A list of edges.
  """
  edges: [SastCiConfigurationAnalyzersEntityEdge]

  """
  A list of nodes.
  """
  nodes: [SastCiConfigurationAnalyzersEntity]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SastCiConfigurationAnalyzersEntityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SastCiConfigurationAnalyzersEntity
}

"""
Represents the analyzers entity in SAST CI configuration
"""
input SastCiConfigurationAnalyzersEntityInput {
  """
  State of the analyzer.
  """
  enabled: Boolean!

  """
  Name of analyzer.
  """
  name: String!

  """
  List of variables for the analyzer.
  """
  variables: [SastCiConfigurationEntityInput!]
}

"""
Represents an entity in SAST CI configuration
"""
type SastCiConfigurationEntity {
  """
  Default value that is used if value is empty.
  """
  defaultValue: String

  """
  Entity description that is displayed on the form.
  """
  description: String

  """
  CI keyword of entity.
  """
  field: String

  """
  Label for entity used in the form.
  """
  label: String

  """
  Different possible values of the field.
  """
  options(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SastCiConfigurationOptionsEntityConnection

  """
  Size of the UI component.
  """
  size: SastUiComponentSize

  """
  Type of the field value.
  """
  type: String

  """
  Current value of the entity.
  """
  value: String
}

"""
The connection type for SastCiConfigurationEntity.
"""
type SastCiConfigurationEntityConnection {
  """
  A list of edges.
  """
  edges: [SastCiConfigurationEntityEdge]

  """
  A list of nodes.
  """
  nodes: [SastCiConfigurationEntity]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SastCiConfigurationEntityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SastCiConfigurationEntity
}

"""
Represents an entity in SAST CI configuration
"""
input SastCiConfigurationEntityInput {
  """
  Default value that is used if value is empty.
  """
  defaultValue: String!

  """
  CI keyword of entity.
  """
  field: String!

  """
  Current value of the entity.
  """
  value: String!
}

"""
Represents a CI configuration of SAST
"""
input SastCiConfigurationInput {
  """
  List of analyzers and related variables for the SAST configuration.
  """
  analyzers: [SastCiConfigurationAnalyzersEntityInput!]

  """
  List of global entities related to SAST configuration.
  """
  global: [SastCiConfigurationEntityInput!]

  """
  List of pipeline entities related to SAST configuration.
  """
  pipeline: [SastCiConfigurationEntityInput!]
}

"""
Represents an entity for options in SAST CI configuration
"""
type SastCiConfigurationOptionsEntity {
  """
  Label of option entity.
  """
  label: String

  """
  Value of option entity.
  """
  value: String
}

"""
The connection type for SastCiConfigurationOptionsEntity.
"""
type SastCiConfigurationOptionsEntityConnection {
  """
  A list of edges.
  """
  edges: [SastCiConfigurationOptionsEntityEdge]

  """
  A list of nodes.
  """
  nodes: [SastCiConfigurationOptionsEntity]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SastCiConfigurationOptionsEntityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SastCiConfigurationOptionsEntity
}

"""
Size of UI component in SAST configuration page
"""
enum SastUiComponentSize {
  """
  Size of UI component in SAST configuration page is large.
  """
  LARGE

  """
  Size of UI component in SAST configuration page is medium.
  """
  MEDIUM

  """
  Size of UI component in SAST configuration page is small.
  """
  SMALL
}

type SavedReply {
  """
  Content of the saved reply.
  """
  content: String!

  """
  Global ID of the saved reply.
  """
  id: UsersSavedReplyID!

  """
  Name of the saved reply.
  """
  name: String!
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of SavedReplyCreate
"""
input SavedReplyCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Content of the saved reply.
  """
  content: String!

  """
  Name of the saved reply.
  """
  name: String!
}

"""
Autogenerated return type of SavedReplyCreate
"""
type SavedReplyCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Saved reply after mutation.
  """
  savedReply: SavedReply
}

"""
Autogenerated input type of SavedReplyDestroy
"""
input SavedReplyDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the saved reply.
  """
  id: UsersSavedReplyID!
}

"""
Autogenerated return type of SavedReplyDestroy
"""
type SavedReplyDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Saved reply after mutation.
  """
  savedReply: SavedReply
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Autogenerated input type of SavedReplyUpdate
"""
input SavedReplyUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Content of the saved reply.
  """
  content: String!

  """
  Global ID of the saved reply.
  """
  id: UsersSavedReplyID!

  """
  Name of the saved reply.
  """
  name: String!
}

"""
Autogenerated return type of SavedReplyUpdate
"""
type SavedReplyUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Saved reply after mutation.
  """
  savedReply: SavedReply
}

enum SecurityReportTypeEnum {
  """
  API FUZZING scan report
  """
  API_FUZZING

  """
  CLUSTER IMAGE SCANNING scan report
  """
  CLUSTER_IMAGE_SCANNING

  """
  CONTAINER SCANNING scan report
  """
  CONTAINER_SCANNING

  """
  COVERAGE FUZZING scan report
  """
  COVERAGE_FUZZING

  """
  DAST scan report
  """
  DAST

  """
  DEPENDENCY SCANNING scan report
  """
  DEPENDENCY_SCANNING

  """
  SAST scan report
  """
  SAST

  """
  SAST IAC scan report
  """
  SAST_IAC

  """
  SECRET DETECTION scan report
  """
  SECRET_DETECTION
}

"""
A Sentry error
"""
type SentryDetailedError {
  """
  Count of occurrences.
  """
  count: Int!

  """
  Culprit of the error.
  """
  culprit: String!

  """
  External Base URL of the Sentry Instance.
  """
  externalBaseUrl: String!

  """
  External URL of the error.
  """
  externalUrl: String!

  """
  Commit the error was first seen.
  """
  firstReleaseLastCommit: String

  """
  Release short version the error was first seen.
  """
  firstReleaseShortVersion: String

  """
  Release version the error was first seen.
  """
  firstReleaseVersion: String

  """
  Timestamp when the error was first seen.
  """
  firstSeen: Time!

  """
  Last 24hr stats of the error.
  """
  frequency: [SentryErrorFrequency!]!

  """
  GitLab commit SHA attributed to the Error based on the release version.
  """
  gitlabCommit: String

  """
  Path to the GitLab page for the GitLab commit attributed to the error.
  """
  gitlabCommitPath: String

  """
  URL of GitLab Issue.
  """
  gitlabIssuePath: String

  """
  ID (global ID) of the error.
  """
  id: ID!

  """
  Error tracking backend.
  """
  integrated: Boolean

  """
  Commit the error was last seen.
  """
  lastReleaseLastCommit: String

  """
  Release short version the error was last seen.
  """
  lastReleaseShortVersion: String

  """
  Release version the error was last seen.
  """
  lastReleaseVersion: String

  """
  Timestamp when the error was last seen.
  """
  lastSeen: Time!

  """
  Sentry metadata message of the error.
  """
  message: String

  """
  ID (Sentry ID) of the error.
  """
  sentryId: String!

  """
  ID of the project (Sentry project).
  """
  sentryProjectId: ID!

  """
  Name of the project affected by the error.
  """
  sentryProjectName: String!

  """
  Slug of the project affected by the error.
  """
  sentryProjectSlug: String!

  """
  Short ID (Sentry ID) of the error.
  """
  shortId: String!

  """
  Status of the error.
  """
  status: SentryErrorStatus!

  """
  Tags associated with the Sentry Error.
  """
  tags: SentryErrorTags!

  """
  Title of the error.
  """
  title: String!

  """
  Type of the error.
  """
  type: String!

  """
  Count of users affected by the error.
  """
  userCount: Int!
}

"""
A Sentry error. A simplified version of SentryDetailedError
"""
type SentryError {
  """
  Count of occurrences.
  """
  count: Int!

  """
  Culprit of the error.
  """
  culprit: String!

  """
  External URL of the error.
  """
  externalUrl: String!

  """
  Timestamp when the error was first seen.
  """
  firstSeen: Time!

  """
  Last 24hr stats of the error.
  """
  frequency: [SentryErrorFrequency!]!

  """
  ID (global ID) of the error.
  """
  id: ID!

  """
  Timestamp when the error was last seen.
  """
  lastSeen: Time!

  """
  Sentry metadata message of the error.
  """
  message: String

  """
  ID (Sentry ID) of the error.
  """
  sentryId: String!

  """
  ID of the project (Sentry project).
  """
  sentryProjectId: ID!

  """
  Name of the project affected by the error.
  """
  sentryProjectName: String!

  """
  Slug of the project affected by the error.
  """
  sentryProjectSlug: String!

  """
  Short ID (Sentry ID) of the error.
  """
  shortId: String!

  """
  Status of the error.
  """
  status: SentryErrorStatus!

  """
  Title of the error.
  """
  title: String!

  """
  Type of the error.
  """
  type: String!

  """
  Count of users affected by the error.
  """
  userCount: Int!
}

"""
An object containing a collection of Sentry errors, and a detailed error
"""
type SentryErrorCollection {
  """
  Detailed version of a Sentry error on the project.
  """
  detailedError(
    """
    ID of the Sentry issue.
    """
    id: GitlabErrorTrackingDetailedErrorID!
  ): SentryDetailedError

  """
  Stack Trace of Sentry Error.
  """
  errorStackTrace(
    """
    ID of the Sentry issue.
    """
    id: GitlabErrorTrackingDetailedErrorID!
  ): SentryErrorStackTrace

  """
  Collection of Sentry Errors.
  """
  errors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query for the Sentry error details.
    """
    searchTerm: String

    """
    Attribute to sort on. Options are frequency, first_seen, last_seen. last_seen is default.
    """
    sort: String
  ): SentryErrorConnection

  """
  External URL for Sentry.
  """
  externalUrl: String
}

"""
The connection type for SentryError.
"""
type SentryErrorConnection {
  """
  A list of edges.
  """
  edges: [SentryErrorEdge]

  """
  A list of nodes.
  """
  nodes: [SentryError]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SentryErrorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SentryError
}

type SentryErrorFrequency {
  """
  Count of errors received since the previously recorded time.
  """
  count: Int!

  """
  Time the error frequency stats were recorded.
  """
  time: Time!
}

"""
An object containing a stack trace entry for a Sentry error
"""
type SentryErrorStackTrace {
  """
  Time the stack trace was received by Sentry.
  """
  dateReceived: String!

  """
  ID of the Sentry error.
  """
  issueId: String!

  """
  Stack trace entries for the Sentry error.
  """
  stackTraceEntries: [SentryErrorStackTraceEntry!]!
}

"""
An object context for a Sentry error stack trace
"""
type SentryErrorStackTraceContext {
  """
  Code number of the context.
  """
  code: String!

  """
  Line number of the context.
  """
  line: Int!
}

"""
An object containing a stack trace entry for a Sentry error
"""
type SentryErrorStackTraceEntry {
  """
  Function in which the Sentry error occurred.
  """
  col: String

  """
  File in which the Sentry error occurred.
  """
  fileName: String

  """
  Function in which the Sentry error occurred.
  """
  function: String

  """
  Function in which the Sentry error occurred.
  """
  line: String

  """
  Context of the Sentry error.
  """
  traceContext: [SentryErrorStackTraceContext!]
}

"""
State of a Sentry error
"""
enum SentryErrorStatus {
  """
  Error has been ignored.
  """
  IGNORED

  """
  Error has been resolved.
  """
  RESOLVED

  """
  Error has been ignored until next release.
  """
  RESOLVED_IN_NEXT_RELEASE

  """
  Error is unresolved.
  """
  UNRESOLVED
}

"""
State of a Sentry error
"""
type SentryErrorTags {
  """
  Severity level of the Sentry Error.
  """
  level: String

  """
  Logger of the Sentry Error.
  """
  logger: String
}

interface Service {
  """
  Indicates if the service is active.
  """
  active: Boolean

  """
  Type of the service.
  """
  serviceType: ServiceType

  """
  Class name of the service.
  """
  type: String
}

"""
The connection type for Service.
"""
type ServiceConnection {
  """
  A list of edges.
  """
  edges: [ServiceEdge]

  """
  A list of nodes.
  """
  nodes: [Service]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ServiceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Service
}

enum ServiceType {
  """
  AsanaService type
  """
  ASANA_SERVICE

  """
  AssemblaService type
  """
  ASSEMBLA_SERVICE

  """
  BambooService type
  """
  BAMBOO_SERVICE

  """
  BugzillaService type
  """
  BUGZILLA_SERVICE

  """
  BuildkiteService type
  """
  BUILDKITE_SERVICE

  """
  CampfireService type
  """
  CAMPFIRE_SERVICE

  """
  ConfluenceService type
  """
  CONFLUENCE_SERVICE

  """
  CustomIssueTrackerService type
  """
  CUSTOM_ISSUE_TRACKER_SERVICE

  """
  DatadogService type
  """
  DATADOG_SERVICE

  """
  DiscordService type
  """
  DISCORD_SERVICE

  """
  DroneCiService type
  """
  DRONE_CI_SERVICE

  """
  EmailsOnPushService type
  """
  EMAILS_ON_PUSH_SERVICE

  """
  EwmService type
  """
  EWM_SERVICE

  """
  ExternalWikiService type
  """
  EXTERNAL_WIKI_SERVICE

  """
  FlowdockService type
  """
  FLOWDOCK_SERVICE

  """
  HangoutsChatService type
  """
  HANGOUTS_CHAT_SERVICE

  """
  HarborService type
  """
  HARBOR_SERVICE

  """
  IrkerService type
  """
  IRKER_SERVICE

  """
  JenkinsService type
  """
  JENKINS_SERVICE

  """
  JiraService type
  """
  JIRA_SERVICE

  """
  MattermostService type
  """
  MATTERMOST_SERVICE

  """
  MattermostSlashCommandsService type
  """
  MATTERMOST_SLASH_COMMANDS_SERVICE

  """
  MicrosoftTeamsService type
  """
  MICROSOFT_TEAMS_SERVICE

  """
  PackagistService type
  """
  PACKAGIST_SERVICE

  """
  PipelinesEmailService type
  """
  PIPELINES_EMAIL_SERVICE

  """
  PivotaltrackerService type
  """
  PIVOTALTRACKER_SERVICE

  """
  PrometheusService type
  """
  PROMETHEUS_SERVICE

  """
  PumbleService type
  """
  PUMBLE_SERVICE

  """
  PushoverService type
  """
  PUSHOVER_SERVICE

  """
  RedmineService type
  """
  REDMINE_SERVICE

  """
  ShimoService type
  """
  SHIMO_SERVICE

  """
  SlackService type
  """
  SLACK_SERVICE

  """
  SlackSlashCommandsService type
  """
  SLACK_SLASH_COMMANDS_SERVICE

  """
  TeamcityService type
  """
  TEAMCITY_SERVICE

  """
  UnifyCircuitService type
  """
  UNIFY_CIRCUIT_SERVICE

  """
  WebexTeamsService type
  """
  WEBEX_TEAMS_SERVICE

  """
  YoutrackService type
  """
  YOUTRACK_SERVICE

  """
  ZentaoService type
  """
  ZENTAO_SERVICE
}

"""
How to format SHA strings.
"""
enum ShaFormat {
  """
  Unabbreviated format.
  """
  LONG

  """
  Abbreviated format. Short SHAs are typically eight characters long.
  """
  SHORT
}

enum SharedRunnersSetting {
  """
  Sharing of runners is disabled and unoverridable.
  """
  DISABLED_AND_UNOVERRIDABLE

  """
  Sharing of runners is disabled with override.
  """
  DISABLED_WITH_OVERRIDE

  """
  Sharing of runners is enabled.
  """
  ENABLED
}

"""
Represents a snippet entry
"""
type Snippet implements NoteableInterface {
  """
  Owner of the snippet.
  """
  author: UserCore

  """
  Snippet blobs.
  """
  blobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Paths of the blobs.
    """
    paths: [String!]
  ): SnippetBlobConnection

  """
  Timestamp this snippet was created.
  """
  createdAt: Time!

  """
  Description of the snippet.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  File Name of the snippet.
  """
  fileName: String

  """
  HTTP URL to the snippet repository.
  """
  httpUrlToRepo: String

  """
  ID of the snippet.
  """
  id: SnippetID!

  """
  All notes on this noteable.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  Project the snippet is associated with.
  """
  project: Project

  """
  Raw URL of the snippet.
  """
  rawUrl: String!

  """
  SSH URL to the snippet repository.
  """
  sshUrlToRepo: String

  """
  Title of the snippet.
  """
  title: String!

  """
  Timestamp this snippet was updated.
  """
  updatedAt: Time!

  """
  Permissions for the current user on the resource
  """
  userPermissions: SnippetPermissions!

  """
  Visibility Level of the snippet.
  """
  visibilityLevel: VisibilityLevelsEnum!

  """
  Web URL of the snippet.
  """
  webUrl: String!
}

"""
Represents the snippet blob
"""
type SnippetBlob {
  """
  Shows whether the blob is binary.
  """
  binary: Boolean!

  """
  Blob external storage.
  """
  externalStorage: String

  """
  Blob mode.
  """
  mode: String

  """
  Blob name.
  """
  name: String

  """
  Blob path.
  """
  path: String

  """
  Blob plain highlighted data.
  """
  plainData: String

  """
  Blob raw content endpoint path.
  """
  rawPath: String!

  """
  Raw content of the blob, if the blob is text data.
  """
  rawPlainData: String

  """
  Shows whether the blob is rendered as text.
  """
  renderedAsText: Boolean!

  """
  Blob highlighted data.
  """
  richData: String

  """
  Blob content rich viewer.
  """
  richViewer: SnippetBlobViewer

  """
  Blob content simple viewer.
  """
  simpleViewer: SnippetBlobViewer!

  """
  Blob size.
  """
  size: Int!
}

"""
Type of a snippet blob input action
"""
enum SnippetBlobActionEnum {
  """
  Create a snippet blob.
  """
  create

  """
  Delete a snippet blob.
  """
  delete

  """
  Move a snippet blob.
  """
  move

  """
  Update a snippet blob.
  """
  update
}

"""
Represents an action to perform over a snippet file
"""
input SnippetBlobActionInputType {
  """
  Type of input action.
  """
  action: SnippetBlobActionEnum!

  """
  Snippet file content.
  """
  content: String

  """
  Path of the snippet file.
  """
  filePath: String!

  """
  Previous path of the snippet file.
  """
  previousPath: String
}

"""
The connection type for SnippetBlob.
"""
type SnippetBlobConnection {
  """
  A list of edges.
  """
  edges: [SnippetBlobEdge]

  """
  Indicates if the snippet has unretrievable blobs.
  """
  hasUnretrievableBlobs: Boolean!

  """
  A list of nodes.
  """
  nodes: [SnippetBlob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SnippetBlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SnippetBlob
}

"""
Represents how the blob content should be displayed
"""
type SnippetBlobViewer {
  """
  Shows whether the blob should be displayed collapsed.
  """
  collapsed: Boolean!

  """
  Content file type.
  """
  fileType: String!

  """
  Shows whether the blob content is loaded asynchronously.
  """
  loadAsync: Boolean!

  """
  Loading partial name.
  """
  loadingPartialName: String!

  """
  Error rendering the blob content.
  """
  renderError: String

  """
  Shows whether the blob is too large to be displayed.
  """
  tooLarge: Boolean!

  """
  Type of blob viewer.
  """
  type: BlobViewersType!
}

"""
The connection type for Snippet.
"""
type SnippetConnection {
  """
  A list of edges.
  """
  edges: [SnippetEdge]

  """
  A list of nodes.
  """
  nodes: [Snippet]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SnippetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Snippet
}

"""
A `SnippetID` is a global ID. It is encoded as a string.

An example `SnippetID` is: `"gid://gitlab/Snippet/1"`.
"""
scalar SnippetID

type SnippetPermissions {
  """
  Indicates the user can perform `admin_snippet` on this resource
  """
  adminSnippet: Boolean!

  """
  Indicates the user can perform `award_emoji` on this resource
  """
  awardEmoji: Boolean!

  """
  Indicates the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  Indicates the user can perform `read_snippet` on this resource
  """
  readSnippet: Boolean!

  """
  Indicates the user can perform `report_snippet` on this resource
  """
  reportSnippet: Boolean!

  """
  Indicates the user can perform `update_snippet` on this resource
  """
  updateSnippet: Boolean!
}

"""
Common sort values
"""
enum Sort {
  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Created at ascending order.
  """
  created_asc @deprecated(reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5.")

  """
  Created at descending order.
  """
  created_desc @deprecated(reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5.")

  """
  Updated at ascending order.
  """
  updated_asc @deprecated(reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5.")

  """
  Updated at descending order.
  """
  updated_desc @deprecated(reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5.")
}

type StatusAction {
  """
  Title for the button, for example: Retry this job.
  """
  buttonTitle: String

  """
  Icon used in the action button.
  """
  icon: String

  """
  ID for a status action.
  """
  id: String!

  """
  Method for the action, for example: :post.
  """
  method: String

  """
  Path for the action.
  """
  path: String

  """
  Title for the action, for example: Retry.
  """
  title: String
}

type Submodule implements Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Tree URL for the sub-module.
  """
  treeUrl: String

  """
  Type of tree entry.
  """
  type: EntryType!

  """
  Web URL for the sub-module.
  """
  webUrl: String
}

"""
The connection type for Submodule.
"""
type SubmoduleConnection {
  """
  A list of edges.
  """
  edges: [SubmoduleEdge]

  """
  A list of nodes.
  """
  nodes: [Submodule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SubmoduleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Submodule
}

type Subscription {
  """
  Triggered when the assignees of an issuable are updated.
  """
  issuableAssigneesUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the due date or start date of an issuable is updated.
  """
  issuableDatesUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the labels of an issuable are updated.
  """
  issuableLabelsUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the title of an issuable is updated.
  """
  issuableTitleUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the crm contacts of an issuable are updated.
  """
  issueCrmContactsUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable
}

"""
Completion status of tasks
"""
type TaskCompletionStatus {
  """
  Number of completed tasks.
  """
  completedCount: Int!

  """
  Number of total tasks.
  """
  count: Int!
}

type TerraformState {
  """
  Timestamp the Terraform state was created.
  """
  createdAt: Time!

  """
  Timestamp the Terraform state was deleted.
  """
  deletedAt: Time

  """
  ID of the Terraform state.
  """
  id: ID!

  """
  Latest version of the Terraform state.
  """
  latestVersion: TerraformStateVersion

  """
  Timestamp the Terraform state was locked.
  """
  lockedAt: Time

  """
  User currently holding a lock on the Terraform state.
  """
  lockedByUser: UserCore

  """
  Name of the Terraform state.
  """
  name: String!

  """
  Timestamp the Terraform state was updated.
  """
  updatedAt: Time!
}

"""
The connection type for TerraformState.
"""
type TerraformStateConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [TerraformStateEdge]

  """
  A list of nodes.
  """
  nodes: [TerraformState]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of TerraformStateDelete
"""
input TerraformStateDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the Terraform state.
  """
  id: TerraformStateID!
}

"""
Autogenerated return type of TerraformStateDelete
"""
type TerraformStateDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
An edge in a connection.
"""
type TerraformStateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TerraformState
}

"""
A `TerraformStateID` is a global ID. It is encoded as a string.

An example `TerraformStateID` is: `"gid://gitlab/Terraform::State/1"`.
"""
scalar TerraformStateID

"""
Autogenerated input type of TerraformStateLock
"""
input TerraformStateLockInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the Terraform state.
  """
  id: TerraformStateID!
}

"""
Autogenerated return type of TerraformStateLock
"""
type TerraformStateLockPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of TerraformStateUnlock
"""
input TerraformStateUnlockInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the Terraform state.
  """
  id: TerraformStateID!
}

"""
Autogenerated return type of TerraformStateUnlock
"""
type TerraformStateUnlockPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type TerraformStateVersion {
  """
  Timestamp the version was created.
  """
  createdAt: Time!

  """
  User that created this version.
  """
  createdByUser: UserCore

  """
  URL for downloading the version's JSON file.
  """
  downloadPath: String

  """
  ID of the Terraform state version.
  """
  id: ID!

  """
  Job that created this version.
  """
  job: CiJob

  """
  Serial number of the version.
  """
  serial: Int

  """
  Timestamp the version was updated.
  """
  updatedAt: Time!
}

"""
Test case in pipeline test report.
"""
type TestCase {
  """
  URL of the test case attachment file.
  """
  attachmentUrl: String

  """
  Classname of the test case.
  """
  classname: String

  """
  Test case execution time in seconds.
  """
  executionTime: Float

  """
  Path to the file of the test case.
  """
  file: String

  """
  Name of the test case.
  """
  name: String

  """
  Recent failure history of the test case on the base branch.
  """
  recentFailures: RecentFailures

  """
  Stack trace of the test case.
  """
  stackTrace: String

  """
  Status of the test case (error, failed, success, skipped).
  """
  status: TestCaseStatus

  """
  System output of the test case.
  """
  systemOutput: String
}

"""
The connection type for TestCase.
"""
type TestCaseConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [TestCaseEdge]

  """
  A list of nodes.
  """
  nodes: [TestCase]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TestCaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TestCase
}

enum TestCaseStatus {
  """
  Test case that has a status of error.
  """
  error

  """
  Test case that has a status of failed.
  """
  failed

  """
  Test case that has a status of skipped.
  """
  skipped

  """
  Test case that has a status of success.
  """
  success
}

"""
Test report for a pipeline
"""
type TestReportSummary {
  """
  Test suites belonging to a pipeline test report.
  """
  testSuites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TestSuiteSummaryConnection!

  """
  Total report statistics for a pipeline test report.
  """
  total: TestReportTotal!
}

"""
Total test report statistics.
"""
type TestReportTotal {
  """
  Total number of the test cases.
  """
  count: Int

  """
  Total number of test cases that had an error.
  """
  error: Int

  """
  Total number of test cases that failed.
  """
  failed: Int

  """
  Total number of test cases that were skipped.
  """
  skipped: Int

  """
  Total number of test cases that succeeded.
  """
  success: Int

  """
  Test suite error message.
  """
  suiteError: String

  """
  Total duration of the tests.
  """
  time: Float
}

"""
Test suite in a pipeline test report.
"""
type TestSuite {
  """
  Total number of test cases that had an error.
  """
  errorCount: Int

  """
  Total number of test cases that failed in the test suite.
  """
  failedCount: Int

  """
  Name of the test suite.
  """
  name: String

  """
  Total number of test cases that were skipped in the test suite.
  """
  skippedCount: Int

  """
  Total number of test cases that succeeded in the test suite.
  """
  successCount: Int

  """
  Test suite error message.
  """
  suiteError: String

  """
  Test cases in the test suite.
  """
  testCases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TestCaseConnection

  """
  Total number of the test cases in the test suite.
  """
  totalCount: Int

  """
  Total duration of the tests in the test suite.
  """
  totalTime: Float
}

"""
Test suite summary in a pipeline test report.
"""
type TestSuiteSummary {
  """
  IDs of the builds used to run the test suite.
  """
  buildIds: [ID!]

  """
  Total number of test cases that had an error.
  """
  errorCount: Int

  """
  Total number of test cases that failed in the test suite.
  """
  failedCount: Int

  """
  Name of the test suite.
  """
  name: String

  """
  Total number of test cases that were skipped in the test suite.
  """
  skippedCount: Int

  """
  Total number of test cases that succeeded in the test suite.
  """
  successCount: Int

  """
  Test suite error message.
  """
  suiteError: String

  """
  Total number of the test cases in the test suite.
  """
  totalCount: Int

  """
  Total duration of the tests in the test suite.
  """
  totalTime: Float
}

"""
The connection type for TestSuiteSummary.
"""
type TestSuiteSummaryConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [TestSuiteSummaryEdge]

  """
  A list of nodes.
  """
  nodes: [TestSuiteSummary]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TestSuiteSummaryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TestSuiteSummary
}

"""
Time represented in ISO 8601.

For example: "2021-03-09T14:58:50+00:00".

See `https://www.iso.org/iso-8601-date-and-time-format.html`.
"""
scalar Time

type TimeTrackingTimelogCategory {
  """
  Whether the category is billable or not.
  """
  billable: Boolean

  """
  Billing rate for the category.
  """
  billingRate: Float

  """
  Color assigned to the category.
  """
  color: Color

  """
  When the category was created.
  """
  createdAt: Time!

  """
  Description of the category.
  """
  description: String

  """
  Internal ID of the timelog category.
  """
  id: ID!

  """
  Name of the category.
  """
  name: String!

  """
  When the category was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for TimeTrackingTimelogCategory.
"""
type TimeTrackingTimelogCategoryConnection {
  """
  A list of edges.
  """
  edges: [TimeTrackingTimelogCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [TimeTrackingTimelogCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TimeTrackingTimelogCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TimeTrackingTimelogCategory
}

"""
A time-frame defined as a closed inclusive range of two dates
"""
input Timeframe {
  """
  End of the range.
  """
  end: Date!

  """
  Start of the range.
  """
  start: Date!
}

"""
Autogenerated input type of TimelineEventCreate
"""
input TimelineEventCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Incident ID of the timeline event.
  """
  incidentId: IssueID!

  """
  Text note of the timeline event.
  """
  note: String!

  """
  Timestamp of when the event occurred.
  """
  occurredAt: Time!
}

"""
Autogenerated return type of TimelineEventCreate
"""
type TimelineEventCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

"""
Autogenerated input type of TimelineEventDestroy
"""
input TimelineEventDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Timeline event ID to remove.
  """
  id: IncidentManagementTimelineEventID!
}

"""
Autogenerated return type of TimelineEventDestroy
"""
type TimelineEventDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

"""
Autogenerated input type of TimelineEventPromoteFromNote
"""
input TimelineEventPromoteFromNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Note ID from which the timeline event promoted.
  """
  noteId: NoteID!
}

"""
Autogenerated return type of TimelineEventPromoteFromNote
"""
type TimelineEventPromoteFromNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

"""
Describes an incident management timeline event
"""
type TimelineEventType {
  """
  Indicates the timeline event icon.
  """
  action: String!

  """
  User that created the timeline event.
  """
  author: UserCore

  """
  Timestamp when the event created.
  """
  createdAt: Time!

  """
  Indicates the timeline event is editable.
  """
  editable: Boolean!

  """
  ID of the timeline event.
  """
  id: IncidentManagementTimelineEventID!

  """
  Incident of the timeline event.
  """
  incident: Issue!

  """
  Text note of the timeline event.
  """
  note: String

  """
  HTML note of the timeline event.
  """
  noteHtml: String

  """
  Timestamp when the event occurred.
  """
  occurredAt: Time!

  """
  Note from which the timeline event was created.
  """
  promotedFromNote: Note

  """
  Timestamp when the event updated.
  """
  updatedAt: Time!

  """
  User that updated the timeline event.
  """
  updatedByUser: UserCore
}

"""
The connection type for TimelineEventType.
"""
type TimelineEventTypeConnection {
  """
  A list of edges.
  """
  edges: [TimelineEventTypeEdge]

  """
  A list of nodes.
  """
  nodes: [TimelineEventType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TimelineEventTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TimelineEventType
}

"""
Autogenerated input type of TimelineEventUpdate
"""
input TimelineEventUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the timeline event to update.
  """
  id: IncidentManagementTimelineEventID!

  """
  Text note of the timeline event.
  """
  note: String

  """
  Timestamp when the event occurred.
  """
  occurredAt: Time
}

"""
Autogenerated return type of TimelineEventUpdate
"""
type TimelineEventUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

type Timelog {
  """
  Internal ID of the timelog.
  """
  id: ID!

  """
  Issue that logged time was added to.
  """
  issue: Issue

  """
  Merge request that logged time was added to.
  """
  mergeRequest: MergeRequest

  """
  Note where the quick action was executed to add the logged time.
  """
  note: Note

  """
  Timestamp of when the time tracked was spent at.
  """
  spentAt: Time

  """
  Summary of how the time was spent.
  """
  summary: String

  """
  Time spent displayed in seconds.
  """
  timeSpent: Int!

  """
  User that logged the time.
  """
  user: UserCore!

  """
  Permissions for the current user on the resource
  """
  userPermissions: TimelogPermissions!
}

"""
The connection type for Timelog.
"""
type TimelogConnection {
  """
  A list of edges.
  """
  edges: [TimelogEdge]

  """
  A list of nodes.
  """
  nodes: [Timelog]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of TimelogCreate
"""
input TimelogCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the issuable (Issue, WorkItem or MergeRequest).
  """
  issuableId: IssuableID!

  """
  When the time was spent.
  """
  spentAt: Date!

  """
  Summary of time spent.
  """
  summary: String!

  """
  Amount of time spent.
  """
  timeSpent: String!
}

"""
Autogenerated return type of TimelogCreate
"""
type TimelogCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timelog.
  """
  timelog: Timelog
}

"""
Autogenerated input type of TimelogDelete
"""
input TimelogDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the timelog.
  """
  id: TimelogID!
}

"""
Autogenerated return type of TimelogDelete
"""
type TimelogDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timelog.
  """
  timelog: Timelog
}

"""
An edge in a connection.
"""
type TimelogEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Timelog
}

"""
A `TimelogID` is a global ID. It is encoded as a string.

An example `TimelogID` is: `"gid://gitlab/Timelog/1"`.
"""
scalar TimelogID

type TimelogPermissions {
  """
  Indicates the user can perform `admin_timelog` on this resource
  """
  adminTimelog: Boolean!
}

"""
Representing a to-do entry
"""
type Todo {
  """
  Action of the to-do item.
  """
  action: TodoActionEnum!

  """
  Author of this to-do item.
  """
  author: UserCore!

  """
  Body of the to-do item.
  """
  body: String!

  """
  Timestamp this to-do item was created.
  """
  createdAt: Time!

  """
  Group this to-do item is associated with.
  """
  group: Group

  """
  ID of the to-do item.
  """
  id: ID!

  """
  Note which created this to-do item.
  """
  note: Note

  """
  Project this to-do item is associated with.
  """
  project: Project

  """
  State of the to-do item.
  """
  state: TodoStateEnum!

  """
  Target of the to-do item.
  """
  target: Todoable!

  """
  Target type of the to-do item.
  """
  targetType: TodoTargetEnum!
}

enum TodoActionEnum {
  """
  User was set as an approver.
  """
  approval_required

  """
  User was assigned.
  """
  assigned

  """
  Build triggered by the user failed.
  """
  build_failed

  """
  User was directly addressed.
  """
  directly_addressed

  """
  User added a TODO.
  """
  marked

  """
  User was mentioned.
  """
  mentioned

  """
  Merge request authored by the user was removed from the merge train.
  """
  merge_train_removed

  """
  Review was requested from the user.
  """
  review_requested

  """
  Merge request authored by the user could not be merged.
  """
  unmergeable
}

"""
The connection type for Todo.
"""
type TodoConnection {
  """
  A list of edges.
  """
  edges: [TodoEdge]

  """
  A list of nodes.
  """
  nodes: [Todo]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of TodoCreate
"""
input TodoCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the to-do item's parent. Issues, merge requests, designs, and epics are supported.
  """
  targetId: TodoableID!
}

"""
Autogenerated return type of TodoCreate
"""
type TodoCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  To-do item created.
  """
  todo: Todo
}

"""
An edge in a connection.
"""
type TodoEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Todo
}

"""
A `TodoID` is a global ID. It is encoded as a string.

An example `TodoID` is: `"gid://gitlab/Todo/1"`.
"""
scalar TodoID

"""
Autogenerated input type of TodoMarkDone
"""
input TodoMarkDoneInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the to-do item to mark as done.
  """
  id: TodoID!
}

"""
Autogenerated return type of TodoMarkDone
"""
type TodoMarkDonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Requested to-do item.
  """
  todo: Todo!
}

"""
Autogenerated input type of TodoRestore
"""
input TodoRestoreInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the to-do item to restore.
  """
  id: TodoID!
}

"""
Autogenerated input type of TodoRestoreMany
"""
input TodoRestoreManyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global IDs of the to-do items to restore (a maximum of 50 is supported at once).
  """
  ids: [TodoID!]!
}

"""
Autogenerated return type of TodoRestoreMany
"""
type TodoRestoreManyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated to-do items.
  """
  todos: [Todo!]!
}

"""
Autogenerated return type of TodoRestore
"""
type TodoRestorePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Requested to-do item.
  """
  todo: Todo!
}

enum TodoStateEnum {
  """
  State of the todo is done.
  """
  done

  """
  State of the todo is pending.
  """
  pending
}

enum TodoTargetEnum {
  """
  Alert.
  """
  ALERT

  """
  Commit.
  """
  COMMIT

  """
  Design.
  """
  DESIGN

  """
  Issue.
  """
  ISSUE

  """
  Merge request.
  """
  MERGEREQUEST
}

interface Todoable {
  """
  URL of this object.
  """
  webUrl: String
}

"""
A `TodoableID` is a global ID. It is encoded as a string.

An example `TodoableID` is: `"gid://gitlab/Todoable/1"`.
"""
scalar TodoableID

"""
Autogenerated input type of TodosMarkAllDone
"""
input TodosMarkAllDoneInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the to-do item's parent. Issues, merge requests, designs, and
  epics are supported. If argument is omitted, all pending to-do items of the
  current user are marked as done.
  """
  targetId: TodoableID
}

"""
Autogenerated return type of TodosMarkAllDone
"""
type TodosMarkAllDonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated to-do items.
  """
  todos: [Todo!]!
}

type Topic {
  """
  URL to avatar image file of the topic.
  """
  avatarUrl: String

  """
  Description of the topic.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  ID of the topic.
  """
  id: ID!

  """
  Name of the topic.
  """
  name: String!

  """
  Title of the topic.
  """
  title: String!
}

"""
The connection type for Topic.
"""
type TopicConnection {
  """
  A list of edges.
  """
  edges: [TopicEdge]

  """
  A list of nodes.
  """
  nodes: [Topic]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TopicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Topic
}

type Tree {
  """
  Blobs of the tree.
  """
  blobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlobConnection!

  """
  Last commit for the tree.
  """
  lastCommit: Commit

  """
  Sub-modules of the tree.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Trees of the tree.
  """
  trees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TreeEntryConnection!
}

"""
The connection type for Tree.
"""
type TreeConnection {
  """
  A list of edges.
  """
  edges: [TreeEdge]

  """
  A list of nodes.
  """
  nodes: [Tree]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TreeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tree
}

"""
Represents a directory
"""
type TreeEntry implements Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Type of tree entry.
  """
  type: EntryType!

  """
  Web path for the tree entry (directory).
  """
  webPath: String

  """
  Web URL for the tree entry (directory).
  """
  webUrl: String
}

"""
The connection type for TreeEntry.
"""
type TreeEntryConnection {
  """
  A list of edges.
  """
  edges: [TreeEntryEdge]

  """
  A list of nodes.
  """
  nodes: [TreeEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TreeEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TreeEntry
}

enum TypeEnum {
  """
  Snippet created independent of any project.
  """
  personal

  """
  Snippet related to a specific project.
  """
  project
}

"""
A regexp containing patterns sourced from user input
"""
scalar UntrustedRegexp

"""
Autogenerated input type of UpdateAlertStatus
"""
input UpdateAlertStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IID of the alert to mutate.
  """
  iid: String!

  """
  Project the alert to mutate is in.
  """
  projectPath: ID!

  """
  Status to set the alert.
  """
  status: AlertManagementStatus!
}

"""
Autogenerated return type of UpdateAlertStatus
"""
type UpdateAlertStatusPayload {
  """
  Alert after mutation.
  """
  alert: AlertManagementAlert

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue created after mutation.
  """
  issue: Issue

  """
  To-do item after mutation.
  """
  todo: Todo
}

"""
Autogenerated input type of UpdateBoard
"""
input UpdateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether or not backlog list is hidden.
  """
  hideBacklogList: Boolean

  """
  Whether or not closed list is hidden.
  """
  hideClosedList: Boolean

  """
  Board global ID.
  """
  id: BoardID!

  """
  Board name.
  """
  name: String
}

"""
Autogenerated input type of UpdateBoardList
"""
input UpdateBoardListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the list is collapsed for this user.
  """
  collapsed: Boolean

  """
  Global ID of the list.
  """
  listId: ListID!

  """
  Position of list within the board.
  """
  position: Int
}

"""
Autogenerated return type of UpdateBoardList
"""
type UpdateBoardListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Mutated list.
  """
  list: BoardList
}

"""
Autogenerated return type of UpdateBoard
"""
type UpdateBoardPayload {
  """
  Board after mutation.
  """
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UpdateContainerExpirationPolicy
"""
input UpdateContainerExpirationPolicyInput {
  """
  This container expiration policy schedule.
  """
  cadence: ContainerExpirationPolicyCadenceEnum

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether this container expiration policy is enabled.
  """
  enabled: Boolean

  """
  Number of tags to retain.
  """
  keepN: ContainerExpirationPolicyKeepEnum

  """
  Tags with names matching this regex pattern will expire.
  """
  nameRegex: UntrustedRegexp

  """
  Tags with names matching this regex pattern will be preserved.
  """
  nameRegexKeep: UntrustedRegexp

  """
  Tags older that this will expire.
  """
  olderThan: ContainerExpirationPolicyOlderThanEnum

  """
  Project path where the container expiration policy is located.
  """
  projectPath: ID!
}

"""
Autogenerated return type of UpdateContainerExpirationPolicy
"""
type UpdateContainerExpirationPolicyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Container expiration policy after mutation.
  """
  containerExpirationPolicy: ContainerExpirationPolicy

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UpdateDependencyProxyImageTtlGroupPolicy
"""
input UpdateDependencyProxyImageTtlGroupPolicyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the policy is enabled or disabled.
  """
  enabled: Boolean

  """
  Group path for the group dependency proxy image TTL policy.
  """
  groupPath: ID!

  """
  Number of days to retain a cached image file.
  """
  ttl: Int
}

"""
Autogenerated return type of UpdateDependencyProxyImageTtlGroupPolicy
"""
type UpdateDependencyProxyImageTtlGroupPolicyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Group image TTL policy after mutation.
  """
  dependencyProxyImageTtlPolicy: DependencyProxyImageTtlGroupPolicy

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UpdateDependencyProxySettings
"""
input UpdateDependencyProxySettingsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates whether the policy is enabled or disabled.
  """
  enabled: Boolean

  """
  Group path for the group dependency proxy.
  """
  groupPath: ID!
}

"""
Autogenerated return type of UpdateDependencyProxySettings
"""
type UpdateDependencyProxySettingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Group dependency proxy settings after mutation.
  """
  dependencyProxySetting: DependencyProxySetting

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

input UpdateDiffImagePositionInput {
  """
  Total height of the image.
  """
  height: Int

  """
  Total width of the image.
  """
  width: Int

  """
  X position of the note.
  """
  x: Int

  """
  Y position of the note.
  """
  y: Int
}

"""
Autogenerated input type of UpdateImageDiffNote
"""
input UpdateImageDiffNoteInput {
  """
  Content of the note.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the note to update.
  """
  id: NoteID!

  """
  Position of this note on a diff.
  """
  position: UpdateDiffImagePositionInput
}

"""
Autogenerated return type of UpdateImageDiffNote
"""
type UpdateImageDiffNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of UpdateIssue
"""
input UpdateIssueInput {
  """
  IDs of labels to be added to the issue.
  """
  addLabelIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates the issue is confidential.
  """
  confidential: Boolean

  """
  Description of the issue.
  """
  description: String

  """
  Due date of the issue.
  """
  dueDate: ISO8601Date

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  IDs of labels to be set. Replaces existing issue labels.
  """
  labelIds: [ID!]

  """
  Indicates discussion is locked on the issue.
  """
  locked: Boolean

  """
  ID of the milestone to assign to the issue. On update milestone will be removed if set to null.
  """
  milestoneId: ID

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IDs of labels to be removed from the issue.
  """
  removeLabelIds: [ID!]

  """
  Close or reopen an issue.
  """
  stateEvent: IssueStateEvent

  """
  Title of the issue.
  """
  title: String

  """
  Type of the issue.
  """
  type: IssueType
}

"""
Autogenerated return type of UpdateIssue
"""
type UpdateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of UpdateNamespacePackageSettings
"""
input UpdateNamespacePackageSettingsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  When generic_duplicates_allowed is false, you can publish duplicate packages
  with names that match this regex. Otherwise, this setting has no effect.
  """
  genericDuplicateExceptionRegex: UntrustedRegexp

  """
  Indicates whether duplicate generic packages are allowed for this namespace.
  """
  genericDuplicatesAllowed: Boolean

  """
  When maven_duplicates_allowed is false, you can publish duplicate packages
  with names that match this regex. Otherwise, this setting has no effect.
  """
  mavenDuplicateExceptionRegex: UntrustedRegexp

  """
  Indicates whether duplicate Maven packages are allowed for this namespace.
  """
  mavenDuplicatesAllowed: Boolean

  """
  Namespace path where the namespace package setting is located.
  """
  namespacePath: ID!
}

"""
Autogenerated return type of UpdateNamespacePackageSettings
"""
type UpdateNamespacePackageSettingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Namespace package setting after mutation.
  """
  packageSettings: PackageSettings
}

"""
Autogenerated input type of UpdateNote
"""
input UpdateNoteInput {
  """
  Content of the note.
  """
  body: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Confidentiality flag of a note. Default is false. Deprecated in 14.10: No
  longer allowed to update confidentiality of notes.
  """
  confidential: Boolean @deprecated(reason: "No longer allowed to update confidentiality of notes. Deprecated in 14.10.")

  """
  Global ID of the note to update.
  """
  id: NoteID!
}

"""
Autogenerated return type of UpdateNote
"""
type UpdateNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of UpdatePackagesCleanupPolicy
"""
input UpdatePackagesCleanupPolicyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Number of duplicated package files to retain.
  """
  keepNDuplicatedPackageFiles: PackagesCleanupKeepDuplicatedPackageFilesEnum

  """
  Project path where the packages cleanup policy is located.
  """
  projectPath: ID!
}

"""
Autogenerated return type of UpdatePackagesCleanupPolicy
"""
type UpdatePackagesCleanupPolicyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Packages cleanup policy after mutation.
  """
  packagesCleanupPolicy: PackagesCleanupPolicy
}

"""
Autogenerated input type of UpdateSnippet
"""
input UpdateSnippetInput {
  """
  Actions to perform over the snippet repository and blobs.
  """
  blobActions: [SnippetBlobActionInputType!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of the snippet.
  """
  description: String

  """
  Global ID of the snippet to update.
  """
  id: SnippetID!

  """
  Title of the snippet.
  """
  title: String

  """
  Visibility level of the snippet.
  """
  visibilityLevel: VisibilityLevelsEnum
}

"""
Autogenerated return type of UpdateSnippet
"""
type UpdateSnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

scalar Upload

"""
Autogenerated input type of UploadDelete
"""
input UploadDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Upload filename.
  """
  filename: String!

  """
  Full path of the group with which the resource is associated.
  """
  groupPath: ID

  """
  Full path of the project with which the resource is associated.
  """
  projectPath: ID

  """
  Secret part of upload path.
  """
  secret: String!
}

"""
Autogenerated return type of UploadDelete
"""
type UploadDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Deleted upload.
  """
  upload: FileUpload
}

"""
A `UploadID` is a global ID. It is encoded as a string.

An example `UploadID` is: `"gid://gitlab/Upload/1"`.
"""
scalar UploadID

"""
Represents a recorded measurement (object count) for the Admins
"""
type UsageTrendsMeasurement {
  """
  Object count.
  """
  count: Int!

  """
  Type of objects being measured.
  """
  identifier: MeasurementIdentifier!

  """
  Time the measurement was recorded.
  """
  recordedAt: Time
}

"""
The connection type for UsageTrendsMeasurement.
"""
type UsageTrendsMeasurementConnection {
  """
  A list of edges.
  """
  edges: [UsageTrendsMeasurementEdge]

  """
  A list of nodes.
  """
  nodes: [UsageTrendsMeasurement]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UsageTrendsMeasurementEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UsageTrendsMeasurement
}

"""
Representation of a GitLab user.
"""
interface User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User email. Deprecated in 13.7: This was renamed.
  """
  email: String @deprecated(reason: "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.")

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  Location of the user.
  """
  location: String

  """
  Human-readable name of the user. Returns `****` if the user is a project bot
  and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Saved replies authored by the user. Will not return saved replies if `saved_replies` feature flag is disabled.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    search: String
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  To-do items of the user.
  """
  todos(
    """
    Action to be filtered.
    """
    action: [TodoActionEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of a group.
    """
    groupId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: [ID!]

    """
    State of the todo.
    """
    state: [TodoStateEnum!]

    """
    Type of the todo.
    """
    type: [TodoTargetEnum!]
  ): TodoConnection

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

type UserCallout {
  """
  Date when the callout was dismissed.
  """
  dismissedAt: Time

  """
  Name of the feature that the callout is for.
  """
  featureName: UserCalloutFeatureNameEnum
}

"""
The connection type for UserCallout.
"""
type UserCalloutConnection {
  """
  A list of edges.
  """
  edges: [UserCalloutEdge]

  """
  A list of nodes.
  """
  nodes: [UserCallout]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of UserCalloutCreate
"""
input UserCalloutCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Feature name you want to dismiss the callout for.
  """
  featureName: String!
}

"""
Autogenerated return type of UserCalloutCreate
"""
type UserCalloutCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  User callout dismissed.
  """
  userCallout: UserCallout!
}

"""
An edge in a connection.
"""
type UserCalloutEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserCallout
}

"""
Name of the feature that the callout is for.
"""
enum UserCalloutFeatureNameEnum {
  """
  Callout feature name for active_user_count_threshold.
  """
  ACTIVE_USER_COUNT_THRESHOLD

  """
  Callout feature name for attention_requests_side_nav.
  """
  ATTENTION_REQUESTS_SIDE_NAV

  """
  Callout feature name for attention_requests_top_nav.
  """
  ATTENTION_REQUESTS_TOP_NAV

  """
  Callout feature name for buy_pipeline_minutes_notification_dot.
  """
  BUY_PIPELINE_MINUTES_NOTIFICATION_DOT

  """
  Callout feature name for canary_deployment.
  """
  CANARY_DEPLOYMENT

  """
  Callout feature name for ci_deprecation_warning_for_types_keyword.
  """
  CI_DEPRECATION_WARNING_FOR_TYPES_KEYWORD

  """
  Callout feature name for cloud_licensing_subscription_activation_banner.
  """
  CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER

  """
  Callout feature name for cluster_security_warning.
  """
  CLUSTER_SECURITY_WARNING

  """
  Callout feature name for eoa_bronze_plan_banner.
  """
  EOA_BRONZE_PLAN_BANNER

  """
  Callout feature name for feature_flags_new_version.
  """
  FEATURE_FLAGS_NEW_VERSION

  """
  Callout feature name for gcp_signup_offer.
  """
  GCP_SIGNUP_OFFER

  """
  Callout feature name for geo_enable_hashed_storage.
  """
  GEO_ENABLE_HASHED_STORAGE

  """
  Callout feature name for geo_migrate_hashed_storage.
  """
  GEO_MIGRATE_HASHED_STORAGE

  """
  Callout feature name for gke_cluster_integration.
  """
  GKE_CLUSTER_INTEGRATION

  """
  Callout feature name for gold_trial_billings.
  """
  GOLD_TRIAL_BILLINGS

  """
  Callout feature name for mr_experience_survey.
  """
  MR_EXPERIENCE_SURVEY

  """
  Callout feature name for namespace_storage_limit_banner_alert_threshold.
  """
  NAMESPACE_STORAGE_LIMIT_BANNER_ALERT_THRESHOLD

  """
  Callout feature name for namespace_storage_limit_banner_error_threshold.
  """
  NAMESPACE_STORAGE_LIMIT_BANNER_ERROR_THRESHOLD

  """
  Callout feature name for namespace_storage_limit_banner_info_threshold.
  """
  NAMESPACE_STORAGE_LIMIT_BANNER_INFO_THRESHOLD

  """
  Callout feature name for namespace_storage_limit_banner_warning_threshold.
  """
  NAMESPACE_STORAGE_LIMIT_BANNER_WARNING_THRESHOLD

  """
  Callout feature name for new_user_signups_cap_reached.
  """
  NEW_USER_SIGNUPS_CAP_REACHED

  """
  Callout feature name for personal_access_token_expiry.
  """
  PERSONAL_ACCESS_TOKEN_EXPIRY

  """
  Callout feature name for personal_project_limitations_banner.
  """
  PERSONAL_PROJECT_LIMITATIONS_BANNER

  """
  Callout feature name for pipeline_needs_banner.
  """
  PIPELINE_NEEDS_BANNER

  """
  Callout feature name for pipeline_needs_hover_tip.
  """
  PIPELINE_NEEDS_HOVER_TIP

  """
  Callout feature name for preview_user_over_limit_free_plan_alert.
  """
  PREVIEW_USER_OVER_LIMIT_FREE_PLAN_ALERT

  """
  Callout feature name for profile_personal_access_token_expiry.
  """
  PROFILE_PERSONAL_ACCESS_TOKEN_EXPIRY

  """
  Callout feature name for project_quality_summary_feedback.
  """
  PROJECT_QUALITY_SUMMARY_FEEDBACK

  """
  Callout feature name for registration_enabled_callout.
  """
  REGISTRATION_ENABLED_CALLOUT

  """
  Callout feature name for security_configuration_devops_alert.
  """
  SECURITY_CONFIGURATION_DEVOPS_ALERT

  """
  Callout feature name for security_configuration_upgrade_banner.
  """
  SECURITY_CONFIGURATION_UPGRADE_BANNER

  """
  Callout feature name for security_newsletter_callout.
  """
  SECURITY_NEWSLETTER_CALLOUT

  """
  Callout feature name for security_training_feature_promotion.
  """
  SECURITY_TRAINING_FEATURE_PROMOTION

  """
  Callout feature name for storage_enforcement_banner_first_enforcement_threshold.
  """
  STORAGE_ENFORCEMENT_BANNER_FIRST_ENFORCEMENT_THRESHOLD

  """
  Callout feature name for storage_enforcement_banner_fourth_enforcement_threshold.
  """
  STORAGE_ENFORCEMENT_BANNER_FOURTH_ENFORCEMENT_THRESHOLD

  """
  Callout feature name for storage_enforcement_banner_second_enforcement_threshold.
  """
  STORAGE_ENFORCEMENT_BANNER_SECOND_ENFORCEMENT_THRESHOLD

  """
  Callout feature name for storage_enforcement_banner_third_enforcement_threshold.
  """
  STORAGE_ENFORCEMENT_BANNER_THIRD_ENFORCEMENT_THRESHOLD

  """
  Callout feature name for submit_license_usage_data_banner.
  """
  SUBMIT_LICENSE_USAGE_DATA_BANNER

  """
  Callout feature name for suggest_pipeline.
  """
  SUGGEST_PIPELINE

  """
  Callout feature name for suggest_popover_dismissed.
  """
  SUGGEST_POPOVER_DISMISSED

  """
  Callout feature name for tabs_position_highlight.
  """
  TABS_POSITION_HIGHLIGHT

  """
  Callout feature name for terraform_notification_dismissed.
  """
  TERRAFORM_NOTIFICATION_DISMISSED

  """
  Callout feature name for threat_monitoring_info.
  """
  THREAT_MONITORING_INFO

  """
  Callout feature name for trial_status_reminder_d14.
  """
  TRIAL_STATUS_REMINDER_D14

  """
  Callout feature name for trial_status_reminder_d3.
  """
  TRIAL_STATUS_REMINDER_D3

  """
  Callout feature name for two_factor_auth_recovery_settings_check.
  """
  TWO_FACTOR_AUTH_RECOVERY_SETTINGS_CHECK

  """
  Callout feature name for ultimate_trial.
  """
  ULTIMATE_TRIAL

  """
  Callout feature name for unfinished_tag_cleanup_callout.
  """
  UNFINISHED_TAG_CLEANUP_CALLOUT

  """
  Callout feature name for user_reached_limit_free_plan_alert.
  """
  USER_REACHED_LIMIT_FREE_PLAN_ALERT

  """
  Callout feature name for verification_reminder.
  """
  VERIFICATION_REMINDER

  """
  Callout feature name for web_ide_alert_dismissed.
  """
  WEB_IDE_ALERT_DISMISSED

  """
  Callout feature name for web_ide_ci_environments_guidance.
  """
  WEB_IDE_CI_ENVIRONMENTS_GUIDANCE
}

"""
Core represention of a GitLab user.
"""
type UserCore implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User email. Deprecated in 13.7: This was renamed.
  """
  email: String @deprecated(reason: "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.")

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  Location of the user.
  """
  location: String

  """
  Human-readable name of the user. Returns `****` if the user is a project bot
  and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Merge requests created after this timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before this timestamp.
    """
    createdBefore: Time

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Merge requests merged after this date.
    """
    mergedAfter: Time

    """
    Merge requests merged before this date.
    """
    mergedBefore: Time

    """
    Title of the milestone.
    """
    milestoneTitle: String

    """
    List of negated arguments.
    Warning: this argument is experimental and a subject to change in future.
    """
    not: MergeRequestsResolverNegatedParams

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    Sort merge requests by this criteria.
    """
    sort: MergeRequestSort = created_desc

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have this state.
    """
    state: MergeRequestState

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge requests updated after this timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before this timestamp.
    """
    updatedBefore: Time
  ): MergeRequestConnection

  """
  Saved replies authored by the user. Will not return saved replies if `saved_replies` feature flag is disabled.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    search: String
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs for a user.
    """
    username: String
  ): TimelogConnection

  """
  To-do items of the user.
  """
  todos(
    """
    Action to be filtered.
    """
    action: [TodoActionEnum!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    ID of an author.
    """
    authorId: [ID!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    ID of a group.
    """
    groupId: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    ID of a project.
    """
    projectId: [ID!]

    """
    State of the todo.
    """
    state: [TodoStateEnum!]

    """
    Type of the todo.
    """
    type: [TodoTargetEnum!]
  ): TodoConnection

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for UserCore.
"""
type UserCoreConnection {
  """
  A list of edges.
  """
  edges: [UserCoreEdge]

  """
  A list of nodes.
  """
  nodes: [UserCore]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserCoreEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserCore
}

"""
A `UserID` is a global ID. It is encoded as a string.

An example `UserID` is: `"gid://gitlab/User/1"`.
"""
scalar UserID

"""
Information about a merge request given a specific user.

This object has two parts to its state: a `User` and a `MergeRequest`. All
fields relate to interactions between the two entities.
"""
type UserMergeRequestInteraction {
  """
  Whether this user has approved this merge request.
  """
  approved: Boolean!

  """
  Whether this user can merge this merge request.
  """
  canMerge: Boolean!

  """
  Whether this user can update this merge request.
  """
  canUpdate: Boolean!

  """
  State of the review by this user.
  """
  reviewState: MergeRequestReviewState

  """
  Whether this user has provided a review for this merge request.
  """
  reviewed: Boolean!
}

type UserPermissions {
  """
  Indicates the user can perform `create_snippet` on this resource
  """
  createSnippet: Boolean!
}

type UserPreferences {
  """
  Sort order for issue lists.
  """
  issuesSort: IssueSort
}

"""
Autogenerated input type of UserPreferencesUpdate
"""
input UserPreferencesUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Sort order for issue lists.
  """
  issuesSort: IssueSort
}

"""
Autogenerated return type of UserPreferencesUpdate
"""
type UserPreferencesUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  User preferences after mutation.
  """
  userPreferences: UserPreferences
}

"""
Possible states of a user
"""
enum UserState {
  """
  User is active and is able to use the system.
  """
  active

  """
  User has been blocked and is prevented from using the system.
  """
  blocked

  """
  User is no longer active and is unable to use the system.
  """
  deactivated
}

type UserStatus {
  """
  User availability status.
  """
  availability: AvailabilityEnum!

  """
  String representation of emoji.
  """
  emoji: String

  """
  User status message.
  """
  message: String

  """
  HTML of the user status message
  """
  messageHtml: String
}

"""
A `UsersSavedReplyID` is a global ID. It is encoded as a string.

An example `UsersSavedReplyID` is: `"gid://gitlab/Users::SavedReply/1"`.
"""
scalar UsersSavedReplyID

enum VisibilityLevelsEnum {
  """
  Internal visibility level.
  """
  internal

  """
  Private visibility level.
  """
  private

  """
  Public visibility level.
  """
  public
}

enum VisibilityScopesEnum {
  """
  Snippet is visible for any logged in user except external users.
  """
  internal

  """
  Snippet is visible only to the snippet creator.
  """
  private

  """
  Snippet can be accessed without any authentication.
  """
  public
}

type WorkItem {
  """
  Indicates the work item is confidential.
  """
  confidential: Boolean!

  """
  Description of the work item.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Internal ID of the work item.
  """
  iid: ID!

  """
  Lock version of the work item. Incremented each time the work item is updated.
  """
  lockVersion: Int!

  """
  State of the work item.
  """
  state: WorkItemState!

  """
  Title of the work item.
  """
  title: String!

  """
  The GitLab Flavored Markdown rendering of `title`
  """
  titleHtml: String

  """
  Permissions for the current user on the resource
  """
  userPermissions: WorkItemPermissions!

  """
  Collection of widgets that belong to the work item.
  """
  widgets: [WorkItemWidget!]

  """
  Type assigned to the work item.
  """
  workItemType: WorkItemType!
}

"""
The connection type for WorkItem.
"""
type WorkItemConnection {
  """
  A list of edges.
  """
  edges: [WorkItemEdge]

  """
  A list of nodes.
  """
  nodes: [WorkItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

input WorkItemConvertTaskInput {
  """
  Last line in the Markdown source that defines the list item task.
  """
  lineNumberEnd: Int!

  """
  First line in the Markdown source that defines the list item task.
  """
  lineNumberStart: Int!

  """
  Current lock version of the work item containing the task in the description.
  """
  lockVersion: Int!

  """
  Full string of the task to be replaced. New title for the created work item.
  """
  title: String!

  """
  Global ID of the work item type used to create the new work item.
  """
  workItemTypeId: WorkItemsTypeID!
}

"""
Autogenerated input type of WorkItemCreateFromTask
"""
input WorkItemCreateFromTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Arguments necessary to convert a task into a work item.
  """
  workItemData: WorkItemConvertTaskInput!
}

"""
Autogenerated return type of WorkItemCreateFromTask
"""
type WorkItemCreateFromTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  New work item created from task.
  """
  newWorkItem: WorkItem

  """
  Updated work item.
  """
  workItem: WorkItem
}

"""
Autogenerated input type of WorkItemCreate
"""
input WorkItemCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Sets the work item confidentiality.
  """
  confidential: Boolean

  """
  Description of the work item.
  """
  description: String

  """
  Input for hierarchy widget.
  """
  hierarchyWidget: WorkItemWidgetHierarchyCreateInput

  """
  Full path of the project the work item is associated with.
  """
  projectPath: ID!

  """
  Title of the work item.
  """
  title: String!

  """
  Global ID of a work item type.
  """
  workItemTypeId: WorkItemsTypeID!
}

"""
Autogenerated return type of WorkItemCreate
"""
type WorkItemCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Created work item.
  """
  workItem: WorkItem
}

"""
Autogenerated input type of WorkItemDelete
"""
input WorkItemDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!
}

"""
Autogenerated return type of WorkItemDelete
"""
type WorkItemDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Project the deleted work item belonged to.
  """
  project: Project
}

"""
Autogenerated input type of WorkItemDeleteTask
"""
input WorkItemDeleteTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Current lock version of the work item containing the task in the description.
  """
  lockVersion: Int!

  """
  Arguments necessary to delete a task from a work item's description.
  """
  taskData: WorkItemDeletedTaskInput!
}

"""
Autogenerated return type of WorkItemDeleteTask
"""
type WorkItemDeleteTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated work item.
  """
  workItem: WorkItem
}

input WorkItemDeletedTaskInput {
  """
  Global ID of the task referenced in the work item's description.
  """
  id: WorkItemID!

  """
  Last line in the Markdown source that defines the list item task.
  """
  lineNumberEnd: Int!

  """
  First line in the Markdown source that defines the list item task.
  """
  lineNumberStart: Int!
}

"""
An edge in a connection.
"""
type WorkItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkItem
}

"""
A `WorkItemID` is a global ID. It is encoded as a string.

An example `WorkItemID` is: `"gid://gitlab/WorkItem/1"`.

While we transition from Issues into Work Items this type will temporarily support
`IssueID` like: `"gid://gitlab/Issue/1"`. This behavior will be removed without notice in the future.
"""
scalar WorkItemID

"""
Check permissions for the current user on a work item
"""
type WorkItemPermissions {
  """
  Indicates the user can perform `delete_work_item` on this resource
  """
  deleteWorkItem: Boolean!

  """
  Indicates the user can perform `read_work_item` on this resource
  """
  readWorkItem: Boolean!

  """
  Indicates the user can perform `update_work_item` on this resource
  """
  updateWorkItem: Boolean!
}

"""
Values for sorting work items
"""
enum WorkItemSort {
  """
  Created at ascending order.
  """
  CREATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Title by ascending order.
  """
  TITLE_ASC

  """
  Title by descending order.
  """
  TITLE_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Created at ascending order.
  """
  created_asc @deprecated(reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5.")

  """
  Created at descending order.
  """
  created_desc @deprecated(reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5.")

  """
  Updated at ascending order.
  """
  updated_asc @deprecated(reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5.")

  """
  Updated at descending order.
  """
  updated_desc @deprecated(reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5.")
}

"""
State of a GitLab work item
"""
enum WorkItemState {
  """
  In closed state.
  """
  CLOSED

  """
  In open state.
  """
  OPEN
}

"""
Values for work item state events
"""
enum WorkItemStateEvent {
  """
  Closes the work item.
  """
  CLOSE

  """
  Reopens the work item.
  """
  REOPEN
}

type WorkItemType {
  """
  Icon name of the work item type.
  """
  iconName: String

  """
  Global ID of the work item type.
  """
  id: WorkItemsTypeID!

  """
  Name of the work item type.
  """
  name: String!
}

"""
The connection type for WorkItemType.
"""
type WorkItemTypeConnection {
  """
  A list of edges.
  """
  edges: [WorkItemTypeEdge]

  """
  A list of nodes.
  """
  nodes: [WorkItemType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type WorkItemTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkItemType
}

"""
Autogenerated input type of WorkItemUpdate
"""
input WorkItemUpdateInput {
  """
  Input for assignees widget.
  """
  assigneesWidget: WorkItemWidgetAssigneesInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Sets the work item confidentiality.
  """
  confidential: Boolean

  """
  Input for description widget.
  """
  descriptionWidget: WorkItemWidgetDescriptionInput

  """
  Input for hierarchy widget.
  """
  hierarchyWidget: WorkItemWidgetHierarchyUpdateInput

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Input for start and due date widget.
  """
  startAndDueDateWidget: WorkItemWidgetStartAndDueDateUpdateInput

  """
  Close or reopen a work item.
  """
  stateEvent: WorkItemStateEvent

  """
  Title of the work item.
  """
  title: String
}

"""
Autogenerated return type of WorkItemUpdate
"""
type WorkItemUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated work item.
  """
  workItem: WorkItem
}

"""
Autogenerated input type of WorkItemUpdateTask
"""
input WorkItemUpdateTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Arguments necessary to update a task.
  """
  taskData: WorkItemUpdatedTaskInput!
}

"""
Autogenerated return type of WorkItemUpdateTask
"""
type WorkItemUpdateTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated task.
  """
  task: WorkItem

  """
  Updated work item.
  """
  workItem: WorkItem
}

"""
Autogenerated input type of WorkItemUpdateWidgets
"""
input WorkItemUpdateWidgetsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Input for description widget.
  """
  descriptionWidget: WorkItemWidgetDescriptionInput

  """
  Global ID of the work item.
  """
  id: WorkItemID!
}

"""
Autogenerated return type of WorkItemUpdateWidgets
"""
type WorkItemUpdateWidgetsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated work item.
  """
  workItem: WorkItem
}

input WorkItemUpdatedTaskInput {
  """
  Input for assignees widget.
  """
  assigneesWidget: WorkItemWidgetAssigneesInput

  """
  Sets the work item confidentiality.
  """
  confidential: Boolean

  """
  Input for description widget.
  """
  descriptionWidget: WorkItemWidgetDescriptionInput

  """
  Input for hierarchy widget.
  """
  hierarchyWidget: WorkItemWidgetHierarchyUpdateInput

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Input for start and due date widget.
  """
  startAndDueDateWidget: WorkItemWidgetStartAndDueDateUpdateInput

  """
  Close or reopen a work item.
  """
  stateEvent: WorkItemStateEvent

  """
  Title of the work item.
  """
  title: String
}

interface WorkItemWidget {
  """
  Widget type.
  """
  type: WorkItemWidgetType
}

"""
Represents an assignees widget
"""
type WorkItemWidgetAssignees implements WorkItemWidget {
  """
  Indicates whether multiple assignees are allowed.
  """
  allowsMultipleAssignees: Boolean

  """
  Assignees of the work item.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Indicates whether the current user can invite members to the work item's project.
  """
  canInviteMembers: Boolean!

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetAssigneesInput {
  """
  Global IDs of assignees.
  """
  assigneeIds: [UserID!]!
}

"""
Represents a description widget
"""
type WorkItemWidgetDescription implements WorkItemWidget {
  """
  Description of the work item.
  """
  description: String

  """
  The GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetDescriptionInput {
  """
  Description of the work item.
  """
  description: String!
}

"""
Represents a hierarchy widget
"""
type WorkItemWidgetHierarchy implements WorkItemWidget {
  """
  Child work items.
  """
  children(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemConnection

  """
  Parent work item.
  """
  parent: WorkItem

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetHierarchyCreateInput {
  """
  Global ID of the parent work item.
  """
  parentId: WorkItemID
}

input WorkItemWidgetHierarchyUpdateInput {
  """
  Global IDs of children work items.
  """
  childrenIds: [WorkItemID!]

  """
  Global ID of the parent work item. Use `null` to remove the association.
  """
  parentId: WorkItemID
}

"""
Represents the labels widget
"""
type WorkItemWidgetLabels implements WorkItemWidget {
  """
  Indicates whether a scoped label is allowed.
  """
  allowsScopedLabels: Boolean

  """
  Labels assigned to the work item.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

"""
Represents a start and due date widget
"""
type WorkItemWidgetStartAndDueDate implements WorkItemWidget {
  """
  Due date of the work item.
  """
  dueDate: Date

  """
  Start date of the work item.
  """
  startDate: Date

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetStartAndDueDateUpdateInput {
  """
  Due date for the work item.
  """
  dueDate: Date

  """
  Start date for the work item.
  """
  startDate: Date
}

"""
Type of a work item widget
"""
enum WorkItemWidgetType {
  """
  Assignees widget.
  """
  ASSIGNEES

  """
  Description widget.
  """
  DESCRIPTION

  """
  Hierarchy widget.
  """
  HIERARCHY

  """
  Labels widget.
  """
  LABELS

  """
  Start And Due Date widget.
  """
  START_AND_DUE_DATE
}

"""
A `WorkItemsTypeID` is a global ID. It is encoded as a string.

An example `WorkItemsTypeID` is: `"gid://gitlab/WorkItems::Type/1"`.
"""
scalar WorkItemsTypeID
